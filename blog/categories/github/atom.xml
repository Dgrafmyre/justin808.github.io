<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Rails on Maui]]></title>
  <link href="http://www.railsonmaui.com/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://www.railsonmaui.com/"/>
  <updated>2013-05-12T16:18:34-10:00</updated>
  <id>http://www.railsonmaui.com/</id>
  <author>
    <name><![CDATA[Justin Gordon]]></name>
    <email><![CDATA[justin.gordon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress Setup with Github, Org Mode, and LiveReload]]></title>
    <link href="http://www.railsonmaui.com/blog/2013/04/27/octopress-setup-with-github-and-org-mode/"/>
    <updated>2013-04-27T22:46:00-10:00</updated>
    <id>http://www.railsonmaui.com/blog/2013/04/27/octopress-setup-with-github-and-org-mode</id>
    <content type="html"><![CDATA[<p>
WordPress seemed like a good blogging platform, but it just didn't feel right. I
spend all my day editing text files using vim key-bindings, and I love <a href="http://orgmode.org/">Org Mode</a> for all non-coding writing. If you don't know Org Mode, it's like having
Markdown mode on steroids. You can have a numbered list in Markdown, but
org-mode lets you re-order the list, and that's just the beginning. Editing blog
documents in the WordPress editor felt almost as bad as being told to use MS
Word. I found that ergonomics of Org Mode, including all the goodness of recent
versions of <a href="http://www.gnu.org/software/emacs/">Emacs</a>, including <a href="http://emacswiki.org/emacs/Evil">Evil</a> (Vim emulation), just made organization of
creative thoughts so much more enjoyable.
</p>


<p>
So I bit the bullet one weekend, and dove into <a href="http://octopress.org/">Octopress</a>. You're looking at the
results of this endeavor, including my first Octopress article, and the latest
tips on recreating this sort of blog using Octopress with Org Mode authoring,
using LiveReload, and deployed at no charge on github.com. 
</p>


<p>
If you used to writing real web applications, rather than know the intricacies
of a giant monolithic blogging platform, then the <a href="http://octopress.org/docs/theme/template/">customization of Octopress</a>
seems so much more straightforward. This is so much more like the Unix
philosophy that so many of us love, which is small and modular, rather than
monolithic.
</p>


<p>
I like <a href="https://github.com/robdodson/robdodson.github.com/blob/source/source/_posts/2012-04-30-custom-domain-with-octopress-and-github-pages.markdown">Rob Dodson's summary</a> (noting Org Mode plus Emacs):
</p>


<blockquote><p><a href="http://octopress.org/">Octopress</a> is a blogging framework written by <a href="http://brandonmathis.com/">Brandon Mathis</a>
(<a href="https://twitter.com/#!/imathis">@imathis</a>) which sits on top of <a href="https://github.com/mojombo/jekyll">Jekyll</a>. Jekyll is
a static site generator, meaning there's no database associated with your blog. Instead of writing everything in a
WSYWIG linked to MySQL (like Wordpress or Blogger) you produce text files using Markdown which are then converted to
static HTML. There are 3 huge benefits to this approach. First, writing in
Markdown [<em>org-mode</em> for Justin] is awesome. Once you learn the
syntax it's incredibly fast and you don't have to spend time playing with a tiny little editor window just to
<s>add</s> <em>some</em> <strong>style</strong> to your posts. Second, writing in your favorite text editor is also awesome. I produce
everything in <a href="http://www.sublimetext.com/2">Sublime Text 2</a> [<em>Emacs</em> for Justin] and every day I discover new tricks to make the process
better. If you've ever had to write a blog post using one of those horrible little TinyMCE editors you will appreciate
this feature. And lastly, static HTML is <em>fast</em>.</p></blockquote>

<p>
I found it totally neat that I could embed markdown inside the org-mode
document. See below for how this is done.
</p>


<p>
This article should be useful for:
</p>


<ol>
<li>Any interest in using org-mode to publish to Octopress including some
     reasons I use Org Mode (with Emacs).
</li>
<li>Some explanation of what Octopress and git are doing.
</li>
<li>How to use LiveReload with Octopress and Org Mode.
</li>
<li>Anybody curious about how using free github pages works to host Octopress.
</li>
</ol>




<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Basic setup</a></li>
<li><a href="#sec-2">2 Some Perspectives on how Octopress Works</a>
<ul>
<li><a href="#sec-2-1">2.1 Posts</a></li>
<li><a href="#sec-2-2">2.2 Pages</a></li>
</ul>
</li>
<li><a href="#sec-3">3 POW</a></li>
<li><a href="#sec-4">4 LiveReload</a></li>
<li><a href="#sec-5">5 Org-Mode</a>
<ul>
<li><a href="#sec-5-1">5.1 Why org-mode for blog publishing?</a></li>
<li><a href="#sec-5-2">5.2 Org-mode Integration</a></li>
</ul>
</li>
<li><a href="#sec-6">6 Useful Scripts</a></li>
<li><a href="#sec-7">7 Deploying to Github: Directory Structure of Octopress and the master and source Git Branches</a></li>
<li><a href="#sec-8">8 Useful Links</a></li>
<li><a href="#sec-9">9 Parting words&hellip;</a></li>
</ul>
</div>
</div>




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Basic setup</h2>
<div class="outline-text-2" id="text-1">

<ol>
<li><a href="#http-robdodson.me-blog-2012-04-30-custom-domain-with-octopress-and-github-pages">Rob Dodson on Octopress</a>: Start off with these instructions from this posting
   on April 30th, 2012. There are a few differences worth noting:
<ol>
<li>You may wish to change the .rvmrc to a .ruby-version file
</li>
<li>Github recommends your deployment repository be named <code>yourname.github.io</code>,
      not <code>yourname.github.com</code>.
</li>
<li>After you run <code>rake setup_github_pages</code> and before running <code>rake       generate</code>, you should run <code>rake install</code>. If you forget, there's a clear
      message indicating this omission.
</li>
</ol>

</li>
<li>Customize <code>octopress/_config.yml</code>. The yaml file contains descriptions.
</li>
<li>Update the DNS to use your custom domain if you wish: <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Github directions on setting up a custom domain</a>
</li>
<li>At this point, you can create a post:
</li>
</ol>


<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  rake new_post<span class="o">[</span><span class="s2">&quot;my post name&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p> 
  Create a page:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  rake new_page<span class="o">[</span><span class="s2">&quot;my page name&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

  Generate and deploy:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  rake gen_deploy
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p> 
  Watch the site and regenerate when it changes:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  rake watch
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>  
  Preview the site in a web browser:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  rake preview
</span></code></pre></td></tr></table></div></figure></notextile></div>
</p>
<p>  
  See all the available rake options:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  rake -T
</span></code></pre></td></tr></table></div></figure></notextile></div>

  Save changes to source branch:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>  git add .
</span><span class='line'>  git commit -m <span class="s2">&quot;save changes to source&quot;</span>
</span><span class='line'>  git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

</p></div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Some Perspectives on how Octopress Works</h2>
<div class="outline-text-2" id="text-2">


</div>

<div id="outline-container-2-1" class="outline-3">
<h3 id="sec-2-1">Posts</h3>
<div class="outline-text-3" id="text-2-1">

<p><b>Posts</b> are created using the rake task <code>rake new_post["Post Title"]</code>. The key things about a post are:
</p><ol>
<li>File is located in =source/_posts.
</li>
<li>File has a header containing the meta-data for the post. The post URL and
   date are determined by the by the <code>title</code> and <code>date</code> fields. If you want to
   change the date of your post, then you change the meta-data. Changing the
   file name is useful only for file navigation. Here's a <a href="https://gist.github.com/justin808/5550381">gist for a rake task to update the file names to match the metadata</a>.
</li>
</ol>


</div>

</div>

<div id="outline-container-2-2" class="outline-3">
<h3 id="sec-2-2">Pages</h3>
<div class="outline-text-3" id="text-2-2">

<p><b>Pages</b> are created using the rake task <code>rake new_page["Page Title"]</code>. The key
things about a page are:
</p><ol>
<li>Files are located in =source/page-title
</li>
<li>File has a header containing the meta-data for the post. The post URL and
</li>
</ol>





</div>
</div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">POW</h2>
<div class="outline-text-2" id="text-3">

<p>POW allows you to point your browser to <a href="http://octopress.dev">http://octopress.dev</a> to see your local,
unpublished Octopress website. It's very convenient to not have to remember to
run a local server, and it works great with LiveReload. Scroll to the bottom of
this link for details on <a href="http://octopress.org/docs/blogging/">POW</a>. The alternative to running POW is to run <code>rake preview</code> and then point your browser at <code>http://0.0.0.0:4000</code> (or whatever port
you configured).
</p>
</div>

</div>




<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">LiveReload</h2>
<div class="outline-text-2" id="text-4">

<p>LiveReload is a <a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl=en">Chrome browser extension</a> that will automatically refresh
the browser after you publish your file. This works with or without POW.
</p><ul>
<li><a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-">Install the browser extension</a> for your type of browser.
</li>
<li>Add these two entries to your <code>Gemfile</code>, in the :development group:
</li>
</ul>


<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>   <span class="n">gem</span> <span class="s1">&#39;guard&#39;</span>
</span><span class='line'>   <span class="n">gem</span> <span class="s1">&#39;guard-livereload&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
<li>Create a file called <code>Guardfile</code> containing something like:
</li>
</ul>


<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>     <span class="n">guard</span> <span class="s1">&#39;livereload&#39;</span> <span class="k">do</span>
</span><span class='line'>       <span class="n">watch</span><span class="p">(</span><span class="sr">%r{public/generated}</span><span class="p">)</span>
</span><span class='line'>       <span class="n">watch</span><span class="p">(</span><span class="sr">%r{public/.+\.(css|js|html)}</span><span class="p">)</span>
</span><span class='line'>     <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<ul>
<li>Start 2 shell tabs running these commands: <code>rake generate &amp;&amp; rake watch</code>
   and <code>guard</code> 
</li>
</ul>


<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>     &gt; rake generate <span class="o">&amp;&amp;</span> rake watch
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>
   This screen shot shows <code>watch</code> updating the deployment files.
   <img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/rake-generate-watch.png">
   start guard LiveReload
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>     &gt; guard
</span></code></pre></td></tr></table></div></figure></notextile></div>
   This screen grab shows guard detecting the browser and telling the
   browser to update.
   <img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/guard-console.png">
</p>
<p>
It's neat to get LiveReload working with Octopress. However, the generation can
finish after your page does a reload, so you won't see your latest changes. I'll
update this blog post when I figure out a solution to that one. Until then, you
may find it more convenient to manually refresh the blog page yourself.
</p>
<p>
It's worth noting that if you're running any other instance of guard-
LiveReload, then one of these two copies will win and one won't work. If you
run a rails server this way, then this can bite you. It took me a bit of time
to figure out why guard wasn't working.
</p>
</div>

</div>




<div id="outline-container-5" class="outline-2">
<h2 id="sec-5">Org-Mode</h2>
<div class="outline-text-2" id="text-5">

<p>You can skip this section if you're not interested in org-mode. However, it's
super cool!
</p>
</div>

<div id="outline-container-5-1" class="outline-3">
<h3 id="sec-5-1">Why org-mode for blog publishing?</h3>
<div class="outline-text-3" id="text-5-1">

<p><a href="http://orgmode.org/">Org-mode</a> offers quite a bit more than plain markdown. It's quite the <b>hacker's delight</b> for note taking and authoring of blog articles. Down below I list a few
reasons why org-mode. Here's a few org-mode features I love (Some are Emacs
ones):
</p><ol>
<li>All headers and list items can be reordered with minimal keystrokes (think
   super powerful outliner).
</li>
<li>Numbered lists.
</li>
<li>Editable tables in text editor, with movable columns, movable rows.
</li>
<li>Ergonomics of insertion of URLs and images.
</li>
<li>Includes the basics of markdown, such as source code blocks and much more.
</li>
</ol>


</div>

</div>

<div id="outline-container-5-2" class="outline-3">
<h3 id="sec-5-2">Org-mode Integration</h3>
<div class="outline-text-3" id="text-5-2">

<p>I found a plugin that automates the process of converting an org-mode document
(<code>.org</code> file) in <code>source/org_posts</code> into a <code>.markdown</code> document in
<code>source/_posts</code>. Once the markdown document is saved in _posts, the <code>rake watch</code> task picks up the change and deploys the file, and LiveReload can then
automatically update your web browser. <b>Neat!</b>
</p>
<p>
Here are the basic steps:
</p><ol>
<li>Follow the instructions here: <a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">Introducing Octopress Blogging for Org-Mode</a>
</li>
<li>At the time of this article, April 27, there's a bug with the latest
   org-mode. <a href="https://github.com/craftkiller/orgmode-octopress/issues/3">I posted a workaround.</a> By the time you read this, you probably
   won't need that tip.
</li>
<li>You can embed Markdown (or other Octopress/Jekyll directives) by embedding
   inside of a <code>#+begin_html</code> and <code>#+end_html</code> block.
   <img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/quoting-markdown-in-org-mode.png">
</li>
<li><del>Images work fine.</del> Well, almost fine. The big gotcha is that the standard
   inclusion of images in org-mode results in broken paths at deployment. The
   workaround is to embed the <a href="http://octopress.org/docs/plugins/image-tag/">Octopress syntax for an image</a>, and to place the
   images under source/images. Note, you'll want to be sure to use an absolute
   path, or else your article might look OK on the home page, but might now work
   in the postings directory. If I'm creating a document with many images, I'll
   group the images for that document in a sub-directory of images named like
   the document. This is how it should look. The trick is to place the
   octopress <code>img</code> directive within a HTML begin/end block.

<p>
   <img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/org-mode-images.png">
</p></li>
<li>Links to other pages or posts require using something like this. The trick
   is that you have to specify <code>http:</code> and place the <code>html</code> file suffix type.
   Also note using one slash at the beginning for an absolute path.



<pre class="example">[[http:/about/some_details.html][Some Details]]  
</pre>

</li>
<li>Bold styling was a bit of mystery using the standard theme. I had to add
   this line to _typography.scss:
</li>
</ol>


<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'>   <span class="nt">b</span> <span class="p">{</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>


</div>
</div>

</div>




<div id="outline-container-6" class="outline-2">
<h2 id="sec-6">Useful Scripts</h2>
<div class="outline-text-2" id="text-6">

<ul>
<li>Just configure <code>OCTO_HOME</code>
</li>
<li>Emacs tip: Visit the created file by placing cursor over file name and then hit <code>Ctrl-x, f</code>. 
</li>
</ul>


<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">OCTO_HOME</span><span class="o">=</span>~/octopress
</span><span class='line'>ogen <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>; rake generate; <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>osave <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>; git commit -am <span class="s2">&quot;Updates&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span>; <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>odeploy <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>; osave; rake gen_deploy; <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this one is for orgmode only</span>
</span><span class='line'>opost<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>
</span><span class='line'>  <span class="nv">output</span><span class="o">=</span><span class="k">$(</span>rake new_post<span class="o">[</span><span class="s2">&quot;${1}&quot;</span><span class="o">]</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_file</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$output</span> | awk <span class="s1">&#39;{print $4}&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">base</span><span class="o">=</span><span class="k">$(</span>basename <span class="nv">$new_file</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_location</span><span class="o">=</span><span class="nv">$OCTO_HOME</span>/source/org_posts/
</span><span class='line'>  mv <span class="nv">$OCTO_HOME</span>/<span class="nv">$new_file</span> <span class="nv">$new_location</span>
</span><span class='line'>  <span class="nb">echo </span>created <span class="nv">$new_location</span>/<span class="nv">$base</span>
</span><span class='line'>  <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>opage<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>
</span><span class='line'>  rake new_page<span class="o">[</span><span class="s2">&quot;${1}&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

</div>

</div>




<div id="outline-container-7" class="outline-2">
<h2 id="sec-7">Deploying to Github: Directory Structure of Octopress and the master and source Git Branches</h2>
<div class="outline-text-2" id="text-7">

<p>Github offers free hosting of both the blog deployment and source. You're
looking at the deployment right now. You can find the source here at
<a href="https://github.com/justin808/justin808.github.io">my git repo justin808.github.io</a>. I doubt you could beat the price, performance, and
convenience. You can look inside of this repo, clone it, etc. and you have
everything that it took to make this blog.
</p>
<p>
I originally was quite confused by the concept of using two separate git
branches to make up what gets deployed on the live website versus the git
repository of my articles. Plus, there's the issue of Octopress git repository
that you clone when starting out. Eventually, I figured out that the two branches
simply contain different files, with one containing the original Octopress
files. Here's a few screen grabs that might clarify the situation for you.
</p>
<p>
Don't forget that you never push to the master branch, but rather the <code>rake deploy</code> task does it for you. Instead, you run <code>git push origin source</code> to push
the content of your blog to github.
</p>
<p>
The <code>octopress/public</code> directory corresponds to what you'll find on the github
site for your deployment (master branch).
</p>
<p>
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/public-dir-corresponds-master-branch.png">
</p>
<p>
The octopress/.gitignore file contains entries like <code>public</code>, which essentially
keeps the <code>rake generate</code> files out of the source branch.
</p>
<p>
Here's the github master branch right after creation. Note the correspondence
with <code>public</code>. This is what gets deployed as your blog.
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/github-master-branch.png">
</p>
<p>
Here's the github source branch. This contains the octopress environment, as
well as your customizations and blog posts.
<img src="/images/2013-04-27-octopress-setup-with-github-and-org-mode/github-source-branch.png">

</p></div>

</div>




<div id="outline-container-8" class="outline-2">
<h2 id="sec-8">Useful Links</h2>
<div class="outline-text-2" id="text-8">

<ol>
<li><a href="http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/">Getting Started with Octopress</a>: Nice overall tutorial. Very current!
   March 2013.
</li>
<li><a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages">Rob Dodson on Octopress</a>: Most of the instructions I show below are from this
   posting on April 30th, 2012.
</li>
<li><a href="http://joelmccracken.github.io/entries/octopress-is-pretty-sweet/">Joel McCracken on Octopress</a>: Use Jekyll? You Really Should Be Using Octopress 
</li>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Github directions on setting up a custom domain</a> 
</li>
<li><a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">dblock.org Article on Octopress</a>: A good explanation from Jan 17, 2012,
   especially on the difference of the source and master branches.
</li>
<li><a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">Introducing Octopress Blogging for Org-Mode</a>: For org-mode. See below.
</li>
<li><a href="http://hiltmon.com/blog/2013/04/17/18-months-of-octopress/">18 Months of Octopress</a>: Nice article on why Octopress was worth the switch.
</li>
<li><a href="http://odino.org/bash-aliases-for-octopress/">Shell Aliases for Octopress</a>: Save time with these shortcuts
</li>
</ol>



</div>

</div>




<div id="outline-container-9" class="outline-2">
<h2 id="sec-9">Parting words&hellip;</h2>
<div class="outline-text-2" id="text-9">

<p>Thanks in advance for any suggestions on this article. I hope you find it
helpful. Check me out on Twitter: <a href="http://twitter.com/railsonmaui">@RailsOnMaui</a>.
</p></div>
</div>

]]></content>
  </entry>
  
</feed>
