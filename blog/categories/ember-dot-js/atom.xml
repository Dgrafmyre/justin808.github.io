<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ember.js | Rails on Maui]]></title>
  <link href="http://www.railsonmaui.com//blog/categories/ember-dot-js/atom.xml" rel="self"/>
  <link href="http://www.railsonmaui.com//"/>
  <updated>2013-06-16T14:06:05-10:00</updated>
  <id>http://www.railsonmaui.com//</id>
  <author>
    <name><![CDATA[Justin Gordon]]></name>
    <email><![CDATA[justin.gordon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ember.js Hello World]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/05/26/ember-dot-js-hello-world/"/>
    <updated>2013-05-26T09:53:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/05/26/ember-dot-js-hello-world</id>
    <content type="html"><![CDATA[<p>
Ember.js is really amazing. The place to start is <a href="http://emberjs.com/guides/">Tom Dale's Intro Tutorial Video</a>
(on <a href="http://www.youtube.com/watch?feature=player_embedded&amp;v=Ga99hMi7wfY">Youtube</a>). In the 30 minute video you build the app shown here in this
iframe. Some of the features you'll learn include:
</p>


<ol>
<li>Basic setup for an Ember.js app.
</li>
<li>Nested views. You can click on the articles on the left, and see the
   articles on the right.
</li>
<li>Ember helpers which provide markdown and date conversion with a tiny bit of code.
</li>
<li>Even how to do a read/write REST interface. 
</li>
</ol>




<p>
If a picture is worth a thousand words, here's what you build in the video (you
can try in the iframe below or a <a href="http://www.railsonmaui.com/tutorials/ember-js-guides-railsonmaui/index.html">separate tab</a>). The dynamic mvc nature of the
bindings is neat. Try this:
</p>


<ol>
<li>Click on the article "Octopress" on the left.
</li>
<li>Click Edit, change the markdown in the 2nd field, and see it change below
      dynamically!
</li>
</ol>




<div><iframe src='http://www.railsonmaui.com//tutorials/ember-js-guides-railsonmaui/index.html' width='100%' height='600px'></iframe></div>




<p>
Then try out the "Ember Inspector for Chrome". Yehuda does a nice <a href="https://www.youtube.com/watch?v=18OSYuhk0Yo">demo of it on youtube</a> (more <a href="http://www.youtube.com/user/wycats/videos">here</a>). You can follow the <a href="http://www.kaspertidemann.com/how-to-try-out-the-ember-inspector-in-google-chrome/">installation instructions from Kasper Tidemann</a>.
Basically you want to install the chrome extension files from
<a href="https://github.com/tildeio/ember-extension">github.com/tildeio/ember-extension</a>.
</p>


<p>
Once you do that, you can browse to open the sample on <a href="http://www.railsonmaui.com/tutorials/ember-js-guides-railsonmaui/index.html">separate tab</a> and see
this:
</p>


<p>
<img src="/images/2013-05-26-ember-dot-js-hello-world/ember-inspector.png">
</p>


<p>
You can click on most of the purple text to dig into the ember objects:
<img src="/images/2013-05-26-ember-dot-js-hello-world/ember-inspector-2.png">
</p>


<p>
You can view <i>&lt;computed&gt;</i> values:
<img src="/images/2013-05-26-ember-dot-js-hello-world/ember-inspector-3.png">
</p>


<p>
To make it easier for you, I created git repos of the <a href="https://github.com/justin808/ember-js-guides-railsonmaui-start">start</a> and the <a href="https://github.com/justin808/ember-js-guides-railsonmaui-no-rest">finish</a>,
minus the REST interface. 
</p>


<p>
To maximize your learning efficiency: 
</p>


<ul>
<li>Start with the files in the <a href="https://github.com/justin808/ember-js-guides-railsonmaui-start">starter repo that I created</a>. The Ember.js files
  are still changing, so your combination of js files is critical. There's heaps
  of comments on the youtube video about how frustrating it can be to have the
  wrong combination of js files.
</li>
<li>Try building the app yourself by following the video. If you're short on time,
  watch the demo once and say "that's damn cool". But you won't truly absorb the
  content without following along. Plus, it's super cool to enter some
  statements in the console and see the magic of ember happen. (16:52 in the
  video).
</li>
<li>When you have an error in your code (which you will if you're practicing
  this), you need to know that you look for errors in the browser's console.
</li>
</ul>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started with Discourse]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/05/25/getting-started-with-discourse/"/>
    <updated>2013-05-25T13:24:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/05/25/getting-started-with-discourse</id>
    <content type="html"><![CDATA[<p>
Looking for a great open source example of a <i>production quality</i>
rails, emberjs, and single-page-application project? Check out <a href="https://github.com/discourse/discourse">Discourse</a>.
</p>


<blockquote>

<p>Discourse is the 100% open source, next-generation discussion platform built for the next decade of the Internet.
</p>
</blockquote>




<p>
Here's a great example of the Discourse code in action: <a href="http://meta.discourse.org/t/is-it-better-for-discourse-to-use-javascript-or-coffeescript/3153">Is it better for Discourse to use JavaScript or CoffeeScript?</a>
</p>




<!-- more -->




<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Production Quality, not a Tutorial</h2>
<div class="outline-text-2" id="text-1">

<p>Note, this is an example of a <i>production quality</i> application, rather than a
useful tutorial sample application. What's the difference? The Discourse
codebase is the real deal, including all the gory details, such as performance
optimizations. If you want a superb sample rails application, check out <a href="https://github.com/railstutorial/sample_app_2nd_ed">Rails Tutorial, 2nd Ediition</a> and read the book <a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">Ruby on Rails Tutorial, Learn Web Development with Rails, Michael Hartl</a>. There's even an interesting discussion on
the Discourse blog about <a href="http://blog.discourse.org/2013/04/discourse-as-your-first-rails-app/">Discourse as Your First Rails App</a>, which it shouldn't be.
</p>
<p>
That being said, the Discourse code base is probably as good as or, in many
cases, better than what you'll find in many software-as-a-service companies.
It's no secret that public scrutiny of popular open source code really raises
the bar on quality. Consequently, if you're a serious and experienced Rails
developer, it's worth your time to install the source of discourse and explore
and run it. I just did that and I'm impressed.
</p>
</div>

</div>




<div id="outline-container-2" class="outline-2">
<h2 id="sec-2">Why Explore Discourse's Source?</h2>
<div class="outline-text-2" id="text-2">

<ol>
<li>Example of EmberJs Single-Page-Application.
</li>
<li>Design decisions are discussed at <a href="http://meta.discourse.org/">meta.discourse.org</a>, such as <a href="http://meta.discourse.org/t/is-it-better-for-discourse-to-use-javascript-or-coffeescript/3153">Is it better for Discourse to use JavaScript or CoffeeScript?</a>
</li>
<li>Solid project, from code quality to organization.
</li>
<li>Co-Founded by Jeff Atwood, who created <a href="http://stackoverflow.com/">Stack Overflow</a>. Jeff wrote a article
   introducing the discourse project: <a href="http://www.codinghorror.com/blog/2013/02/civilized-discourse-construction-kit.html">Civilized Discourse Construction Kit</a>.
</li>
</ol>


</div>

</div>




<div id="outline-container-3" class="outline-2">
<h2 id="sec-3">Setup Tips</h2>
<div class="outline-text-2" id="text-3">

<p>Basically, there's a few dependencies to install, some of which you probably already
have installed, such as Postgres and Redis. The main gotcha I faced was to make
sure that you run the postgres instructions for <a href="https://github.com/discourse/discourse/blob/master/docs/DEVELOPMENT-OSX-NATIVE.md">creating the development database</a>, rather than using the rake task. Then you can install the seed data:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>psql -d discourse_development &lt; pg_dumps/development-image.sql
</span></code></pre></td></tr></table></div></figure></notextile></div>


The rake task to do <code>rake db:seed_fu</code> does not install the sample data, but
rather some tiny bit of "seed" data (like post action types).
</p>
<p>
Once you have the test data installed, then run these commands.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install <span class="c"># Yes, this DOES take a while. No, it&#39;s not really cloning all of rubygems :-)</span>
</span><span class='line'>rake db:migrate
</span><span class='line'>rake db:test:prepare
</span><span class='line'>rake db:seed_fu
</span><span class='line'>bundle <span class="nb">exec </span>rspec <span class="c"># All specs should pass</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

You should have installed <a href="http://mailcatcher.me/">MailCatcher</a>, so that you don't have to configure any
smtp server. Then you just have to visit <a href="http://localhost:1080">http://localhost:1080</a> to see the mail
messages that Discourse sends.
</p>
<p>
Then to run the Discourse application (assuming postgres and redis are running)
open up two tabs. Cd each to the disource directory. 
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>rails server
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>sidekiq
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle <span class="nb">exec </span>clockwork config/clock.rb
</span></code></pre></td></tr></table></div></figure></notextile></div>


Or, install foreman (<code>gem install foreman</code>) and run (runs the <code>Procfile</code>).
</p>


<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">PORT</span><span class="o">=</span>3000
</span><span class='line'><span class="nb">export </span><span class="nv">RAILS_ENV</span><span class="o">=</span>development
</span><span class='line'>foreman start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
If you got this working, you'll see this:
<img src="/images/2013-05-25-getting-started-wtih-discourse/discourse-installed.png">
</p>

</div>

</div>




<div id="outline-container-4" class="outline-2">
<h2 id="sec-4">Links</h2>
<div class="outline-text-2" id="text-4">

<ul>
<li><a href="https://github.com/discourse/discourse">Discourse on Github</a>
</li>
<li><a href="https://github.com/discourse/discourse/blob/master/docs/DEVELOPER-ADVANCED.md">Discourse Advanced Developer Guide</a>
</li>
<li><a href="https://github.com/discourse/discourse/blob/master/docs/DEVELOPMENT-OSX-NATIVE.md">Developing under OS X Without Vagrant</a> 
</li>
<li>Overview: <a href="http://www.discourse.org/">www.discourse.org</a>
</li>
<li>Discourse discussing itself: <a href="http://meta.discourse.org/">meta.discourse.org</a>
</li>
</ul>



















</div>
</div>

]]></content>
  </entry>
  
</feed>
