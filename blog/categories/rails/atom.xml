<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Rails on Maui]]></title>
  <link href="http://www.railsonmaui.com//blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://www.railsonmaui.com//"/>
  <updated>2014-03-07T10:08:53-10:00</updated>
  <id>http://www.railsonmaui.com//</id>
  <author>
    <name><![CDATA[Justin Gordon]]></name>
    <email><![CDATA[justin.gordon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple Form and Disabling Buttons on Submit by Default]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/02/23/simple-form-and-disable-processing-by-default/"/>
    <updated>2014-02-23T21:43:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/02/23/simple-form-and-disable-processing-by-default</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">TLDR</h2>
<div class="outline-text-2" id="text-1">
<p>
Here's an easy way to have all your SimpleForm submit buttons default to setting
<code>data-disable-with</code> so that you don't get errors when users double click on
submit buttons. If you've gotten a few <code>ActiveRecord::RecordNotUnique</code> errors
that were hard to reproduce, then here's your solution, with our without
SimpleForm. Additionally, using <code>data-disable-with</code> provides the user with nice
feedback once a button is clicked.
</p>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">ActiveRecord::RecordNotUnique Error!</h2>
<div class="outline-text-2" id="text-2">
<p>
If you're using Devise, and you get a <code>ActiveRecord::RecordNotUnique</code> error when
a new user is signing up, where do you look?
</p>

<pre class="example">
An ActiveRecord::RecordNotUnique occurred in registrations#create:

PG::UniqueViolation: ERROR: duplicate key value violates unique constraint
"index_users_on_email" DETAIL: Key (email)=(somebody@yahoo.com) already
exists. : INSERT INTO "users" ("address", "city", "confirmation_sent_at",
"confirmation_token", "created_at", "default_location_id", "email",
"encrypted_password", "first_name", "last_name", "mobile", "role", "state",
"updated_at", "zip_code") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,
$12, $13, $14, $15) RETURNING "id"
</pre>

<p>
At first, I was concerned that my unique index on my users table is not case
insensitive. I started going down the road of converting my normal unique index
on users.email to this index:
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">UNIQUE</span> <span class="k">INDEX</span> <span class="n">users_email_ci_idx</span> <span class="k">ON</span> <span class="n">users</span> <span class="p">((</span><span class="k">lower</span><span class="p">(</span><span class="n">email</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
However, I soon figured out that Devise was already always saving email in the
database in lower case via a <code>before_validation</code> hook.
</p>

<p>
So then I tried to double click the <code>SAVE</code> button, and, <b>BOOM</b>, I got the same error.
</p>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">data-disable-with='Processing&#x2026;'</h2>
<div class="outline-text-2" id="text-3">
<p>
A little bit of googling quickly revealed some handy rails techniques disabling
a submit button after being clicked, namely the setting of attribute
data-disable-with: "Some Message&#x2026;" on both links and buttons. This works
nicely to fix the double submit RecordNotUnique error, and it provides some
sweet user feedback upon clicking a button. Here's an example of a <code>SAVE</code> button.
</p>

<p>
<img src="/images/2014-02-23-simple-form-and-disable-processing-by-default/button-before-clicking.jpg">
</p>

<p>
Immediately after clicking the <code>SAVE</code> button, the button disables and the text changes.
</p>

<p>
<img src="/images/2014-02-23-simple-form-and-disable-processing-by-default/button-disabled.jpg">
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Buttons</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Example and API: <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-button_tag">button_tag</a>
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%= button_tag &quot;Checkout&quot;, data: { disable_with =&gt; &quot;Please wait...&quot; } %&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Links</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Example and API: <a href="http://apidock.com/rails/ActionView/Helpers/UrlHelper/link_to?q=link_to">link_to</a>
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%= link_to &quot;Profile&quot;, profile_path(@profile), data: { disable_with: &quot;Processsing...&quot; } %&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">SimpleForm Submit Buttons</h3>
<div class="outline-text-3" id="text-3-3">
<p>
Even better, this can be done in one place for all SimpleForm submit buttons!
</p>

<p>
In a file like <code>config/simple_form.rb</code>, place this initialization code:
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">SimpleForm</span><span class="p">:</span><span class="ss">:FormBuilder</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">submit_with_override</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="n">data_disable_with</span> <span class="o">=</span> <span class="p">{</span> <span class="n">disable_with</span><span class="p">:</span> <span class="s1">&#39;Processing...&#39;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:data</span><span class="o">]</span> <span class="o">=</span> <span class="n">data_disable_with</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:data</span><span class="o">]</span> <span class="o">||</span> <span class="p">{})</span>
</span><span class='line'>    <span class="n">submit_without_override</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">alias_method_chain</span> <span class="ss">:submit</span><span class="p">,</span> <span class="ss">:override</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
What the bit of code above does is that it:
</p>
<ol class="org-ol">
<li>Opens up the FormBuilder class to add a method <code>submit_with_override</code>.
</li>
<li>Modifies options hash's :data element, setting a default value for key
<code>disable_with</code> that will not apply if there's already a value there, thus
allowing the default to be overridden by any individual button.
</li>
<li>Calls <a href="http://apidock.com/rails/Module/alias_method_chain">alias_method_chain</a> which makes is so that a call to submit actually
calls <code>submit_with_override</code> and that method can call
<code>submit_without_override</code>, which is the original <code>submit</code> method. The pattern
of naming the methods <code>with_override</code> and <code>without_override</code> is part of the
<code>alias_method_chain</code> call. Pretty darn cool!
</li>
</ol>

<p>
Here's a sample sign-up form that overrides the default "Processing&#x2026;" label
when the <code>SAVE</code> button is clicked.
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.box.clearfix.box-last</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">simple_form_for</span> <span class="n">resource</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="n">resource_name</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="n">registration_path</span><span class="p">(</span><span class="n">resource_name</span><span class="p">),</span> <span class="ss">html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">}</span>  <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">error_notification</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">autofocus</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">label_html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;label-required&quot;</span><span class="p">},</span> <span class="n">input_html</span><span class="p">:</span> <span class="p">{</span><span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;.col-md-4&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="n">label_html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;label-required&quot;</span><span class="p">},</span> <span class="n">input_html</span><span class="p">:</span> <span class="p">{</span><span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;.col-md-4&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="n">label_html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;label-required&quot;</span><span class="p">},</span> <span class="n">input_html</span><span class="p">:</span> <span class="p">{</span><span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;.col-md-4&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">button</span> <span class="ss">:submit</span><span class="p">,</span> <span class="s2">&quot;SAVE&quot;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="n">disable_with</span><span class="p">:</span> <span class="s2">&quot;Creating New Account...&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
Now go and click on some of your submit buttons, and they will all disable and
display "Processing&#x2026;". On a remote form that returned <code>js.erb</code>, I had to send
back this line to reset the submit button:
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#js-some-button&quot;</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="s1">&#39;ORIGINAL BUTTON TEXT&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">References</h2>
<div class="outline-text-2" id="text-4">
<p>
Stack Overflow Discussions:
</p>
<ol class="org-ol">
<li><a href="http://stackoverflow.com/questions/11505801/prevent-double-submits-in-a-rails-ajax-form/20161880">Prevent Double Clicks in Rails Ajax Form</a>
</li>
<li><a href="http://stackoverflow.com/questions/11340843/default-disable-with-for-simple-form-submit/11610795#11610795">Default Disable With for Simple Form</a>
</li>
<li><a href="http://stackoverflow.com/questions/3160204/in-rails-controllers-how-to-prevent-double-submit-when-user-double-clic-submit">How to Prevent Double Submit in Rails</a>
</li>
</ol>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating from Capybara-Webkit to Poltergeist-PhantomJs]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/08/06/migrating-from-capybara-webkit-to-poltergeist-phantomjs/"/>
    <updated>2013-08-06T21:38:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/08/06/migrating-from-capybara-webkit-to-poltergeist-phantomjs</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Motivation</h2>
<div class="outline-text-2" id="text-1">
<p>
Today I migrated a medium size test suite from <a href="https://github.com/thoughtbot/capybara-webkit">capybara-webkit</a> to <a href="https://github.com/jonleighton/poltergeist">Poltergeist</a>
with <a href="http://phantomjs.org/index.html">PhantomJS</a>. I had two main motivations for switching:
</p>
<ol class="org-ol">
<li>PhantomJS is more sensitive to avoiding false positives. For example, in the
past, one could click on non-visible DOM elements with capybara-webkit.
While this may not currently be true with the latest Capybara, I've had good
luck with PhantomJS in the past.
</li>
<li>Speed. When I last checked, PhantomJS was faster. Speed is critical for slow
feature tests.
</li>
</ol>

<p>
Here's one reason that Poltergeist is more accurate and <a href="https://github.com/jonleighton/poltergeist">sensitive to failure</a>: 
</p>

<blockquote>
<p>
When Poltergeist clicks on an element, rather than generating a DOM click event,
it actually generates a "proper" click. This is much closer to what happens when
a real user clicks on the page - but it means that Poltergeist must scroll the
page to where the element is, and work out the correct co-ordinates to click. If
the element is covered up by another element, the click will fail (this is a
good thing - because your user won't be able to click a covered up element
either).
</p>
</blockquote>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Tips for Migrating</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Upgrade Gems First</h3>
<div class="outline-text-3" id="text-2-1">
<p>
At first, I lost time due to timing issues where I was clicking on elements of a
hidden dialog that was not finished showing. Capybara-webkit was not bothered by
the fact that the dialog was actually hidden and being loaded. PhantomJS bombed
out. However, after I worked around the issue, I realized that my gems were
outdated. Since you're going to be fixing a bunch of tests anyway, it makes
sense to get on the latest versions of the testing gems. The gems you want to
upgrade are: rspec, rspec-rails, Capybara, and poltergeist. 
</p>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Visible Option</h3>
<div class="outline-text-3" id="text-2-2">
<p>
After upgrading the gems, my workarounds were no longer necessary. However, the
change from Capybara 2.0 to 2.1 had a big change in the way that it handles
finding dom elements that are <b>not visible</b>. Previously, Capybara would not care
if the dom element was hidden. For my tests, this resulted in breaking any tests
that queried any non-visible DOM elements, such as scripts, meta tags, and
links.
</p>

<p>
The key thing to be aware of is that you might get this obscure error message,
and the fix is to add the <code>visible: false</code> optional parameter so that Capybara
is not filtering by <code>visible: true</code>. The <code>visible</code> parameter is available to
most finder methods in Capybara.
</p>

<p>
The obscure error you might see is something like this:
</p>
<pre class="example">
#=&gt; Capybara::ExpectationNotMet Exception: expected to find xpath "//title" with text "Title Text." but there were no matches. Also found "", which matched the selector but not all filters.
</pre>

<p>
The reason is the title element is not visible, and "visible" is the "not all
filters" part of the error message.
</p>
</div>
</div>
<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">Debugging Capybara Tests</h3>
<div class="outline-text-3" id="text-2-3">
<p>
The main reasons that previously passing feature tests will fail when migrating
to Poltergeist is due to timing and visibility. The two main techniques for
debugging Capybara tests are:
</p>
<ol class="org-ol">
<li>Using screen shots (<code>render_page</code> below)
</li>
<li>Using HTML dumps (=page! below)
</li>
</ol>

<p>
Keep in mind that these methods will not wait for elements to load. Thus, you
should either have a Capybara statement that will wait for some DOM element to
load or you might want to put in a <code>sleep 10</code> to sleep for 10 seconds before
capturing the screen shot or dumping the HTML.
</p>

<p>
If you use the helper methods specified below, and you should be able to work
through why Poltergeist is not doing what you think it should be doing. So far,
I haven't yet run into a case where I have not found out that it's been my fault
rather than a bug in Poltergeist that's caused a failure due to the migration.
In many cases, you'll be somewhat pleasantly surprised that you'll be fixing a
false positive.
</p>
</div>
</div>
<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">Capybara's Wait Strategy</h3>
<div class="outline-text-3" id="text-2-4">
<p>
Be sure to carefully read the <a href="https://github.com/jnicklas/capybara">Capybara documentation</a>, especially the part
titled "Asynchronous JavaScript". That section explains how Capybara cleverly
will wait until the page or ajax call finished so that the element expected
appears. There's a configurable timeout (<code>Capybara.default_wait_time</code>) for
changing the default wait time before a test bombs out.
</p>
</div>
</div>
<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5">Xpath Tip</h3>
<div class="outline-text-3" id="text-2-5">
<p>
Be sure to understand the difference between <code>//something</code> and <code>.//something</code>.
The later can be used inside a <code>within</code> block. The former will find the tag
anywhere on the page, even when used inside of a <code>within</code> block!
</p>
</div>
</div>
<div id="outline-container-sec-2-6" class="outline-3">
<h3 id="sec-2-6">Setup and Utility Debugging Methods</h3>
<div class="outline-text-3" id="text-2-6">
<p>
Here's the setup and a couple utility methods that I use. Put these in a file in your helpers
directory, such spec/helpers/capybara.rb.
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_wait_time</span> <span class="o">=</span> <span class="mi">8</span> <span class="c1"># Seconds to wait before timeout error. Default is 2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Register slightly larger than default window size...</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">register_driver</span> <span class="ss">:poltergeist</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="ss">Capybara</span><span class="p">:</span><span class="ss">:Poltergeist</span><span class="o">::</span><span class="no">Driver</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="p">{</span> <span class="ss">debug</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="c1"># change this to true to troubleshoot</span>
</span><span class='line'>                                           <span class="n">window_size</span><span class="p">:</span> <span class="o">[</span><span class="mi">1300</span><span class="p">,</span> <span class="mi">1000</span><span class="o">]</span> <span class="c1"># this can affect dynamic layout</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:poltergeist</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Saves page to place specfied at name inside of</span>
</span><span class='line'><span class="c1"># test.rb definition of:</span>
</span><span class='line'><span class="c1">#   config.integration_test_render_dir = Rails.root.join(&quot;spec&quot;, &quot;render&quot;)</span>
</span><span class='line'><span class="c1"># NOTE: you must pass &quot;js:&quot; for the scenario definition (or else you&#39;ll see that render doesn&#39;t exist!)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">render_page</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">png_name</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\W+/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">integration_test_render_dir</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">png_name</span><span class="si">}</span><span class="s2">.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># shortcut for typing save_and_open_page</span>
</span><span class='line'><span class="k">def</span> <span class="nf">page!</span>
</span><span class='line'>  <span class="n">save_and_open_page</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember.js Tutorial with Rails 4]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/06/11/emberjs-rails4-tutorial/"/>
    <updated>2013-06-11T13:00:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/06/11/emberjs-rails4-tutorial</id>
    <content type="html"><![CDATA[<p>
The first post in this series, <a href="http://www.railsonmaui.com/blog/2013/05/26/ember-dot-js-hello-world/">Ember.js Hello World</a>, shows Ember working
without a persistence backend. This post covers setting up Rails4 as the
persistence engine behind that example, plus adding and deleting records. The
amount of Ember and Rails code to make this example is almost completely
included in this article. It's that tiny!
</p>




<p>
The source code for the completed example can be found on GitHub:
<a href="https://github.com/justin808/ember-js-guides-railsonmaui-rails4">justin808/ember-js-guides-railsonmaui-rails4</a>. I carefully crafted the commits
to explain the steps.
</p>




<p>
You can try out the application on Heroku at:
<a href="http://railsonmaui-emberjs-rails4.herokuapp.com/">http://railsonmaui-emberjs-rails4.herokuapp.com/</a>
</p>




<p>
I put many more details in this <a href="http://youtu.be/ac1mYhCMRNc">comprehensive screencast</a> of how to go from a
brand new Rails 4 app to an Ember.js app deployed on Heroku.
</p>




<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ac1mYhCMRNc "></iframe></div>
</p>




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Key Tips</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>Be sure to update the <code>ember</code> and <code>ember-data</code> javascript files with the
command from the ember-rails gem (see below). Keeping these files at
appropriate versions is key while the API is changing, especially for
ember-data.
</li>
<li>If you specify the Router property for both <code>model</code> and <code>setupController</code>,
you can have some very confusing results (details below).
</li>
<li>Get comfortable with Ember's naming conventions. Ember does a ton with
default naming. It's basically got the same philosophy of "Convention over
Configuration" of Rails. So it's especially important to try to grok when the
Ember examples are doing something implicitly versus explicitly. This is a
bit like Rails. At first it seems like magic, like "How the heck is that
happening", and then one gets accustomed to the naming conventions and
appreciates how much code it saves.
</li>
<li>Be mindful that some Ember.js commands run asynchronously, such as commit.
</li>
</ol>

<!-- more -->
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Building the Hello World without Persistence</h2>
<div class="outline-text-2" id="text-2">
<p>
The steps for this can be found in the git history up to tag <code>no-persistence</code>.
Thanks to a few gems, the process is relatively simple.
</p>
</div>
<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Basic Setup</h3>
<div class="outline-text-3" id="text-2-1">
<p>
I started off with the instructions here <a href="http://blog.dcxn.com/2013/03/23/getting-started-with-ember-js-on-rails/">The No Nonsense Guide to Ember.js on
Rails</a>. This article covers the basic setup, such as gems to include. You want to
pay special attention to the <a href="https://github.com/emberjs/ember-rails">README for ember-rails</a>. Depending on the current
state of the ember-rails gem, you may get the deprecation warning (browser
console) with the old ember-data.js.
</p>

<pre class="example">
DEPRECATION: register("store", "main") is now deprecated in-favour of register("store:main");
        at Object.Container.register (http://0.0.0.0:3000/assets/ember.js?body=1:7296:17)
        at Application.initializer.initialize (http://0.0.0.0:3000/assets/ember-data.js?body=1:5069:19)
        at http://0.0.0.0:3000/assets/ember.js?body=1:27903:7
        at visit (http://0.0.0.0:3000/assets/ember.js?body=1:27041:3)
        at DAG.topsort (http://0.0.0.0:3000/assets/ember.js?body=1:27095:7)
        at Ember.Application.Ember.Namespace.extend.runInitializers (http://0.0.0.0:3000/assets/ember.js?body=1:27900:11)
        at Ember.Application.Ember.Namespace.extend._initialize (http://0.0.0.0:3000/assets/ember.js?body=1:27784:10)
        at Object.Backburner.run (http://0.0.0.0:3000/assets/ember.js?body=1:4612:26)
        at Object.Ember.run (http://0.0.0.0:3000/assets/ember.js?body=1:5074:26)
</pre>

<p>
Originally, I included a separate version of ember-data in the git repository.
Instead, I should have updated the versions of ember and ember-data with this
command from the <a href="https://github.com/emberjs/ember-rails">ember-rails README</a>:
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate ember:install --head
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>
This command puts the ember files in <code>vendor/assets/ember</code>. Pretty sweet. This
is way better than manually installing the js files.
</p>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Get the no-database fixture example of Ember.js working.</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Next, I migrated the non-rails static example presented in <a href="http://www.railsonmaui.com/blog/2013/05/26/ember-dot-js-hello-world/">Ember.js Hello World</a>
to the rails framework. You can checkout the tag <code>no-persistence</code> and get the
code to where the static fixture is used and there is no persistence. Scroll to
the bottom to see this code, as well as some additional code added for persistence.
</p>
</div>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Building the Hello World with Persistence</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Create the Model for Blog Posts</h3>
<div class="outline-text-3" id="text-3-1">
<p>
You can checkout the git tag <code>persistence-emberjs</code> to get the git repository to
the state that persistence works.
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails generate model Post title:string author:string published_at:date intro:text extended:text
</span><span class='line'><span class="nv">$ </span>rake db:migrate
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
Since Rails comes pre-configured with sqllite3 by default, no database
configuration is required.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Add the Controller and Serializer</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Note that in Rails 4, you need to use the form for "strong parameters". See the
definition of <code>post_params</code> below.
</p>
</div>
<div id="outline-container-sec-3-2-1" class="outline-4">
<h4 id="sec-3-2-1">app/models/post.rb</h4>
<div class="outline-text-4" id="text-3-2-1">
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:published_at</span><span class="p">,</span> <span class="ss">:author</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
<div id="outline-container-sec-3-2-2" class="outline-4">
<h4 id="sec-3-2-2">app/serializers/post_serializer.rb</h4>
<div class="outline-text-4" id="text-3-2-2">
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:published_at</span><span class="p">,</span> <span class="ss">:intro</span><span class="p">,</span> <span class="ss">:extended</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
<div id="outline-container-sec-3-2-3" class="outline-4">
<h4 id="sec-3-2-3">app/controllers/posts_controller.rb</h4>
<div class="outline-text-4" id="text-3-2-3">
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span> <span class="c1"># default to Active Model Serializers</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">,</span> <span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">destroy</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:intro</span><span class="p">,</span> <span class="ss">:extended</span><span class="p">,</span> <span class="ss">:published_at</span><span class="p">,</span> <span class="ss">:author</span><span class="p">)</span> <span class="c1"># only allow these for now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">Adding "Add" and "Remove" Buttons</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>To create a new post, <b>use a link, not a button</b>, because we want to change the URL.
</li>
<li>Don't define both <code>model</code> and <code>setupController</code> on the Route!
If you do, you'll get this error:
<pre class="example">
Uncaught Error: assertion failed: Cannot delegate set('title', a) to the 'content' property of object proxy &lt;App.PostsNewController:ember392&gt;: its 'content' is undefined.
</pre>
<p>
I originally had code like this and it took me some time to figure out that
the <code>model</code> part was not used. 
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.PostsNewRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="nv">publishedAt: </span><span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="nv">author: </span><span class="s">&quot;current user&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">setupController: </span><span class="nf">(controller) -&gt;</span>
</span><span class='line'>    <span class="c1"># controller.set(&#39;content&#39;, App.Post.createRecord(publishedAt: new Date(), author: &quot;current user&quot;))</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4">Update the URL on New with transitionAfterSave Hook</h3>
<div class="outline-text-3" id="text-3-4">
<p>
You can't update the URL after a new record is saved directly in the event
handler, as the commit will run asynchronously, and until the return value,
there is no record id, and you would end up using record id <code>null</code> in the URL.
Here's how to handle this situation. Not that the <code>save</code> does the commit, but
the <code>transitionToRoute</code> is not called until the <code>transitionAfterSave</code> hook is
run.
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">App</span><span class="o">.</span><span class="n">PostsNewController</span> <span class="o">=</span> <span class="no">Ember</span><span class="o">.</span><span class="n">ObjectController</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">save</span><span class="p">:</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="vi">@get</span><span class="p">(</span><span class="s1">&#39;store&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">transitionAfterSave</span><span class="p">:</span> <span class="p">(</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1"># when creating new records, it&#39;s necessary to wait for the record to be assigned</span>
</span><span class='line'>    <span class="c1"># an id before we can transition to its route (which depends on its id)</span>
</span><span class='line'>    <span class="vi">@transitionToRoute</span><span class="p">(</span><span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="vi">@get</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">))</span> <span class="k">if</span> <span class="vi">@get</span><span class="p">(</span><span class="s1">&#39;content.id&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span><span class="o">.</span><span class="n">observes</span><span class="p">(</span><span class="s1">&#39;content.id&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5">Don't put the new record, unsaved post in the list of saved posts</h3>
<div class="outline-text-3" id="text-3-5">
<p>
There's a slight bug in the adding of new records. If you click on the unsaved
post link on the left, the URL will have "null" as the new post does not yet
have an ID.
</p>

<p>
Here's the <a href="https://github.com/justin808/ember-js-guides-railsonmaui-rails4/commit/8c58b6fac8b978f622bf772654258479ba22bae0">commit at github</a>, and the commit description:
</p>
<blockquote>
<p>
See discussion at
<a href="http://stackoverflow.com/questions/14705124/creating-a-record-with-ember-js-ember-data-rails-and-handling-list-of-record">http://stackoverflow.com/questions/14705124/creating-a-record-with-ember-js-ember-data-rails-and-handling-list-of-record</a>
Note the change from iterating over "each model" to iterating over "each post in
filteredContent" in index.html.erb. That change requires attributes be
referenced by "post", and the updated linkTo takes the route, "post", as well as
the "dynamic segment" which is also named "post", per the above #each post.
(refer to <a href="http://emberjs.com/guides/templates/links/">http://emberjs.com/guides/templates/links/</a>). Note the addition of the
PostsController. Previously, it was implicitly defined. It listens to property
"arrangedContent.@each" so that when the new post saves, the filteredContent
property updates and notifies the view template using this property in
index.html.erb. Without the listener on this property, the view of all posts
would not update.
</p>
</blockquote>

<p>
This is a really important change that is well documented in the commit as well
as the <a href="http://youtu.be/ac1mYhCMRNc?t=36m20s">tutorial screencast at 36:20</a>.
</p>
</div>
</div>
</div>




<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Heroku Deployment</h2>
<div class="outline-text-2" id="text-4">
<p>
Heroku has listed many tips at <a href="https://devcenter.heroku.com/articles/rails4">Getting Started with Rails 4.x on Heroku</a>. And you
can look at the commits leading up to tag <code>heroku</code>. The basic steps are:
</p>
<ol class="org-ol">
<li>Change a few gems
</li>
<li>Switch from sqllite to postgres.
</li>
<li>Add a ProcFile to use Puma for the webserver.
</li>
<li>Be sure that production.rb contains:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">ember</span><span class="o">.</span><span class="n">variant</span> <span class="o">=</span> <span class="ss">:production</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>
If you don't, you'll see this error:
</p>
<pre class="example">
RAILS_ENV=production bin/rake assets:precompile
rake aborted!
couldn't find file 'handlebars'
  (in /Users/justin/j/emberjs/ember-js-guides-railsonmaui-rails4/app/app/assets/javascripts/application.js:18)
</pre>
</li>
</ol>
</div>
</div>




<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Examples that Inspired this Tutorial</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">RailsCasts</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li>The two RailsCasts episodes complement the <a href="http://www.youtube.com/watch?v=Ga99hMi7wfY">first tutorial by Tom Dale</a> by
showing how to add persistence via the <code>rails-ember</code> gem. The serializers
episode is also useful.
<ul class="org-ul">
<li><a href="http://railscasts.com/episodes/408-ember-part-1">#408 Ember Part 1</a> (pro)
</li>
<li><a href="http://railscasts.com/episodes/410-ember-part-2">#410 Ember Part 2</a> (pro)
</li>
<li><a href="http://railscasts.com/episodes/409-active-model-serializers?view=comments">#409 Active Model Serializers</a>
</li>
</ul>
</li>
<li>Tip: Using Chrome to watch the videos: I found that the left/right arrow and
space bar keys are amazing for pausing and rewinding the RailsCasts so that I
could get all the nuances of the Ember naming schemes.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">ember_data_example</h3>
<div class="outline-text-3" id="text-5-2">
<ul class="org-ul">
<li><a href="https://github.com/dgeb/ember_data_example">ember_data_example</a> on GitHub is a nice full featured ember app with a parent
child relationship of contacts and phone numbers. It even has some examples
of using <a href="https://github.com/jfirebaugh/konacha">Konacha for testing Ember JavaScript code</a>.
</li>
</ul>
</div>
</div>
</div>


<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Source Code for Views and JavaScript</h2>
<div class="outline-text-2" id="text-6">
<p>
I purposefully kept these to just 2 files to make this example simple. In a
real world application, this would be broken into many files.
</p>
</div>
<div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1">View Code: app/viws/static/index.html.erb</h3>
<div class="outline-text-3" id="text-6-1">
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;navbar&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;navbar-inner&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">a</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;brand&quot;</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span><span class="o">&gt;</span><span class="nx">Bloggr</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">ul</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;nav&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{{</span><span class="err">#</span><span class="nx">linkTo</span> <span class="s1">&#39;posts&#39;</span><span class="p">}}</span><span class="nx">Posts</span><span class="p">{{</span><span class="err">/linkTo}}&lt;/li&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{{</span><span class="err">#</span><span class="nx">linkTo</span> <span class="s1">&#39;about&#39;</span><span class="p">}}</span><span class="nx">About</span><span class="p">{{</span><span class="err">/linkTo}}&lt;/li&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">outlet</span><span class="p">}}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;about&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;about&#39;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Justin</span> <span class="nx">Gordon</span> <span class="nx">wrote</span> <span class="k">this</span><span class="o">:</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//www.railsonmaui.com&lt;/p&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Git</span> <span class="nx">Repository</span><span class="o">:</span> <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;posts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;container-fluid&#39;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;row-fluid&#39;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;span3&#39;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">table</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;table&#39;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Recent</span> <span class="nx">Posts</span>
</span><span class='line'>              <span class="p">{{</span><span class="err">#</span><span class="nx">linkTo</span> <span class="s2">&quot;posts.new&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span><span class="p">}}</span><span class="nx">Add</span> <span class="nx">Post</span><span class="p">{{</span><span class="err">/linkTo}}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/thead&gt;</span>
</span><span class='line'>          <span class="p">{{</span><span class="err">#</span><span class="nx">each</span> <span class="nx">post</span> <span class="k">in</span> <span class="nx">filteredContent</span><span class="p">}}</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="p">{{</span><span class="err">#</span><span class="nx">linkTo</span> <span class="nx">post</span> <span class="nx">post</span><span class="p">}}{{</span><span class="nx">post</span><span class="p">.</span><span class="nx">title</span><span class="p">}}</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">small</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;muted&#39;</span><span class="o">&gt;</span><span class="nx">by</span> <span class="p">{{</span><span class="nx">post</span><span class="p">.</span><span class="nx">author</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/small&gt;</span>
</span><span class='line'>              <span class="p">{{</span><span class="err">/linkTo}}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>          <span class="p">{{</span><span class="err">/each}}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/table&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;span9&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{{</span><span class="nx">outlet</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;posts/index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;text-warning&quot;</span><span class="o">&gt;</span><span class="nx">Please</span> <span class="nx">select</span> <span class="nx">a</span> <span class="nx">post</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;posts/new&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">legend</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="nx">Post</span><span class="o">&lt;</span><span class="err">/legend&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">partial</span> <span class="s1">&#39;post/edit&#39;</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="s1">&#39;save&#39;</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Create</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="nx">cancel</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Cancel</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">partial</span> <span class="s1">&#39;post/view&#39;</span><span class="p">}}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">#</span><span class="k">if</span> <span class="nx">isEditing</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">partial</span> <span class="s1">&#39;post/edit&#39;</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="s1">&#39;doneEditing&#39;</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Done</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="k">else</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="s1">&#39;edit&#39;</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Edit</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="s1">&#39;delete&#39;</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Delete</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">/if}}</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">partial</span> <span class="s1">&#39;post/view&#39;</span><span class="p">}}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;post/_view&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">title</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h4</span><span class="o">&gt;</span><span class="nx">by</span> <span class="p">{{</span><span class="nx">author</span><span class="p">}}</span> <span class="o">&lt;</span><span class="nx">small</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;muted&quot;</span><span class="o">&gt;</span><span class="p">({{</span><span class="nx">date</span> <span class="nx">publishedAt</span><span class="p">}})</span><span class="o">&lt;</span><span class="err">/small&gt;&lt;/h4&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">hr</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;intro&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="nx">markdown</span> <span class="nx">intro</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;below-the-fold&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="nx">markdown</span> <span class="nx">extended</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;post/_edit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">view</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">TextField</span> <span class="nx">valueBinding</span><span class="o">=</span><span class="s1">&#39;title&#39;</span> <span class="nx">cols</span><span class="o">=</span><span class="s2">&quot;30&quot;</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">view</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">TextArea</span> <span class="nx">valueBinding</span><span class="o">=</span><span class="s1">&#39;intro&#39;</span> <span class="nx">cols</span><span class="o">=</span><span class="s2">&quot;50&quot;</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">view</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">TextArea</span> <span class="nx">valueBinding</span><span class="o">=</span><span class="s1">&#39;extended&#39;</span> <span class="nx">cols</span><span class="o">=</span><span class="s2">&quot;80&quot;</span> <span class="nx">rows</span><span class="o">=</span><span class="s2">&quot;10&quot;</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2">CoffeeScript: app/assets/javascripts/app.js.coffee.</h3>
<div class="outline-text-3" id="text-6-2">
<p>
Here's the entire set of CoffeeScript to build this application. As you can see,
it's not much! I intentionally left this in one file to make the example a bit
simpler. A real application would break this out into separate files.
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.Store = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">Store</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">revision: </span><span class="mi">12</span>
</span><span class='line'>  <span class="nv">adapter: </span><span class="s">&quot;DS.RESTAdapter&quot;</span> <span class="c1"># &quot;DS.FixtureAdapter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.Post = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">title: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">author: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">intro: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">extended: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">publishedAt: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;date&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.PostsRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span><span class="p">()</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># See Discussion at http://stackoverflow.com/questions/14705124/creating-a-record-with-ember-js-ember-data-rails-and-handling-list-of-record</span>
</span><span class='line'><span class="nv">App.PostsController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">sortProperties: </span><span class="p">[</span> <span class="s">&quot;id&quot;</span> <span class="p">]</span>
</span><span class='line'>  <span class="nv">sortAscending: </span><span class="kc">false</span>
</span><span class='line'>  <span class="nv">filteredContent: </span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">content = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&quot;arrangedContent&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">content</span><span class="p">.</span><span class="nx">filter</span> <span class="nf">(item, index) -&gt;</span>
</span><span class='line'>      <span class="o">not</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;isNew&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">property</span><span class="p">(</span><span class="s">&quot;arrangedContent.@each&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.PostsNewRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="nv">publishedAt: </span><span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="nv">author: </span><span class="s">&quot;current user&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.PostsNewController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">save: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;store&#39;</span><span class="p">).</span><span class="nx">commit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">cancel: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;content&#39;</span><span class="p">).</span><span class="nx">deleteRecord</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;store&#39;</span><span class="p">).</span><span class="nx">transaction</span><span class="p">().</span><span class="nx">rollback</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@transitionToRoute</span><span class="p">(</span><span class="s">&#39;posts&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">transitionAfterSave: </span><span class="p">(</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1"># when creating new records, it&#39;s necessary to wait for the record to be assigned</span>
</span><span class='line'>    <span class="c1"># an id before we can transition to its route (which depends on its id)</span>
</span><span class='line'>    <span class="nx">@transitionToRoute</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;content&#39;</span><span class="p">))</span> <span class="k">if</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;content.id&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">observes</span><span class="p">(</span><span class="s">&#39;content.id&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.PostController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">isEditing: </span><span class="kc">false</span>
</span><span class='line'>  <span class="nv">edit: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&quot;isEditing&quot;</span><span class="p">,</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">delete</span><span class="o">:</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s">&quot;Are you sure you want to delete this post?&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;content&#39;</span><span class="p">).</span><span class="nx">deleteRecord</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;store&#39;</span><span class="p">).</span><span class="nx">commit</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">@transitionToRoute</span><span class="p">(</span><span class="s">&#39;posts&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">doneEditing: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&quot;isEditing&quot;</span><span class="p">,</span> <span class="kc">false</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;store&#39;</span><span class="p">).</span><span class="nx">commit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="nv">App.IndexRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nv">redirect: </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@transitionTo</span> <span class="s">&quot;posts&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerBoundHelper</span> <span class="s">&quot;date&quot;</span><span class="p">,</span> <span class="nf">(date) -&gt;</span>
</span><span class='line'>  <span class="nx">moment</span><span class="p">(</span><span class="nx">date</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">showdown = </span><span class="k">new</span> <span class="nx">Showdown</span><span class="p">.</span><span class="nx">converter</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerBoundHelper</span> <span class="s">&quot;markdown&quot;</span><span class="p">,</span> <span class="nf">(input) -&gt;</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">SafeString</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">showdown</span><span class="p">.</span><span class="nx">makeHtml</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span> <span class="k">if</span> <span class="nx">input</span> <span class="c1"># need to check if input is defined and not null</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@resource</span> <span class="s">&quot;about&quot;</span>
</span><span class='line'>  <span class="nx">@resource</span> <span class="s">&quot;posts&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@resource</span> <span class="s">&quot;post&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">path: </span><span class="s">&quot;:post_id&quot;</span>
</span><span class='line'>    <span class="nx">@route</span> <span class="s">&quot;new&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">Conclusion</h2>
<div class="outline-text-2" id="text-7">
<p>
Ember does quite a lot with just a few lines of code. Definitely check out the
source code for the completed example github:
<a href="https://github.com/justin808/ember-js-guides-railsonmaui-rails4">justin808/ember-js-guides-railsonmaui-rails4</a>. Please take a look at the
screencast, as I put many details beyond this article.
</p>

<p>
I welcome comments and suggestions.
</p>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Error Handling]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/05/11/testing-error-handling/"/>
    <updated>2013-05-11T00:01:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/05/11/testing-error-handling</id>
    <content type="html"><![CDATA[<p>
How do ensure that your application properly handles errors, especially when
relying on third parties, such as payment processors? Is it easy to verify that
the right things happen when the wrong things happen? Last week's article
<a href="http://www.railsonmaui.com/blog/2013/05/08/strategies-for-rails-logging-and-error-handling/">Strategies for Rails Logging and Error Handling</a> discussed some techniques to
setup a good error handling strategy. Here's some techniques to verify that your
application does what you expect it to do when things go wrong. The key message
is to check how your application handles errors, before your customers do.
</p>




<!-- more -->




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Your Code Depends on Outside Systems (That Might Raise Errors)</h2>
<div class="outline-text-2" id="text-1">
<p>
Suppose you've created the super-duper Rails storefront application that takes
online payments. You may even have some unit tests that verify the code. Then
you get the dreaded call that customers are being charged twice and their
orders are not processed. WTF?
</p>

<p>
It's not entirely obvious how to verify proper error handling when outside
systems fail, or even when odd errors are raised from your own code. Payment
processing deserves some special attention because it's a dependency on an
outside service (the payment processor) and will typically require database
updates based on the result of the payment processing. If you're updating
several tables, then you'll want to use a transaction to ensure that all or
nothing saves. While code review and manual testing are good first steps, you
should consider a few extra steps with error handling for sensitive parts of
your application.
</p>
</div>
</div>




<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Verification of Error Handling Strategy</h2>
<div class="outline-text-2" id="text-2">
<p>
Typically, error handling code is not well tested. It's much more common to test
the "happy path" of everything going right.
</p>

<p>
Let's look at hypothetical example and some tests that can flush out some
errors.
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Order</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">purchase_cart</span>
</span><span class='line'>    <span class="n">error_message</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="no">Order</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>      <span class="c1"># self.user record has charge info, and self.total is the order total</span>
</span><span class='line'>      <span class="c1"># PaymentGateway.charge returns either error_message if failed or charge_details if success</span>
</span><span class='line'>      <span class="n">error_message</span><span class="p">,</span> <span class="n">charge_details</span> <span class="o">=</span> <span class="no">PaymentGateway</span><span class="o">.</span><span class="n">charge</span> <span class="n">user</span><span class="p">,</span> <span class="n">total</span>
</span><span class='line'>      <span class="c1"># update the order and the user records with the charge_details</span>
</span><span class='line'>      <span class="n">set_charge_fields_and_save</span> <span class="n">user</span><span class="p">,</span> <span class="n">charge_details</span> <span class="k">unless</span> <span class="n">error_message</span> <span class="c1"># update the order to indicated purchased</span>
</span><span class='line'>      <span class="n">fulfill_order</span> <span class="c1"># do lots of complicated stuff to fulfill the order</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">error_message</span> <span class="c1"># return any error message if there is one</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
So what can go wrong?
</p>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Payment Processing is Like a 2-Phase Commit</h2>
<div class="outline-text-2" id="text-3">
<p>
Conceptually, you want a transaction, such that it's all or nothing. If the
charge goes through, then so does everything else. Payment processing like a
2-phase commit, except one has to handle all the what-ifs to be sure that it's
handled correctly.
</p>

<p>
The general steps of payment processing are like this:
</p>
<ol class="org-ol">
<li>Connect to outside resource to make charge.
</li>
<li>Update database records indicating charge successful.
</li>
<li>Fulfill the order.
</li>
</ol>

<p>
Rails transactions work such than any exception in the block will cause the
transaction to be rolled back. The problem with the above code is what happens
if fulfill_order throws an exception? The customer has been charged, the order
was updated to reflect payment, but then <b>ka-boom</b> and an exception is raised,
and any database updates to the order are rolled back, <b>but the payment is not
refunded</b>. The customer is confused as there is a charge but nothing else. How
could you have tested (and avoided) this?
</p>
</div>
</div>


<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Brute Force Methodology</h2>
<div class="outline-text-2" id="text-4">
<p>
You can simulate error conditions by manually placing =raise "any error message"=
statements in your code, and then testing, say in the UI manually. This is a
good first step to verify that your error handling is working correctly. You
might raise a specific error, if say your payment processor throws a specific
type of error.
</p>

<p>
For the above example, the different methods referenced, such as <code>process_order</code>
can get modified with a single line at the beginning, which would be:
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">process_order</span>
</span><span class='line'>  <span class="k">raise</span> <span class="s2">&quot;Any error message&quot;</span>
</span><span class='line'>  <span class="c1"># Lots of other code that can be commented out</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
Then go into the UI and test placing an order. Consider the following questions:
</p>
<ol class="org-ol">
<li>Was the right error message displayed to the user?
</li>
<li>Was the right information logged at the correct log level?
</li>
<li>Was an automatic email sent regarding the error?
</li>
</ol>

<p>
See my prior article <a href="http://www.railsonmaui.com/blog/2013/05/08/saner-rails-logging/">Saner Rails Logging</a> for the answers to #2 and #3.
</p>

<p>
By applying this technique to each of the components of completing a purchase,
one can flush out (and handle) nearly all of the different possible errors that
could affect a purchase. Give this technique a try in some critical section of
the code. You'll be surprised how well it works. Before giving you the fix to
the above code, let's see if we can write unit and feature tests on our error
handling.
</p>
</div>
</div>


<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">RSpec Unit Testing of Errors</h2>
<div class="outline-text-2" id="text-5">
<p>
It turns out that with stubbing in <code>rspec</code>, it's easy to test error handling!
<a href="https://www.relishapp.com/rspec/rspec-mocks/v/2-13/docs/method-stubs">RSpec provides a nice mocking library</a>. The test code would look something like
this. Pay attention to the call to <b>stub</b>.
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">Order</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s2">&quot;#purchase_cart&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s2">&quot;process_order fails&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">let</span><span class="p">(</span><span class="ss">:order</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span> <span class="ss">:order</span> <span class="p">}</span> <span class="c1"># factory_girl creation of order and related objects</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="c1"># The magic stubbing of every instance</span>
</span><span class='line'>        <span class="no">Order</span><span class="o">.</span><span class="n">any_instance</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:fulfill_order</span><span class="p">)</span> <span class="p">{</span> <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;test error&quot;</span> <span class="p">}</span>
</span><span class='line'>        <span class="c1"># The call to purchase_cart will first call &#39;charge&#39;</span>
</span><span class='line'>        <span class="no">PaymentGateway</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:charge</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="o">[</span><span class="kp">nil</span><span class="p">,</span> <span class="s2">&quot;charge_details&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="c1"># The error from within purchase_cart should do a refund</span>
</span><span class='line'>        <span class="no">PaymentGateway</span><span class="o">.</span><span class="n">should_receive</span><span class="p">(</span><span class="ss">:refund</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="s2">&quot;refund_details&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s2">&quot;should throw an error&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>          <span class="n">order</span><span class="o">.</span><span class="n">purchase_cart</span>
</span><span class='line'>        <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">raise_error</span>
</span><span class='line'>        <span class="n">order</span><span class="o">.</span><span class="n">reload</span>
</span><span class='line'>        <span class="n">order</span><span class="o">.</span><span class="n">purchased</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be</span>
</span><span class='line'>        <span class="c1"># charge refunded verified in mock</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
This test code ensures that the error handling of purchase_cart will catch an
error from fulfill_order, and properly refund the payment and rollback any
changes to the order record.
</p>

<p>
Here's an improved version of the Order#payment_method above:
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Order</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">purchase_cart</span>
</span><span class='line'>    <span class="n">error_message</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="no">Order</span><span class="o">.</span><span class="n">transaction</span> <span class="k">do</span>
</span><span class='line'>        <span class="c1"># user has a credit card info, returns either error_message if failed or charge_details if success</span>
</span><span class='line'>        <span class="n">error_message</span><span class="p">,</span> <span class="n">charge_details</span> <span class="o">=</span> <span class="no">PaymentGateway</span><span class="o">.</span><span class="n">charge</span> <span class="n">user</span><span class="p">,</span> <span class="n">total</span>
</span><span class='line'>        <span class="n">set_charge_fields_and_save</span> <span class="n">user</span><span class="p">,</span> <span class="n">charge_details</span> <span class="k">unless</span> <span class="n">error_message</span> <span class="c1"># update the order to indicated purchased</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">fulfill_order</span> <span class="c1"># do lots of complicated stuff to process the order, do this outside of the original tx, so that the payment info can be committed.</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span>
</span><span class='line'>      <span class="no">Utility</span><span class="o">.</span><span class="n">log_exception</span> <span class="n">e</span> <span class="c1"># Unified strategy for error handling including email notification, see below</span>
</span><span class='line'>      <span class="n">refund_charge</span> <span class="k">if</span> <span class="n">charge_details</span> <span class="c1"># If there&#39;s an error here, then sys admins will have to manually refund the charge.</span>
</span><span class='line'>      <span class="kp">throw</span> <span class="n">e</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">error_message</span> <span class="c1"># return any error message if there is one</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
Here are the key points to the improved code:
</p>

<ol class="org-ol">
<li>There's a block to catch the exception which is <i>separate from the
transaction block</i>. The <code>rescue</code> properly handles the case of an a charge
being made and needing to be refunded. <code>Utility.log_exception</code> will ensure
that all the right things happen with this sort of error (see <a href="http://www.railsonmaui.com/blog/2013/05/08/saner-rails-logging/">code for
Utlity.logException</a>).
</li>
<li>fulfill_order is moved outside of the transaction block. This allows the
transaction to complete, and then the order_fulfillment takes place. If
there's an issue in fulfilling the order, that can be dealt with separately
from the original charge. In other words, the customer can successfully pay
for the order, and the store can deal with the failure to fulfill the order.
</li>
</ol>
</div>
</div>


<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">RSpec Capybara Feature (Integration) Tests of UI Errors</h2>
<div class="outline-text-2" id="text-6">
<p>
It's possibly more important and sometimes easier to do the verification at the
integration level in RSpec feature specs using <a href="https://github.com/jnicklas/capybara">Capybara</a> with <a href="http://phantomjs.org/">PhantomJs</a> and
<a href="https://github.com/jonleighton/poltergeist">Poltergeist</a>. The secret sauce is the same use of the same stubbing technique as
above to replace some key methods such that they throw an exception. This sort
of technique works amazingly well to ensure that application will do the right
then when an unexpected failure occurs, from the logging and emailing of the
error message to the browser display to then end user.
</p>

<p>
I tend to develop such a test in an iterative manner:
</p>
<ol class="org-ol">
<li>Make sure you've got tests on the "happy" case where the story goes as
planned.
</li>
<li>Then introduce test cases where have bits of code like this that will raise
an error at an opportune time.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Order</span><span class="o">.</span><span class="n">any_instance</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:fulfill_order</span><span class="p">)</span> <span class="p">{</span> <span class="k">raise</span> <span class="no">ArgumentError</span><span class="p">,</span> <span class="s2">&quot;test error&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</li>
<li>Allow the test cases to fail, and put in screen shots (in Capybara with
phantomjs, that looks like this:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">render_page</span> <span class="s2">&quot;a-descriptive-name&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>
Setup this method <code>render_page</code> in a spec helper file like this:
</p>
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">render_page</span> <span class="nb">name</span>
</span><span class='line'>  <span class="n">path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">integration_test_render_dir</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">.png&quot;</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</li>
<li>Put in some assertions that the page shows the correct error and the records
in the database have the right values.
</li>
<li>You can even
</li>
</ol>

<p>
Here's an example that tests a failure of the Stripe payment API, including
verification that an email was sent signifying an error:
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="c1"># using gem vcr to record http communication for faster performance</span>
</span><span class='line'> <span class="n">let</span><span class="p">(</span><span class="ss">:order</span><span class="p">)</span> <span class="p">{</span> <span class="n">create</span> <span class="ss">:order</span> <span class="p">}</span> <span class="c1"># lots of setup in factory girl for non-purchased order</span>
</span><span class='line'>
</span><span class='line'> <span class="n">scenario</span> <span class="s2">&quot;Purchase cart, Strip payment error&quot;</span><span class="p">,</span> <span class="ss">:vcr</span> <span class="k">do</span>
</span><span class='line'>   <span class="c1"># Setup the stub -- the secret sauce to this test</span>
</span><span class='line'>   <span class="n">error_content</span> <span class="o">=</span> <span class="s2">&quot;Testing error handling exception message&quot;</span>
</span><span class='line'>   <span class="no">PaymentGateway</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:charge</span><span class="p">)</span> <span class="p">{</span> <span class="k">raise</span> <span class="ss">Stripe</span><span class="p">:</span><span class="ss">:InvalidRequestError</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">error_content</span><span class="p">,</span> <span class="s1">&#39;id&#39;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>   <span class="n">place_order</span>
</span><span class='line'>   <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span> <span class="n">error_content</span>
</span><span class='line'>   <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_content</span> <span class="s2">&quot;Error purchasing&quot;</span>
</span><span class='line'>   <span class="n">order</span><span class="o">.</span><span class="n">reload</span>
</span><span class='line'>   <span class="n">order</span><span class="o">.</span><span class="n">purchased</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'>
</span><span class='line'> <span class="k">def</span> <span class="nf">place_order</span>
</span><span class='line'>  <span class="n">login_as</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="ss">:scope</span> <span class="o">=&gt;</span> <span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>  <span class="n">visit</span> <span class="n">shopping_cart_path</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;.total .price&#39;</span><span class="p">,</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="n">in_dollars</span><span class="p">(</span><span class="n">order</span><span class="o">.</span><span class="n">total</span><span class="p">))</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">render_page</span><span class="p">(</span><span class="s2">&quot;purchase-cart-1&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">click_link</span> <span class="s2">&quot;CHECKOUT&quot;</span>
</span><span class='line'>  <span class="n">fill_in_credit_card_info</span> <span class="c1"># utility test method to fill in credit card data</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">should</span> <span class="n">have_selector</span><span class="p">(</span><span class="s1">&#39;.total .price&#39;</span><span class="p">,</span> <span class="ss">:text</span> <span class="o">=&gt;</span> <span class="n">in_dollars</span><span class="p">(</span><span class="n">order</span><span class="o">.</span><span class="n">total</span><span class="p">))</span>
</span><span class='line'>  <span class="n">render_page</span><span class="p">(</span><span class="s2">&quot;purchase-cart-with-payment-info-2&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">click_on</span> <span class="s2">&quot;PURCHASE&quot;</span>
</span><span class='line'>  <span class="n">wait_for_spinners</span> <span class="c1"># method to wait for the busy spinner to stop</span>
</span><span class='line'>  <span class="n">render_page</span><span class="p">(</span><span class="s2">&quot;purchase-cart-after-click-purchase-3&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">validate_error_emailed</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># example of how you verify that an error was emailed</span>
</span><span class='line'><span class="k">def</span> <span class="nf">validate_error_emailed</span>
</span><span class='line'>  <span class="n">email</span> <span class="o">=</span> <span class="ss">ActionMailer</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">deliveries</span><span class="o">.</span><span class="n">last</span>
</span><span class='line'>  <span class="n">email</span><span class="o">.</span><span class="n">should_not</span> <span class="n">be_nil</span>
</span><span class='line'>  <span class="n">email</span><span class="o">.</span><span class="n">to</span><span class="o">.</span><span class="n">should_not</span> <span class="kp">include</span><span class="p">(</span><span class="n">order</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">email</span><span class="p">)</span>
</span><span class='line'>  <span class="n">email</span><span class="o">.</span><span class="n">to</span><span class="o">.</span><span class="n">should</span> <span class="kp">include</span><span class="p">(</span><span class="s1">&#39;whoever@gets-error.com&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>


<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">Conclusion</h2>
<div class="outline-text-2" id="text-7">
<p>
If you aren't simulating how your application responds to errors, then you'll
eventually find out, and the result might not be as good as you'd prefer. You
can simulate errors with the very simple and quick technique of a well placed
=raise "some error"=, and then testing in a UI. Or you might prefer the
robustness of unit or feature tests using stubbing. Either way, the key message
is to check how your application handles errors, before your customers do.
</p>

<p>
Related Post:
<a href="http://www.railsonmaui.com/blog/2013/05/08/strategies-for-rails-logging-and-error-handling/">Strategies
for Rails Logging and Error Handling</a>
</p>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Strategies for Rails Logging and Error Handling]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/05/08/strategies-for-rails-logging-and-error-handling/"/>
    <updated>2013-05-08T17:41:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/05/08/strategies-for-rails-logging-and-error-handling</id>
    <content type="html"><![CDATA[<p>
TLDR: Clean logging and error handling is a critical aspect of a RoR app.
What's a good strategy? Why does this matter?
</p>




<p>
A Rails app can have awesome unit and functional tests, and then in production,
something goes wrong and the right error handling does not happen, making
a bad situation worse. By this, I mean, it's bad enough that something went
wrong in production. It's even worse if:
</p>


<ol class="org-ol">
<li>You don't have clear log messages that identify exactly what went wrong.
</li>
<li>You didn't get automatically notified via email that something went wrong.
Instead, the customer told the customer service rep that there's an issue.
Ideally, when an error happens, the responsible developers should be
notified.
</li>
</ol>




<p>
Here's some tips on logging setup and error handling, including a utility
method to log the stack trace and send an email.
</p>




<p>
The next article,
<a href="http://www.railsonmaui.com/blog/2013/05/11/testing-error-handling/">Testing
Error Handling</a>, will show you how to verify that your error handling strategy
is properly implemented, includind with rspec tests.
</p>




<!-- more -->




<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Log Setup</h2>
<div class="outline-text-2" id="text-1">
</div><div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">Notification of any Exceptions via Email with Gem exception_notification</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Check out the gem <a href="http://smartinez87.github.io/exception_notification/">exception_notification</a>. It works great. One things the docs
don't point out is that it works great with <a href="http://mailcatcher.me/">MailCatcher</a>. This allows you to
"test" that your exception notification emails are being sent as expected
without using a real mail account. Thus, <i>do</i> enable exception logging in
development mode, contrary to the basic setup. Here's a config example at this
post on <a href="http://www.mikeperham.com/2012/12/09/12-gems-of-christmas-4-mailcatcher-and-mail_view/">MailCatcher and mail_view</a>.
</p>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">Log the Browser Details with Gem 'browser_details'</h3>
<div class="outline-text-3" id="text-1-2">
<p>
The gem <a href="https://github.com/gshutler/browser_details">browser_details</a> will tell you what type of browser was used, which
can be very important when errors occur. I cracked up when I read this from the
gem info page: 
</p>
<blockquote>
<p>
Have you ever had the conversation:
</p>

<p>
Your site doesn't work.
What browser are you using and do you have Javascript enabled?
</p>

<p>
What's a browser?
</p>
</blockquote>
</div>
</div>

<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">Control Rails Log Verbosity with Gem lograge</h3>
<div class="outline-text-3" id="text-1-3">
<p>
Sometimes too much of a good thing (log info) is a bad thing, and that's true
with Rails default logging. Check out the gem '<a href="https://github.com/roidrage/lograge">lograge</a>'. The big difference is
that a single request will take a single line. To quote the README, instead of
logs like this:
</p>
<pre class="example">
Started GET "/" for 127.0.0.1 at 2012-03-10 14:28:14 +0100
Processing by HomeController#index as HTML
  Rendered text template within layouts/application (0.0ms)
  Rendered layouts/_assets.html.erb (2.0ms)
  Rendered layouts/_top.html.erb (2.6ms)
  Rendered layouts/_about.html.erb (0.3ms)
  Rendered layouts/_google_analytics.html.erb (0.4ms)
Completed 200 OK in 79ms (Views: 78.8ms | ActiveRecord: 0.0ms)
</pre>

<p>
After installing lograge, you'll have one line for the request:
</p>
<pre class="example">
method=GET path=/jobs/833552.json format=json controller=jobs action=show status=200 duration=58.33 view=40.43 db=15.26
</pre>

<p>
The one issue with <code>lograge</code> is that the default configuration does not log
request parameters, which can be useful for debugging. This blog post, <a href="http://ionrails.com/2013/03/26/how-to-add-the-request-parameters-along-with-full-url-request-in-lograge-outputted-files/">How to add
request parameters to lograge logs</a>, addresses that shortcoming.
</p>
</div>
</div>
<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">Utility Method to Log Exceptions</h3>
<div class="outline-text-3" id="text-1-4">
<p>
This sample method <code>Utility.log_exception</code> takes care of logging an exception along with sending out an
email notification.
</p>

<p>
Example of calling <code>Utility.log_exception</code>:
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">my_method_with_error</span> <span class="n">foobar</span>
</span><span class='line'>  <span class="n">do_something_that_raises</span> <span class="n">foobar</span>
</span><span class='line'><span class="k">rescue</span> <span class="o">=&gt;</span> <span class="n">e</span> <span class="c1"># catches StandardError (don&#39;t use rescue Esception =&gt; e)</span>
</span><span class='line'>  <span class="no">Utility</span><span class="o">.</span><span class="n">log_exception</span> <span class="n">e</span><span class="p">,</span> <span class="ss">info</span><span class="p">:</span> <span class="s2">&quot;called do_something_that_raises wihh </span><span class="si">#{</span><span class="n">foobar</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>
Definition of <code>Utility.log_exception</code>:
</p>

<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Utility</span>
</span><span class='line'>  <span class="c1"># Logs and emails exception</span>
</span><span class='line'>  <span class="c1"># Optional args:</span>
</span><span class='line'>  <span class="c1"># request: request Used for the ExceptionNotifier</span>
</span><span class='line'>  <span class="c1"># info: &quot;A descriptive messsage&quot;</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">log_exception</span> <span class="n">e</span><span class="p">,</span> <span class="n">args</span>
</span><span class='line'>    <span class="n">extra_info</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:info</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span> <span class="n">extra_info</span> <span class="k">if</span> <span class="n">extra_info</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>    <span class="n">st</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">backtrace</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Rails</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">error</span> <span class="n">st</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">extra_info</span> <span class="o">||=</span> <span class="s2">&quot;&lt;NO DETAILS&gt;&quot;</span>
</span><span class='line'>    <span class="n">request</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:request</span><span class="o">]</span>
</span><span class='line'>    <span class="n">env</span> <span class="o">=</span> <span class="n">request</span> <span class="p">?</span> <span class="n">request</span><span class="o">.</span><span class="n">env</span> <span class="p">:</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">env</span>
</span><span class='line'>      <span class="ss">ExceptionNotifier</span><span class="p">:</span><span class="ss">:Notifier</span><span class="o">.</span><span class="n">exception_notification</span><span class="p">(</span><span class="n">env</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">&quot;Exception: </span><span class="si">#{</span><span class="n">extra_info</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">})</span><span class="o">.</span><span class="n">deliver</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="ss">ExceptionNotifier</span><span class="p">:</span><span class="ss">:Notifier</span><span class="o">.</span><span class="n">background_exception_notification</span><span class="p">(</span><span class="n">e</span><span class="p">,</span> <span class="ss">:data</span> <span class="o">=&gt;</span> <span class="p">{</span><span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">&quot;Exception: </span><span class="si">#{</span><span class="n">extra_info</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">})</span><span class="o">.</span><span class="n">deliver</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
</div>
</div>
</div>


<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Strategy: Error Handling and Logging</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>Avoid rescuing/catching if you can't do anything with the exception. For
example, in a model method, you might be calling that from a controller, but
you also might be calling that from some scheduled job. Thus, it's hard to
say what the right action should be. A special case is calling <code>raise</code> without
arguments: sometimes it is reasonable to catch all exceptions, logging the
exception, and then re-raising it like it was never caught.
</li>
<li>If you catch an exception, consider if you should re-throw the exception
because code at a different level will be able to handle the exception more
properly.
</li>
<li>Consider how the code is being invoked, such as from a call to generate
HTML or an ajax request, or maybe a batch job. All of these cases have very
different needs for how the error should be handled.
</li>
<li>Be sure you understand the order of your rescue clauses matter. This article
<a href="http://blog.rubybestpractices.com/posts/rklemme/003-The_Universe_between_begin_and_end.html">The Universe between <code>begin</code> and <code>end</code></a> provides a good explanation.
Basically put the most specific exception types first and something like
<code>rescue =&gt; e</code> last.
</li>
<li>Ruby does not support the concept of a "cause" with an exception. Thus, if
you catch an exception and are going to rethrow a different exception, then
it's important to log the stack of the original exception, or else that
information will be lost.
</li>
<li>Test the logging of the exception in both development and production mode.
You want to ensure that any exception prints clearly regardless of Rails
environment.
</li>
<li>A good way to test error handling is to temporarily put in <code>raise
   ArgumentError</code> (or whatever other error), and see how the exception is
handled, both by the logger and the UI.
</li>
<li>The worst scenario is catching an exception and failing to log any messages.
This can make troubleshooting a problem very tricky.
</li>
</ol>
</div>
</div>


<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Verification and Testing</h2>
<div class="outline-text-2" id="text-3">
<p>
The next article,
<a href="http://www.railsonmaui.com/blog/2013/05/11/testing-error-handling/">Testing
Error Handling</a>, will show you how to verify that your error handling strategy
is properly implemented, and how to add rspec unit and functional tests on error
handling.
</p>
</div>
</div>

]]></content>
  </entry>
  
</feed>
