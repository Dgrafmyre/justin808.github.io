#+BEGIN_HTML
---
layout: post
title: "Octopress Setup with Github, Org Mode, and LiveReload"
date: 2013-04-27 22:46
comments: true
categories: [Octopress, github, org-mode]
keywords: octopress, github, org-mode, Emacs, livereload
description: Installing Octopress with github hosting, Org Mode markup, and Live-Reload
---
#+END_HTML
WordPress seemed like a good blogging platform, but it just didn't feel right. I
spend all my day editing text files using vim key-bindings, and I love [[http://orgmode.org/][Org
Mode]] for all non-coding writing. If you don't know Org Mode, it's like having
Markdown mode on steroids. You can have a numbered list in Markdown, but
org-mode lets you re-order the list, and that's just the beginning. Editing blog
documents in the WordPress editor felt almost as bad as being told to use MS
Word. I found that ergonomics of Org Mode, including all the goodness of recent
versions of [[http://www.gnu.org/software/emacs/][Emacs]], including [[http://emacswiki.org/emacs/Evil][Evil]] (Vim emulation), just made organization of
creative thoughts so much more enjoyable.

So I bit the bullet one weekend, and dove into [[http://octopress.org/][Octopress]]. You're looking at the
results of this endeavor, including my first Octopress article, and the latest
tips on recreating this sort of blog using Octopress with Org Mode authoring,
using LiveReload, and deployed at no charge on github.com. 

If you used to writing real web applications, rather than know the intricacies
of a giant monolithic blogging platform, then the [[http://octopress.org/docs/theme/template/][customization of Octopress]]
seems so much more straightforward. This is so much more like the Unix
philosophy that so many of us love, which is small and modular, rather than
monolithic.

I like [[https://github.com/robdodson/robdodson.github.com/blob/source/source/_posts/2012-04-30-custom-domain-with-octopress-and-github-pages.markdown][Rob Dodson's summary]] (noting Org Mode plus Emacs):

#+begin_html

> [Octopress](http://octopress.org/) is a blogging framework written by [Brandon Mathis](http://brandonmathis.com/)
([@imathis](https://twitter.com/#!/imathis)) which sits on top of [Jekyll](https://github.com/mojombo/jekyll). Jekyll is
a static site generator, meaning there's no database associated with your blog. Instead of writing everything in a
WSYWIG linked to MySQL (like Wordpress or Blogger) you produce text files using Markdown which are then converted to
static HTML. There are 3 huge benefits to this approach. First, writing in
Markdown [*org-mode* for Justin] is awesome. Once you learn the
syntax it's incredibly fast and you don't have to spend time playing with a tiny little editor window just to
<s>add</s> *some* **style** to your posts. Second, writing in your favorite text editor is also awesome. I produce
everything in [Sublime Text 2](http://www.sublimetext.com/2) [*Emacs* for Justin] and every day I discover new tricks to make the process
better. If you've ever had to write a blog post using one of those horrible little TinyMCE editors you will appreciate
this feature. And lastly, static HTML is *fast*.

#+end_html

I found it totally neat that I could embed markdown inside the org-mode
document. See below for how this is done.

This article should be useful for:
  1. Any interest in using org-mode to publish to Octopress including some
     reasons I use Org Mode (with Emacs).
  2. Some explanation of what Octopress and git are doing.
  3. How to use LiveReload with Octopress and Org Mode.
  4. Anybody curious about how using free github pages works to host Octopress.

* Basic setup
1. [[%20http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages/][Rob Dodson on Octopress]]: Start off with these instructions from this posting
   on April 30th, 2012. There are a few differences worth noting:
   1. You may wish to change the .rvmrc to a .ruby-version file
   2. Github recommends your deployment repository be named =yourname.github.io=,
      not =yourname.github.com=.
   3. After you run =rake setup_github_pages= and before running =rake
      generate=, you should run =rake install=. If you forget, there's a clear
      message indicating this omission.
2. Customize =octopress/_config.yml=. The yaml file contains descriptions.
3. Update the DNS to use your custom domain if you wish: [[https://help.github.com/articles/setting-up-a-custom-domain-with-pages][Github directions on
   setting up a custom domain]]
4. At this point, you can create a post:
  #+BEGIN_SRC bash
  rake new_post["my post name"]
  #+END_SRC
 
  Create a page:
  #+BEGIN_SRC bash
  rake new_page["my page name"]
  #+END_SRC

  Generate and deploy:
  #+BEGIN_SRC bash
  rake gen_deploy 
  #+END_SRC
 
  Watch the site and regenerate when it changes:
  #+BEGIN_SRC bash
  rake watch 
  #+END_SRC
  
  Preview the site in a web browser:
  #+BEGIN_SRC bash
  rake preview
  #+END_SRC
  
  See all the available rake options:
  #+BEGIN_SRC bash
  rake -T
  #+END_SRC

  Save changes to source branch:
  #+BEGIN_SRC bash
  git add .
  git commit -m "save changes to source"
  git push origin source
  #+END_SRC

* POW
POW allows you to point your browser to [[http://octopress.dev]] to see your local,
unpublished Octopress website. It's very convenient to not have to remember to
run a local server, and it works great with LiveReload. Scroll to the bottom of
this link for details on [[http://octopress.org/docs/blogging/][POW]]. The alternative to running POW is to run =rake
preview= and then point your browser at =http://0.0.0.0:4000= (or whatever port
you configured).

* LiveReload
LiveReload is a [[https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei?hl%3Den][Chrome browser extension]] that will automatically refresh
the browser after you publish your file. This works with or without POW.
+ [[http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-][Install the browser extension]] for your type of browser.
+ Add these two entries to your =Gemfile=, in the :development group:
   #+BEGIN_SRC ruby
   gem 'guard'
   gem 'guard-livereload'
   #+END_SRC
   
+ Create a file called =Guardfile= containing something like:
   #+BEGIN_SRC ruby
     guard 'livereload' do
       watch(%r{public/generated})
       watch(%r{public/.+\.(css|js|html)})
     end
   #+END_SRC
   
+ Start 2 shell tabs running these commands: =rake generate && rake watch=
   and =guard= 
   #+BEGIN_SRC bash
     > rake generate && rake watch
   #+END_SRC
   This screen shot shows =watch= updating the deployment files.
   {% img /images/2013-04-27-octopress-setup-with-github-and-org-mode/rake-generate-watch.png %}
   start guard LiveReload
   #+BEGIN_SRC bash
     > guard
   #+END_SRC
   This screen grab shows guard detecting the browser and telling the
   browser to update.
   {% img /images/2013-04-27-octopress-setup-with-github-and-org-mode/guard-console.png %}

It's neat to get LiveReload working with Octopress. However, the generation can
finish after your page does a reload, so you won't see your latest changes. I'll
update this blog post when I figure out a solution to that one.

It's worth noting that if you're running any other instance of guard-
LiveReload, then one of these two copies will win and one won't work. If you
run a rails server this way, then this can bite you. It took me a bit of time
to figure out why guard wasn't working.


* Why org-mode for blog publishing?
[[http://orgmode.org/][Org-mode]] offers quite a bit more than plain markdown. It's quite the *hacker's
delight* for note taking and authoring of blog articles. Down below I list a few
reasons why org-mode. Here's a few org-mode features I love (Some are Emacs
ones):
1. All headers and list items can be reordered with minimal keystrokes (think
   super powerful outliner).
2. Numbered lists.
3. Editable tables in text editor, with movable columns, movable rows.
4. Ergonomics of insertion of URLs and images.
5. Includes the basics of markdown, such as source code blocks and much more.

* Org-mode Integration
I found a plugin that automates the process of converting an org-mode document
(=.org= file) in =source/org_posts= into a =.markdown= document in
=source/\_posts=. Once the markdown document is saved in \_posts, the =rake
watch= task picks up the change and deploys the file, and LiveReload can then
automatically update your web browser. *Neat!*

Here are the basic steps:
1. Follow the instructions here: [[http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/][Introducing Octopress Blogging for Org-Mode]]
2. At the time of this article, April 27, there's a bug with the latest
   org-mode. [[https://github.com/craftkiller/orgmode-octopress/issues/3][I posted a workaround.]] By the time you read this, you probably
   won't need that tip.
3. You can embed Markdown (or other Octopress/Jekyll directives) by embedding
   inside of a =#+begin_html= and =#+end_html= block.
   {% img /images/2013-04-27-octopress-setup-with-github-and-org-mode/quoting-markdown-in-org-mode.png %}
4. +Images work fine.+ Well, almost fine. The big gotcha is that the standard
   inclusion of images in org-mode results in broken paths at deployment. The
   workaround is to embed the [[http://octopress.org/docs/plugins/image-tag/][Octopress syntax for an image]], and to place the
   images under source/images. Note, you'll want to be sure to use an absolute
   path, or else your article might look OK on the home page, but might now work
   in the postings directory. If I'm creating a document with many images, I'll
   group the images for that document in a sub-directory of images named like
   the document. This is how it should look. The trick is to place the
   octopress =img= directive within a HTML begin/end block.

   {% img /images/2013-04-27-octopress-setup-with-github-and-org-mode/org-mode-images.png %}
5. Links to other pages or posts require using something like this. The trick
   is that you have to specify =http:= and place the =html= file suffix type.
   Also note using one slash at the beginning for an absolute path.
   #+BEGIN_EXAMPLE
   [[http:/about/some_details.html][Some Details]]  
   #+END_EXAMPLE
6. Bold styling was a bit of mystery using the standard theme. I had to add
   this line to \_typography.scss:
   #+BEGIN_SRC css
   b { font-weight: bold; }
   #+END_SRC


* Deploying to Github: Directory Structure of Octopress and the master and source Git Branches
Github offers free hosting of both the blog deployment and source. You're
looking at the deployment right now. You can find the source here at
[[https://github.com/justin808/justin808.github.io][my git repo justin808.github.io]]. I doubt you could beat the price, performance, and
convenience. You can look inside of this repo, clone it, etc. and you have
everything that it took to make this blog.

I originally was quite confused by the concept of using two separate git
branches to make up what gets deployed on the live website versus the git
repository of my articles. Plus, there's the issue of Octopress git repository
that you clone when starting out. Eventually, I figured out that the two branches
simply contain different files, with one containing the original Octopress
files. Here's a few screen grabs that might clarify the situation for you.

Don't forget that you never push to the master branch, but rather the =rake
deploy= task does it for you. Instead, you run =git push origin source= to push
the content of your blog to github.

The =octopress/public= directory corresponds to what you'll find on the github
site for your deployment (master branch).

{% img /images/2013-04-27-octopress-setup-with-github-and-org-mode/public-dir-corresponds-master-branch.png %}

The octopress/.gitignore file contains entries like =public=, which essentially
keeps the =rake generate= files out of the source branch.

Here's the github master branch right after creation. Note the correspondence
with =public=. This is what gets deployed as your blog.
{% img /images/2013-04-27-octopress-setup-with-github-and-org-mode/github-master-branch.png %}

Here's the github source branch. This contains the octopress environment, as
well as your customizations and blog posts.
#+begin_html
{% img /images/2013-04-27-octopress-setup-with-github-and-org-mode/github-source-branch.png %}
#+end_html

* Useful Links
1. [[http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/][Getting Started with Octopress]]: Nice overall tutorial. Very current!
   March 2013.
2. [[http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages][Rob Dodson on Octopress]]: Most of the instructions I show below are from this
   posting on April 30th, 2012.
3. [[http://joelmccracken.github.io/entries/octopress-is-pretty-sweet/][Joel McCracken on Octopress]]: Use Jekyll? You Really Should Be Using Octopress 
4. [[https://help.github.com/articles/setting-up-a-custom-domain-with-pages][Github directions on setting up a custom domain]] 
5. [[http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one][dblock.org Article on Octopress]]: A good explanation from Jan 17, 2012,
   especially on the difference of the source and master branches.
6. [[http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/][Introducing Octopress Blogging for Org-Mode]]: For org-mode. See below.
7. [[http://hiltmon.com/blog/2013/04/17/18-months-of-octopress/][18 Months of Octopress]]: Nice article on why Octopress was worth the switch.
8. [[http://odino.org/bash-aliases-for-octopress/][Shell Aliases for Octopress]]: Save time with these shortcuts


* Parting words...
Thanks in advance for any suggestions on this article. I hope you find it
helpful. Check me out on Twitter: [[http://twitter.com/railsonmaui][@RailsOnMaui]].
