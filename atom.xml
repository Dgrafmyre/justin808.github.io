<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rails on Maui]]></title>
  <link href="http://www.railsonmaui.com//atom.xml" rel="self"/>
  <link href="http://www.railsonmaui.com//"/>
  <updated>2014-09-27T14:41:27-10:00</updated>
  <id>http://www.railsonmaui.com//</id>
  <author>
    <name><![CDATA[Justin Gordon]]></name>
    <email><![CDATA[justin.gordon@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pry, Ruby, Array#zip, CSV, and the Hash[] Constructor]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/09/15/pry-ruby-array-zip-csv-and-the-hash-constructor/"/>
    <updated>2014-09-15T11:06:17-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/09/15/pry-ruby-array-zip-csv-and-the-hash-constructor</id>
    <content type="html"><![CDATA[<p>
A couple weeks ago, I wrote a popular article, <a href="http://www.railsonmaui.com/blog/2014/08/17/pry-ruby-and-fun-with-the-hash-constructor/">Pry, Ruby, and Fun With the Hash Constructor</a> demonstrating the usefulness of
<a href="https://github.com/pry/pry">pry</a> with the <a href="http://ruby-doc.org/core-2.1.2/Hash.html">Hash bracket constructor</a>. I just ran into a super fun test example of pry
that I couldn&#8217;t resist sharing!
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">The Task: Convert CSV File without Headers to Array of Hashes</h2>
<div class="outline-text-2" id="text-1">
<p>
For example, you want to take a csv file like:
</p>

<pre class="example">
|---+--------+--------|
| 1 | Justin | Gordon |
| 2 | Tender | Love   |
|---+--------+--------|
</pre>

<p>
And create an array of hashes like this with column headers &#8220;id&#8221;, &#8220;first_name&#8221;, &#8220;last_name&#8221;:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
You&#8217;d think that you could just pass the headers to the <code>CSV.parse</code>, but that
doesn&#8217;t work:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">11</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">col_headers</span> <span class="o">=</span> <span class="sx">%w(id, first_name last_name)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;id,&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;first_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;last_name&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">12</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="n">output</span> <span class="ss">error</span><span class="p">:</span> <span class="c1">#&lt;NoMethodError: undefined method `table&#39; for #&lt;Object:0x007fdbfc8d5588&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Using Array#zip</h2>
<div class="outline-text-2" id="text-2">
<p>
I stumbled upon a note about the CSV parser that suggested using <code>Array#zip</code> to
add keys to the results created by the CSV parser when headers don&#8217;t exist in
the file.
</p>

<p>
Using <code>Array#zip</code>? What the heck is the <code>zip</code> method? Compression?
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="p">?</span> <span class="n">a_array</span><span class="o">.</span><span class="n">zip</span>
</span><span class='line'>
</span><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="n">array</span><span class="o">.</span><span class="n">c</span> <span class="p">(</span><span class="n">C</span> <span class="no">Method</span><span class="p">):</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="nb">Array</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="ss">Signature</span><span class="p">:</span> <span class="n">zip</span><span class="p">(</span><span class="o">*</span><span class="n">arg1</span><span class="p">)</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">17</span>
</span><span class='line'>
</span><span class='line'><span class="no">Converts</span> <span class="n">any</span> <span class="n">arguments</span> <span class="n">to</span> <span class="n">arrays</span><span class="p">,</span> <span class="k">then</span> <span class="n">merges</span> <span class="n">elements</span> <span class="n">of</span> <span class="nb">self</span> <span class="n">with</span>
</span><span class='line'><span class="n">corresponding</span> <span class="n">elements</span> <span class="n">from</span> <span class="n">each</span> <span class="n">argument</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">This</span> <span class="n">generates</span> <span class="n">a</span> <span class="n">sequence</span> <span class="n">of</span> <span class="n">ary</span><span class="o">.</span><span class="n">size</span> <span class="n">_n_</span><span class="o">-</span><span class="n">element</span> <span class="n">arrays</span><span class="p">,</span>
</span><span class='line'><span class="n">where</span> <span class="n">_n_</span> <span class="n">is</span> <span class="n">one</span> <span class="n">more</span> <span class="n">than</span> <span class="n">the</span> <span class="n">count</span> <span class="n">of</span> <span class="n">arguments</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">If</span> <span class="n">the</span> <span class="n">size</span> <span class="n">of</span> <span class="n">any</span> <span class="n">argument</span> <span class="n">is</span> <span class="n">less</span> <span class="n">than</span> <span class="n">the</span> <span class="n">size</span> <span class="n">of</span> <span class="n">the</span> <span class="n">initial</span> <span class="n">array</span><span class="p">,</span>
</span><span class='line'><span class="kp">nil</span> <span class="n">values</span> <span class="n">are</span> <span class="n">supplied</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">If</span> <span class="n">a</span> <span class="n">block</span> <span class="n">is</span> <span class="n">given</span><span class="p">,</span> <span class="n">it</span> <span class="n">is</span> <span class="n">invoked</span> <span class="k">for</span> <span class="n">each</span> <span class="n">output</span> <span class="n">array</span><span class="p">,</span> <span class="n">otherwise</span> <span class="n">an</span>
</span><span class='line'><span class="n">array</span> <span class="n">of</span> <span class="n">arrays</span> <span class="n">is</span> <span class="n">returned</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">a</span> <span class="o">=</span> <span class="o">[</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span> <span class="o">]</span>
</span><span class='line'>   <span class="n">b</span> <span class="o">=</span> <span class="o">[</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span> <span class="o">]</span>
</span><span class='line'>   <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>   <span class="c1">#=&gt; [[1, 4, 7], [2, 5, 8], [3, 6, 9]]</span>
</span><span class='line'>   <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">].</span><span class="n">zip</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>      <span class="c1">#=&gt; [[1, 4, 7], [2, 5, 8]]</span>
</span><span class='line'>   <span class="n">a</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="o">]</span><span class="p">,</span> <span class="o">[</span><span class="mi">8</span><span class="o">]</span><span class="p">)</span>    <span class="c1">#=&gt; [[4, 1, 8], [5, 2, nil], [6, nil, nil]]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Hmmmm&#x2026;.Why would that be useful?
</p>

<p>
Here&#8217;s some pry command that demonstrate this. I encourage you to follow along
in pry!
</p>

<p>
I first created a CSV string from hand like this:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv_file</span> <span class="o">=</span> <span class="o">&lt;&lt;-</span><span class="no">CSV</span>
</span><span class='line'><span class="err">[2] (pry) main: 0* 1, &quot;Justin&quot;, &quot;Gordon&quot;</span>
</span><span class='line'><span class="err">[2] (pry) main: 0* 2, &quot;Avdi&quot;, &quot;Grimm&quot;</span>
</span><span class='line'><span class="err">[2] (pry) main: 0* CSV</span>
</span><span class='line'><span class="err">&quot;1, \&quot;Justin\&quot;, \&quot;Gordon\&quot;\n2, \&quot;Avdi\&quot;, \&quot;Grimm\&quot;\n&quot;</span>
</span><span class='line'><span class="err">[3] (pry) main: 0&gt; CSV.parse(csv_file) { |csv_row| p csv_row }</span>
</span><span class='line'><span class="err">CSV::MalformedCSVError: Illegal quoting in line 1.</span>
</span><span class='line'><span class="err">from /Users/justin/.rvm/rubies/ruby-2.1.2/lib/ruby/2.1.0/csv.rb:1855:in `block (2 levels) in shift&#39;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span> <span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;Avdi&quot;</span><span class="p">,</span> <span class="s2">&quot;Grimm&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span> <span class="no">CSV</span>
</span><span class='line'><span class="s2">&quot;1, </span><span class="se">\&quot;</span><span class="s2">Justin</span><span class="se">\&quot;</span><span class="s2">, </span><span class="se">\&quot;</span><span class="s2">Gordon</span><span class="se">\&quot;\n</span><span class="s2">2, </span><span class="se">\&quot;</span><span class="s2">Avdi</span><span class="se">\&quot;</span><span class="s2">, </span><span class="se">\&quot;</span><span class="s2">Grimm</span><span class="se">\&quot;\n</span><span class="s2">&quot;</span>
</span><span class='line'><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_file</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">csv_row</span><span class="o">|</span> <span class="nb">p</span> <span class="n">csv_row</span> <span class="p">}</span>
</span><span class='line'><span class="ss">CSV</span><span class="p">:</span><span class="ss">:MalformedCSVError</span><span class="p">:</span> <span class="no">Illegal</span> <span class="n">quoting</span> <span class="k">in</span> <span class="n">line</span> <span class="mi">1</span><span class="o">.</span>
</span><span class='line'><span class="n">from</span> <span class="sr">/Users/</span><span class="n">justin</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">csv</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">1855</span><span class="ss">:in</span> <span class="sb">`block (2 levels) in shift&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Doooh!!!! That taught me that creating a legit CSV string is not as easy as it sounds.
</p>

<p>
Let&#8217;s create a legit csv string:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv_string</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">generate</span> <span class="k">do</span> <span class="o">|</span><span class="n">csv</span><span class="o">|</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span>   <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span> <span class="s2">&quot;Gordon&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span>   <span class="n">csv</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span> <span class="s2">&quot;Love&quot;</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">4</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">*</span> <span class="k">end</span>
</span><span class='line'><span class="s2">&quot;1,Justin,Gordon</span><span class="se">\n</span><span class="s2">2,Tender,Love</span><span class="se">\n</span><span class="s2">&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Notice, there&#8217;s no quotes around the single word names!
</p>

<p>
If I use CSV to parse this, we get the reverse result, the array of arrays,
back:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">16</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">17</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span><span class="o">.</span><span class="n">class</span>
</span><span class='line'><span class="nb">Array</span> <span class="o">&lt;</span> <span class="no">Object</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Ahh&#x2026;Could we use the Hash[] constructor to convert these arrays into Hashes
that place the proper keys?
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">18</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">first_row</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">19</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">col_headers</span> <span class="o">=</span> <span class="sx">%w(id, first_name last_name)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;id,&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;first_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;last_name&quot;</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">20</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">first_row</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">col_headers</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;id,&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;first_name&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;Gordon&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;last_name&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="mi">21</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="no">Hash</span><span class="o">[</span> <span class="n">first_row</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">col_headers</span><span class="p">)</span> <span class="o">]</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>         <span class="s2">&quot;1&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;id,&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Justin&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;first_name&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;Gordon&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;last_name&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Bingo!
</p>

<p>
Now, let&#8217;s fix the array of arrays, creating an array called <code>rows</code> 
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">22</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">rows</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">[</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="o">]</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Then the grand finale!
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">24</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">rows</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="no">Hash</span><span class="o">[</span> <span class="n">col_headers</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
And sure, you can do this all on one line by inlining the <code>rows</code> variable:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">)</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="no">Hash</span><span class="o">[</span> <span class="n">col_headers</span><span class="o">.</span><span class="n">zip</span><span class="p">(</span><span class="n">row</span><span class="p">)</span> <span class="o">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Using headers option in CSV?</h2>
<div class="outline-text-2" id="text-3">
<p>
Well, you&#8217;d think that you could just pass the headers to the <code>CSV.parse</code>, but
that doesn&#8217;t work:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">12</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="n">output</span> <span class="ss">error</span><span class="p">:</span> <span class="c1">#&lt;NoMethodError: undefined method `table&#39; for #&lt;Object:0x007fdbfc8d5588&gt;&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Well, what&#8217;s the doc?
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">13</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="p">?</span> <span class="no">CSV</span><span class="o">.</span><span class="n">parse</span>
</span><span class='line'>
</span><span class='line'><span class="ss">From</span><span class="p">:</span> <span class="sr">/Users/</span><span class="n">justin</span><span class="o">/.</span><span class="n">rvm</span><span class="o">/</span><span class="n">rubies</span><span class="o">/</span><span class="n">ruby</span><span class="o">-</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">2</span><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">2</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="n">csv</span><span class="o">.</span><span class="n">rb</span> <span class="err">@</span> <span class="n">line</span> <span class="mi">1278</span><span class="p">:</span>
</span><span class='line'><span class="ss">Owner</span><span class="p">:</span> <span class="c1">#&lt;Class:CSV&gt;</span>
</span><span class='line'><span class="ss">Visibility</span><span class="p">:</span> <span class="kp">public</span>
</span><span class='line'><span class="ss">Signature</span><span class="p">:</span> <span class="n">parse</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">block</span><span class="p">)</span>
</span><span class='line'><span class="no">Number</span> <span class="n">of</span> <span class="ss">lines</span><span class="p">:</span> <span class="mi">11</span>
</span><span class='line'>
</span><span class='line'><span class="ss">:call</span><span class="o">-</span><span class="ss">seq</span><span class="p">:</span>
</span><span class='line'>  <span class="n">parse</span><span class="p">(</span> <span class="n">str</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">parse</span><span class="p">(</span> <span class="n">str</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">This</span> <span class="nb">method</span> <span class="n">can</span> <span class="n">be</span> <span class="n">used</span> <span class="n">to</span> <span class="n">easily</span> <span class="n">parse</span> <span class="no">CSV</span> <span class="n">out</span> <span class="n">of</span> <span class="n">a</span> <span class="nb">String</span><span class="o">.</span>  <span class="no">You</span> <span class="n">may</span> <span class="n">either</span>
</span><span class='line'><span class="n">provide</span> <span class="n">a</span> <span class="n">block</span> <span class="n">which</span> <span class="n">will</span> <span class="n">be</span> <span class="n">called</span> <span class="n">with</span> <span class="n">each</span> <span class="n">row</span> <span class="n">of</span> <span class="n">the</span> <span class="nb">String</span> <span class="k">in</span> <span class="n">turn</span><span class="p">,</span>
</span><span class='line'><span class="ow">or</span> <span class="n">just</span> <span class="n">use</span> <span class="n">the</span> <span class="n">returned</span> <span class="nb">Array</span> <span class="n">of</span> <span class="no">Arrays</span> <span class="p">(</span><span class="k">when</span> <span class="n">no</span> <span class="n">block</span> <span class="n">is</span> <span class="n">given</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">You</span> <span class="n">pass</span> <span class="n">your</span> <span class="n">str</span> <span class="n">to</span> <span class="n">read</span> <span class="n">from</span><span class="p">,</span> <span class="ow">and</span> <span class="n">an</span> <span class="n">optional</span> <span class="n">options</span> <span class="no">Hash</span> <span class="n">containing</span>
</span><span class='line'><span class="n">anything</span> <span class="ss">CSV</span><span class="p">:</span><span class="ss">:new</span><span class="p">()</span> <span class="n">understands</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Hmmm&#x2026;seems that passing the <code>headers</code> should have worked.
</p>

<p>
The <a href="http://ruby-doc.org/stdlib-2.1.2/libdoc/csv/rdoc/CSV.html#method-c-new">CSV docs clearly state</a> that the initialize method takes an option <code>:headers</code>
</p>

<blockquote>
<p>
:headers
If set to :first_row or true, the initial row of the CSV file will be treated as
a row of headers. If set to an Array, the contents will be used as the headers.
If set to a String, the String is run through a call of ::parse_line with the
same :col_sep, :row_sep, and :quote_char as this instance to produce an Array of
headers. This setting causes #shift to return rows as CSV::Row objects instead
of Arrays and #read to return CSV::Table objects instead of an Array of Arrays.
</p>
</blockquote>

<p>
So, what can we call on a new CSV object? Let&#8217;s list the methods.
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">25</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="no">CSV</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span>
</span><span class='line'><span class="no">Enumerable</span><span class="c1">#methods:</span>
</span><span class='line'>  <span class="n">all?</span>            <span class="n">count</span>       <span class="n">each_entry</span>        <span class="n">find</span>        <span class="n">group_by</span>  <span class="n">map</span>      <span class="n">minmax</span>     <span class="n">reject</span>        <span class="n">sum</span>         <span class="n">to_table</span>
</span><span class='line'>  <span class="n">any?</span>            <span class="n">cycle</span>       <span class="n">each_slice</span>        <span class="n">find_all</span>    <span class="kp">include</span><span class="p">?</span>  <span class="n">max</span>      <span class="n">minmax_by</span>  <span class="n">reverse_each</span>  <span class="n">take</span>        <span class="n">to_text_table</span>
</span><span class='line'>  <span class="n">as_json</span>         <span class="n">detect</span>      <span class="n">each_with_index</span>   <span class="n">find_index</span>  <span class="n">index_by</span>  <span class="n">max_by</span>   <span class="n">none?</span>      <span class="nb">select</span>        <span class="n">take_while</span>  <span class="n">zip</span>
</span><span class='line'>  <span class="n">chunk</span>           <span class="n">drop</span>        <span class="n">each_with_object</span>  <span class="n">first</span>       <span class="n">inject</span>    <span class="n">member?</span>  <span class="n">one?</span>       <span class="n">slice_before</span>  <span class="nb">to_a</span>
</span><span class='line'>  <span class="n">collect</span>         <span class="n">drop_while</span>  <span class="n">entries</span>           <span class="n">flat_map</span>    <span class="n">lazy</span>      <span class="n">min</span>      <span class="n">partition</span>  <span class="n">sort</span>          <span class="n">to_h</span>
</span><span class='line'>  <span class="n">collect_concat</span>  <span class="n">each_cons</span>   <span class="n">exclude?</span>          <span class="n">grep</span>        <span class="n">many?</span>     <span class="n">min_by</span>   <span class="n">reduce</span>     <span class="n">sort_by</span>       <span class="n">to_set</span>
</span><span class='line'><span class="no">CSV</span><span class="c1">#methods:</span>
</span><span class='line'>  <span class="o">&lt;&lt;</span>           <span class="n">col_sep</span>            <span class="n">fcntl</span>             <span class="n">header_convert</span>     <span class="n">lineno</span>      <span class="nb">readline</span>         <span class="n">skip_blanks?</span>  <span class="n">to_io</span>
</span><span class='line'>  <span class="n">add_row</span>      <span class="n">convert</span>            <span class="n">field_size_limit</span>  <span class="n">header_converters</span>  <span class="n">path</span>        <span class="nb">readlines</span>        <span class="n">skip_lines</span>    <span class="n">truncate</span>
</span><span class='line'>  <span class="n">binmode</span>      <span class="n">converters</span>         <span class="n">fileno</span>            <span class="n">header_row?</span>        <span class="n">pid</span>         <span class="n">reopen</span>           <span class="n">stat</span>          <span class="n">tty?</span>
</span><span class='line'>  <span class="n">binmode?</span>     <span class="n">each</span>               <span class="n">flock</span>             <span class="n">headers</span>            <span class="n">pos</span>         <span class="n">return_headers?</span>  <span class="n">string</span>        <span class="n">unconverted_fields?</span>
</span><span class='line'>  <span class="n">close</span>        <span class="n">encoding</span>           <span class="n">flush</span>             <span class="nb">inspect</span>            <span class="n">pos</span><span class="o">=</span>        <span class="n">rewind</span>           <span class="n">sync</span>          <span class="n">write_headers?</span>
</span><span class='line'>  <span class="n">close_read</span>   <span class="n">eof</span>                <span class="n">force_quotes?</span>     <span class="n">internal_encoding</span>  <span class="nb">puts</span>        <span class="n">row_sep</span>          <span class="n">sync</span><span class="o">=</span>
</span><span class='line'>  <span class="n">close_write</span>  <span class="n">eof?</span>               <span class="n">fsync</span>             <span class="n">ioctl</span>              <span class="n">quote_char</span>  <span class="n">seek</span>             <span class="n">tell</span>
</span><span class='line'>  <span class="n">closed?</span>      <span class="n">external_encoding</span>  <span class="nb">gets</span>              <span class="n">isatty</span>             <span class="n">read</span>        <span class="n">shift</span>            <span class="n">to_i</span>
</span><span class='line'><span class="n">instance</span> <span class="ss">variables</span><span class="p">:</span>
</span><span class='line'>  <span class="vi">@col_sep</span>     <span class="vi">@field_size_limit</span>   <span class="vi">@headers</span>  <span class="vi">@parsers</span>     <span class="vi">@re_chars</span>        <span class="vi">@row_sep</span>      <span class="vi">@unconverted_fields</span>
</span><span class='line'>  <span class="vi">@converters</span>  <span class="vi">@force_quotes</span>       <span class="vi">@io</span>       <span class="vi">@quote</span>       <span class="vi">@re_esc</span>          <span class="vi">@skip_blanks</span>  <span class="vi">@use_headers</span>
</span><span class='line'>  <span class="vi">@encoding</span>    <span class="vi">@header_converters</span>  <span class="vi">@lineno</span>   <span class="vi">@quote_char</span>  <span class="vi">@return_headers</span>  <span class="vi">@skip_lines</span>   <span class="vi">@write_headers</span>
</span></code></pre></td></tr></table></div></figure>

<p>
How about this:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">14</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span><span class="o">.</span><span class="n">to_a</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="c1">#&lt;CSV::Row &quot;id,&quot;:&quot;1&quot; &quot;first_name&quot;:&quot;Justin&quot; &quot;last_name&quot;:&quot;Gordon&quot;&gt;,</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="c1">#&lt;CSV::Row &quot;id,&quot;:&quot;2&quot; &quot;first_name&quot;:&quot;Tender&quot; &quot;last_name&quot;:&quot;Love&quot;&gt;</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Well, that&#8217;s getting closer.
</p>

<p>
How about if I just map those rows with a <code>to_hash</code>?
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">16</span><span class="o">]</span> <span class="p">(</span><span class="n">pry</span><span class="p">)</span> <span class="ss">main</span><span class="p">:</span> <span class="mi">0</span><span class="o">&gt;</span> <span class="n">csv</span> <span class="o">=</span> <span class="no">CSV</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">csv_string</span><span class="p">,</span> <span class="ss">headers</span><span class="p">:</span> <span class="n">col_headers</span><span class="p">)</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_hash</span><span class="p">)</span>
</span><span class='line'><span class="o">[</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;1&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Justin&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Gordon&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="p">{</span>
</span><span class='line'>               <span class="s2">&quot;id,&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;2&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="s2">&quot;first_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Tender&quot;</span><span class="p">,</span>
</span><span class='line'>         <span class="s2">&quot;last_name&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Love&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Bingo!
</p>

<p>
I hope you enjoyed this!
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Gem Upgrading Tips and Strategies]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/09/13/upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque/"/>
    <updated>2014-09-13T17:04:38-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/09/13/upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque</id>
    <content type="html"><![CDATA[<p>
What are the best-practices for upgrading gems to newer versions? What sort of
tips and techniques can save time and headaches? 
</p>

<p>
I built this guide based on my real-world experiences over years of gem
migrations, including a recent upgrade to Rails 4.1, RSpec 3.0, and Twitter
Bootstrap 3.2. There are some more specific examples of errors you might
encounter at this article on the Rails on Maui blog: <a href="http://railsonmaui-octopress.dev/blog/2014/09/12/specific-issues-upgrading-gems-to-rails-4-dot-1-and-rspec-3/">Specific Issues Upgrading Gems to Rails 4.1, RSpec 3, and Twitter Bootstrap 3.2</a>. 
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Why Update?</h2>
<div class="outline-text-2" id="text-1">
<p>
Here&#8217;s my favorite reasons for keeping gems relatively current:
</p>

<ol class="org-ol">
<li>If you work on several projects, keeping the gems and ruby version consistent
makes your coding more productive as you don&#8217;t have to keep adjusting for
which version is which. Web searches tend to find relatively recent versions
first. It&#8217;s relatively annoying to be yak shaving issues that turn out to be
&#8220;oh, that doesn&#8217;t work in that older version of Rails&#8221;.
</li>
<li>Recent versions of gems will have fixes for bugs and security issues, in
addition to new features. With popular open source projects, new bugs are
quickly discovered and fixed.
</li>
<li>Updates are much easier if you stay relatively current. I.e., it&#8217;s much
easier to update from Rails 4.0 to Rails 4.1 than to go from Rails 3.0 to
Rails 4.1.
</li>
</ol>

<p>
That being said, recent versions can have new bugs, so it&#8217;s best to avoid
versions that are unreleased or that haven&#8217;t aged at least a few weeks.
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">Some Gems Will Be Way More Difficult to Update</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Large libraries, like Rails, RSpec, Twitter Bootstrap, etc. are going to take
more elbow grease to update. Typically if a major version number is updating,
like Rails 3.x to 4.x and RSpec 2.x to 3.x, that&#8217;s going to require lots of code
changes. Semantic versioning also comes into play. Going from Rails 3.x to Rails
4.x is more difficult than Rails 4.0 to Rails 4.1. There&#8217;s a similar story with
RSpec 2.x to 2.99, compared to going to RSpec 3.0.
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Techniques for Smoother Gem Upgrades</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Locking Gem Versions</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Unless you have a good reason, don&#8217;t lock a gem to a specific version as that
makes updating gems more difficult. In general, consider only locking the major
Rails gems, such as rails, RSpec, and bootstrap-sass, as these are the ones that
will likely have more involved upgrades.
</p>
</div>
</div>

<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Don&#8217;t Upgrade Major Libraries Too Soon</h3>
<div class="outline-text-3" id="text-2-2">
</div><div id="outline-container-sec-2-2-1" class="outline-4">
<h4 id="sec-2-2-1">3 Reasons to wait a bit before gem updates:</h4>
<div class="outline-text-4" id="text-2-2-1">
<ol class="org-ol">
<li><b>Dependencies among gem libraries</b> are not yet resolved. I had tried
upgrading to RSpec 3 and Rails 4.1 a couple months ago, but it was
apparent that I had to fix to many other gems to get them to work with <code>RSpec
   3</code>. Thus, I retreated back to RSpec 2.99 for a while. Now, as of August, 2014,
the gem ecosystem was ripe to move to RSpec 3.0. So unless you have a good
reason, it&#8217;s best to wait maybe a couple of months after major upgrades are
released before migrating.
</li>
<li><b>Bugs</b> may be lurking in changed code. If you wait a bit, the early adopters
will find the bugs, saving you time and frustration. The more popular a gem,
the faster it will be put to rigorous use.
</li>
<li>*Security*/ problems may have been introduced. This is pretty much a special
case of bugs, except that this a possibility of a malicious security change.
If you wait a bit, hopefully somebody else will discover the issue first.
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">Don&#8217;t Use Guard, Zeus, Spring, Spork, Etc. When Upgrading</h3>
<div class="outline-text-3" id="text-2-3">
<p>
Tools that speed up Rails like Zeus and Spring are awesome productivity
enhancers, <b>except</b> when upgrading gems. I found that they <i>sometimes</i> correctly
reloaded new versions of gems. That means massive frustration when they are not
picking up the gems you actually have specified. The corollary to this is to run
your tests using plain <code>rspec</code> rather than the recommended ways for speeding up
testing, such as the <code>parallel_tests</code> gem..
</p>

<p>
It&#8217;s not necessary to introduce the added complexity of the test accelerators
when doing major library updates. Once you&#8217;ve updated your gems, then try out
your favorite techniques for speeding up running tests. I&#8217;ve learned the hard
way on this one. The <code>pgr</code> and <code>pgk</code> scripts below are awesome for ensuring that
pre-loaders are <i><b>NOT</b></i> running.
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pgr<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for </span>x in spring rails phantomjs zeus; <span class="k">do </span>
</span><span class='line'><span class="k">    </span>pgrep -fl <span class="nv">$x</span>;
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>pgk<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for </span>x in spring rails phantomjs zeus; <span class="k">do </span>
</span><span class='line'><span class="k">    </span>pkill -fl <span class="nv">$x</span>;
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">Tests: Try to Keep and Immediately Get Tests Passing</h3>
<div class="outline-text-3" id="text-2-4">
<p>
There are a lot of discussions about the value or lack of for an emphasis on Test-Driven Development (TDD).
However, one thing that&#8217;s indisputable is that <i><b>having a large library of tests is absolutely helpful for upgrading your gems</b></i>.
</p>

<p>
Naturally, it&#8217;s an iterative process to get tests passing when updating gems.
First, make sure your tests suite is passing.
</p>

<p>
You can try updating the gems one by one until you get a test failure. Then the
issue becomes one of figuring out which related gems you might want to update to
fix the test failure.
</p>

<p>
If you don&#8217;t have good tests coverage, a great place to start is with
integration tests that do the basics of your app. At least you&#8217;ll be able to
quickly verify a good chunk of your app can at least navigate the &#8220;happy path&#8221;
as you iterate updating your gems.
</p>
</div>
</div>
<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5">Alternate Big or Baby Steps</h3>
<div class="outline-text-3" id="text-2-5">
<p>
If you&#8217;ve updated gems recently, sometimes you can run <code>bundle update</code> and
everything works great. Recently, that strategy failed miserably when I tried
going from Rails 4.0 with RSpec 2.2 to Rails 4.1 and RSpec 3. An eariler attempt
shortly after the releases of Rails 4.1 and RSpec 3 clearly showed that many
dependent gems would have to get updated. A few months later, I still had many
issues with trying to update too much at once.
</p>

<p>
When this happens, take small steps and kept tests passing. I.e., don&#8217;t do a
<code>bundle update</code> without specifying which gems to update. You might update 60
gems at once! And then when tests fail, you won&#8217;t be able to easily decipher
which dependency is the problem. Specify which gems to update by running the
command:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle update gem1 gem2 etc
</span></code></pre></td></tr></table></div></figure>

<p>
Then after updating a few gems, run <code>rspec</code> and verify your tests pass.
</p>

<p>
<b>Then commit your changes.</b> Consider putting a summary of how many tests pass
and how long it takes. The length of time is useful in case some change greatly
increases test run time. Or if you notice run time or the number of tests
dramatically decrease. Plus, this ensures you ran the test before committing!
</p>

<p>
On a related note, you can see which gems are outdated with this command:
<code>bundle outdated</code>.
</p>

<!-- more -->
</div>
</div>

<div id="outline-container-sec-2-6" class="outline-3">
<h3 id="sec-2-6">Try bundle update</h3>
<div class="outline-text-3" id="text-2-6">
<p>
Remember I told you not to do a <code>bundle update</code>? Once you&#8217;re getting closer to
finishing your gem updates, all big gems are updated, and all tests are passing,
and deprecation warnings are addressed, then it&#8217;s time to run <code>bundle update</code>
and then run <code>rspec</code> to see if your tests pass. If you don&#8217;t have adequate
tests, then be ready to do some adequate manual testing. Even if you have lots
of tests, you still need to do manual testing if you upgrade a UI library such
as <code>sass-bootstrap</code>. Besides testings, check the bundler output or the diff of
your <code>Gemfile.lock</code> to see what got updated.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Troubleshooting Gem Upgrades</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Read Error Messages Carefully and then search Google and Github Issues</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Too often Ruby developers will blindly copy-paste their error messages into a
Google search without really reading the console output carefully. This can
actually waste more time, since thinking about the problem for a moment can
often give you a solution without Google, or you&#8217;ll write a better search query.
If you don&#8217;t find what you need on Google and you have an idea what gem is
causing issues, the next place to search is the issues page for the gem&#8217;s Github
repository.
</p>

<p>
Remember to do these 2 types of searches rather than spending too much time
inserting print statements or launching the debugger! If you don&#8217;t get any
search hits, then typically you have some problem in app customizations (see
below).
</p>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Visit the Gem Repository on Github</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Some essential places to look at when upgrading gems are:
</p>
<ol class="org-ol">
<li>README.md file (shown on the main page of repository). Some projects might
have a NEWS.md or CHANGELOG.md file.
</li>
<li>The Github issues list for a gem (and search here)
</li>
<li>The Github commit history for a gem, sometimes switching branches.
</li>
</ol>

<p>
Errors or deprecation messages can come from compatibility issues among your
gems. The RSpec 3 upgrade had many such issues. If you&#8217;re having an upgrade
issue, then a concise, detailed post of a new issue typically results in a very
quick response.
</p>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">Try an RC Version on RubyGems</h3>
<div class="outline-text-3" id="text-3-3">
<p>
Sometimes the fix you need has already been released to RubyGems in an RC
version (RC means Release Candidate). <code>bundle update &lt;gem&gt;</code> seems to not pick RC
versions. You have to specify these manually. I search for gems on RubyGems so
often that I created a Chrome search shortcut. Here&#8217;s an example of an RC
version gem that I&#8217;m currently using:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;simple_form&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 3.1.0.rc2&#39;</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4">Try a Github Gem Version Rather Than a RubyGems Version</h3>
<div class="outline-text-3" id="text-3-4">
<p>
Sometimes what you need has not been shared with RubyGems, yet the issue has
received commits on Github. In that case, you can use the Github version of a gem.
This might be on a specific branch of a gem, or even another user&#8217;s fork of a
gem.
</p>

<p>
For example, this image shows that the last version bump of the <code>gon</code> gem is
behind several commits.
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-11-upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque/gon-commits-not-in-gem.jpg">
</p>

<p>
If you needed those commits post gem release, here&#8217;s an example of the syntax to
specify the very-latest version of a gem (the tip of the master branch):
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;gon&#39;</span><span class="p">,</span> <span class="ss">github</span><span class="p">:</span> <span class="s2">&quot;gazay/gon&quot;</span><span class="p">,</span> <span class="ss">branch</span><span class="p">:</span> <span class="s2">&quot;master&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Sometimes what you need is something less than the most current version, or a
specific branch, or a fork of the gem.
</p>
</div>
</div>
<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5">Consider Forking a Gem</h3>
<div class="outline-text-3" id="text-3-5">
<p>
Sometimes you need to fork a gem for some changes. If you&#8217;ve never done this,
it&#8217;s a <b>very worthwhile thing to try out</b>, and it&#8217;s easy! For example, if you
had wanted to update to rspec 3 sooner than later and didn&#8217;t want to see tons of
deprecation messages, then your only option was to fork the gems that had the
deprecated syntax. Once you&#8217;ve verified the validity of your changes, consider
submitting a pull request. Here&#8217;s an example of a <a href="https://github.com/justin808/zeus-parallel_tests/commit/ccd7367d4f33ae8940a4205a164df714ccfcb42c">fork and commit of the
zeus-parallel_tests gem that loosened a gem dependency</a>.
</p>

<p>
You should typically prefer a rubygems version of a gem rather than a github
version. Thus, after some months, you should try to remove any previously
necessary github references in your Gemfile.
</p>
</div>
</div>

<div id="outline-container-sec-3-6" class="outline-3">
<h3 id="sec-3-6">Order of Gems in your Gemfile Can Matter</h3>
<div class="outline-text-3" id="text-3-6">
<p>
I ran into a case where including rspec-instafail before rspec resulted in zeus
failing due to <code>rspec-instafail</code> failing to recognize that I was using rspec 3.
Simply placing <code>rspec-instafail</code> after loading <code>rspec</code> in the Gemfile fixed that
issue.
</p>

<p>
I had a clue that was the issue due to this stack dump. Note how the bundler is
loading rspec-instafail, and when I looked at the source code, I could see why
file <code>rspec_2.rb</code> was being loaded (2nd line of the below stack dump)
</p>

<pre class="example">
zeus test                                                                                                                                                                                                 ✹ ✚ ✭ [15:37:26]
/Users/justin/.rvm/gems/ruby-2.1.2@bpos/gems/rspec-core-3.0.3/lib/rspec/core/formatters/progress_formatter.rb:1:in `&lt;top (required)&gt;': uninitialized constant RSpec::Support (NameError)
	from /Users/justin/.rvm/gems/ruby-2.1.2@bpos/gems/rspec-instafail-0.2.5/lib/rspec/instafail/rspec_2.rb:1:in `&lt;top (required)&gt;'
	from /Users/justin/.rvm/gems/ruby-2.1.2@bpos/gems/rspec-instafail-0.2.5/lib/rspec/instafail.rb:11:in `&lt;module:RSpec&gt;'
	from /Users/justin/.rvm/gems/ruby-2.1.2@bpos/gems/rspec-instafail-0.2.5/lib/rspec/instafail.rb:1:in `&lt;top (required)&gt;'
	from /Users/justin/.rvm/gems/ruby-2.1.2@global/gems/bundler-1.6.2/lib/bundler/runtime.rb:85:in `require'
	from /Users/justin/.rvm/gems/ruby-2.1.2@global/gems/bundler-1.6.2/lib/bundler/runtime.rb:85:in `rescue in block in require'
	from /Users/justin/.rvm/gems/ruby-2.1.2@global/gems/bundler-1.6.2/lib/bundler/runtime.rb:68:in `block in require'
	from /Users/justin/.rvm/gems/ruby-2.1.2@global/gems/bundler-1.6.2/lib/bundler/runtime.rb:61:in `each'
	from /Users/justin/.rvm/gems/ruby-2.1.2@global/gems/bundler-1.6.2/lib/bundler/runtime.rb:61:in `require'
	from /Users/justin/.rvm/gems/ruby-2.1.2@global/gems/bundler-1.6.2/lib/bundler.rb:132:in `require'
	from /Users/justin/.rvm/gems/ruby-2.1.2@bpos/gems/zeus-0.13.3/lib/zeus/rails.rb:162:in `test_environment'
	from /Users/justin/.rvm/gems/ruby-2.1.2@bpos/gems/zeus-0.13.3/lib/zeus.rb:166:in `run_action'
  ...
	from -e:1:in `&lt;main&gt;'
</pre>
</div>
</div>

<div id="outline-container-sec-3-7" class="outline-3">
<h3 id="sec-3-7">Evaluate Customizations</h3>
<div class="outline-text-3" id="text-3-7">
<p>
In general, when doing relatively major gem upgrades, you really need to
evaluate customizations to these places. Typically, deprecation messages will
tell you which customizations to remove or alter. Sometimes, you&#8217;ve monkey
patched some gem to work around some issue, and this would be the place where
you&#8217;d do that (and forget that you did it!).
</p>
<ol class="org-ol">
<li>Any initializers in the <code>config/initializers</code> directory. Review each file
there.
</li>
<li>Any customizations in your environment files in the <code>config/environments</code>
directory, such as <code>test.rb</code>, <code>development.rb</code>.
</li>
<li>Any customizations for running specs:
a. <code>spec/spec_helper.rb</code>
b. Each file in the <code>spec/support</code> directory.
</li>
</ol>
</div>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Example of Next Steps when Upgrading a Gem</h2>
<div class="outline-text-2" id="text-4">
<p>
Here&#8217;s an example of where updating related gems help.
</p>

<p>
<code>bundle update capybara</code> fixed the following error
</p>

<pre class="example">
--------------------------------------------------------------------------------
Capybara::RSpecMatchers::HaveText implements a legacy RSpec matcher
protocol. For the current protocol you should expose the failure messages
via the `failure_message` and `failure_message_when_negated` methods.
--------------------------------------------------------------------------------
</pre>

<p>
The final error I got was this one, from <code>cancan</code>.
</p>

<pre class="example">
Deprecation Warnings:

`failure_message_for_should_not` is deprecated. Use `failure_message_when_negated` instead. Called from /Users/justin/.rvm/gems/ruby-2.1.2@bpos/gems/cancan-1.6.10/lib/cancan/matchers.rb:11:in `block in &lt;top (required)&gt;'.

`failure_message_for_should` is deprecated. Use `failure_message` instead. Called from /Users/justin/.rvm/gems/ruby-2.1.2@bpos/gems/cancan-1.6.10/lib/cancan/matchers.rb:7:in `block in &lt;top (required)&gt;'.
</pre>

<p>
A quick google search reveals that <code>cancancan</code> fixes the issue:
<img src="http://www.railsonmaui.com//images/2014-08-11-upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque/cancan.jpg">
</p>

<p>
Once I got all tests passing, I tried to update to Rails 4.1, but ran into this
issue:
</p>

<pre class="example">
bundle update rails                                                                                                                                                                                             ✹ ✭ [20:31:38]
Fetching source index from https://rubygems.org/
Resolving dependencies........................
Bundler could not find compatible versions for gem "activemodel":
  In Gemfile:
    simple_form (&gt;= 0) ruby depends on
      activemodel (&lt; 4.1, &gt;= 4.0.0) ruby

    rails (~&gt; 4.1) ruby depends on
      activemodel (4.1.0)
</pre>

<p>
I verify I&#8217;m on the current maximum GA version of simple_form, but I find that
there&#8217;s an RC version, so I specify that in the gemfile. It&#8217;s important to note
that &#8220;bundle update&#8221; will tend not to pull in RC versions of gems, which you
sometimes need after major libraries are upgraded.
</p>

<p>
In <code>Gemfile</code>
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 4.1&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;simple_form&#39;</span><span class="p">,</span> <span class="s1">&#39;&gt;= 3.1.0.rc2&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<pre class="example">
&gt; bundle update rails simple_form
Using rails 4.1.4 (was 4.0.8)
Installing simple_form 3.1.0.rc2 (was 3.0.1)
Your bundle is updated!
</pre>

<p>
After the 4.1 upgrade, I addressed a number of deprecation warnings.
</p>

<pre class="example">
DEPRECATION WARNING: Implicit join references were removed with Rails 4.1.Make sure to remove this configuration because it does nothing. (called from block in tsort_each at /Users/justin/.rvm/rubies/ruby-2.1.2/lib/ruby/2.1.0/tsort.rb:226)
</pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">active_record</span><span class="o">.</span><span class="n">disable_implicit_join_references</span> <span class="o">=</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Then I got this warning with a full stack dump.
</p>

<pre class="example">
Warning: you should require 'minitest/autorun' instead.
Warning: or add 'gem "minitest"' before 'require "minitest/autorun"'
From:
  /Users/justin/.rvm/gems/ruby-2.1.2@bpos/gems/activesupport-4.1.4/lib/active_support/dependencies.rb:247:in `require'
</pre>

<p>
The stack dump was useless, but the search for error message on Google found
<a href="https://github.com/thoughtbot/shoulda-matchers/issues/408">this</a> indicating that the issue had something to do with <code>shoulda-matchers</code>. A
check of my gem version revealed that my gem version was not current.
</p>

<pre class="example">
&gt; bundle update shoulda-matchers
Installing shoulda-matchers 2.6.2 (was 2.5.0)
</pre>

<p>
And that fixed that issue!
</p>

<p>
Thanks to Mike Perham, Ed Roman, Ben Ward, and Greg Lazarev for reviewing drafts of this article.
</p>

<p>
Please let me know if this article helped you or if I missed anything!
</p>

<p>
Aloha,
</p>

<p>
Justin
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Specific Issues Upgrading Gems to Rails 4.1, RSpec 3, and Twitter Bootstrap 3.2]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/09/12/specific-issues-upgrading-gems-to-rails-4-dot-1-and-rspec-3/"/>
    <updated>2014-09-12T11:20:58-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/09/12/specific-issues-upgrading-gems-to-rails-4-dot-1-and-rspec-3</id>
    <content type="html"><![CDATA[<p>
This article describes some tougher issues I faced when upgrading to Rails 4.1,
Twitter Bootstrap 3.2 and RSpec 3. This is a companion to my related article on <a href="https://hackhands.com/tips-strategies-upgrading-ruby-gems/">Rails Gem Upgrading Tips and Strategies</a>.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Upgrade Links</h2>
<div class="outline-text-2" id="text-1">
<p>
If you&#8217;re upgrading these specific gems, here&#8217;s the must-see upgrade links.
</p>
<ol class="org-ol">
<li>Rails 4.1: <a href="http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html">A Guide for Upgrading Ruby on Rails</a>.
</li>
<li><a href="https://relishapp.com/rspec/docs/upgrade">RSpec 2 to RSpec 3</a>.
</li>
<li>Twitter Bootstrap: <a href="http://getbootstrap.com/migration/">Migrating to v3.x</a> is essential if you&#8217;re going from 2.x to 3.x.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Troubleshooting with RubyMine &#8220;Find In Path&#8221; and the Debugger</h2>
<div class="outline-text-2" id="text-2">
<p>
After making the require code changes to address the deprecation errors going to
rspec 3, I ran into the below obscure error. This one really stumped me, due to
the fact that the stack trace did not give me a specific line causing the error,
and when I ran the tests individually, I didn&#8217;t see any errors.
</p>

<pre class="example">
Failure/Error: Unable to find matching line from backtrace
PG::ConnectionBad: connection is closed
</pre>

<p>
Here&#8217;s the stack trace:
</p>
<pre class="example">
Failure/Error: Unable to find matching line from backtrace
PG::ConnectionBad:
  connection is closed
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/postgresql_adapter.rb:589:in `reset'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/postgresql_adapter.rb:589:in `reconnect!'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/abstract_adapter.rb:377:in `verify!'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/abstract/connection_pool.rb:458:in `block in checkout_and_verify'
# .rvm/gems/ruby-2.1.2@bpos/gems/activesupport-4.0.8/lib/active_support/callbacks.rb:373:in `_run__2436983933572130156__checkout__callbacks'
# .rvm/gems/ruby-2.1.2@bpos/gems/activesupport-4.0.8/lib/active_support/callbacks.rb:80:in `run_callbacks'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/abstract/connection_pool.rb:457:in `checkout_and_verify'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/abstract/connection_pool.rb:358:in `block in checkout'
# .rvm/rubies/ruby-2.1.2/lib/ruby/2.1.0/monitor.rb:211:in `mon_synchronize'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/abstract/connection_pool.rb:355:in `checkout'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/abstract/connection_pool.rb:265:in `block in connection'
# .rvm/rubies/ruby-2.1.2/lib/ruby/2.1.0/monitor.rb:211:in `mon_synchronize'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/abstract/connection_pool.rb:264:in `connection'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_adapters/abstract/connection_pool.rb:546:in `retrieve_connection'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_handling.rb:79:in `retrieve_connection'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/connection_handling.rb:53:in `connection'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/fixtures.rb:450:in `create_fixtures'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/fixtures.rb:899:in `load_fixtures'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/fixtures.rb:870:in `setup_fixtures'
# .rvm/gems/ruby-2.1.2@bpos/gems/activerecord-4.0.8/lib/active_record/fixtures.rb:712:in `before_setup'
# .rvm/gems/ruby-2.1.2@bpos/gems/rspec-rails-3.0.2/lib/rspec/rails/adapters.rb:71:in `block (2 levels) in &lt;module:MinitestLifecycleAdapter&gt;'
...
</pre>

<p>
The error was happening in a test that used <code>resque_spec</code>. After much searching,
I began to suspect that some customization or optimization caused the issue.
</p>
</div>

<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">RubyMine Find in Path</h3>
<div class="outline-text-3" id="text-2-1">
<p>
RubyMine&#8217;s Find in Path, searching Project and Libraries, is extremely useful to
getting more context around an error message. In this case, RubyMine found the
error message in a C file.
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-11-upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque/find-error-1.jpg">
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-11-upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque/find-error-2.jpg">
</p>

<p>
Here&#8217;s the C code containing the error message. The Ruby stack trace did not go
this far:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Fetch the data pointer and check it for sanity.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="n">PGconn</span> <span class="o">*</span>
</span><span class='line'><span class="nf">pg_get_pgconn</span><span class="p">(</span> <span class="n">VALUE</span> <span class="n">self</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">PGconn</span> <span class="o">*</span><span class="n">conn</span> <span class="o">=</span> <span class="n">pgconn_check</span><span class="p">(</span> <span class="n">self</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">conn</span> <span class="p">)</span>
</span><span class='line'>    <span class="n">rb_raise</span><span class="p">(</span> <span class="n">rb_eConnectionBad</span><span class="p">,</span> <span class="s">&quot;connection is closed&quot;</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">conn</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>
And this is where in the Ruby Code that came from the stack trace:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Disconnects from the database if already connected, and establishes a</span>
</span><span class='line'><span class="c1"># new connection with the database. Implementors should call super if they</span>
</span><span class='line'><span class="c1"># override the default implementation.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">reconnect!</span>
</span><span class='line'>  <span class="n">clear_cache!</span>
</span><span class='line'>  <span class="n">reset_transaction</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">RubyMine: Sometimes the Debugger Helps!</h3>
<div class="outline-text-3" id="text-2-2">
<p>
In the really troubling issue I saw below, I put in breakpoints in the
connection adapter gem. I correctly guessed the cause of the error was
<code>disconnect!</code> rather than the <code>reconnect!</code>
</p>

<p>
Here&#8217;s a few images that show how the debugger really helped me figure out the
obscure &#8220;connection is closed&#8221; error:
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-11-upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque/debugger-1.jpg">
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-11-upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque/debugger-2.jpg">
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-11-upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque/debugger-3.jpg">
</p>

<p>
That is what led me to try out removing the <code>heroku-resque</code> gem, as I noticed
that was what was closing the connections in my test runs. Removing that gem
fixed my rspec errors with the upgrades.
</p>

<p>
Note, an alternative to using breakpoints in RubyMine would have been to put in
a <code>puts caller</code> in the suspect methods of the libraries. However, one would have
to remember to remove that later! I think the debugger was a good pick for this
issue. If you don&#8217;t use RubyMine, you might try the ruby debugger or the pry gem.
</p>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Rails 4.1 Errors</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">shuffle! removed from ActiveRecord::Relation</h3>
<div class="outline-text-3" id="text-3-1">
<pre class="example">
NoMethodError:
  undefined method `shuffle!' for #&lt;ActiveRecord::Relation []&gt;
</pre>

<p>
The fix for that is to convert the relation to an array before calling shuffle.
Naturally, you only want to do this with a limited set of data.
</p>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Flash changes</h3>
<div class="outline-text-3" id="text-3-2">
<p>
This one bit me:
<a href="http://guides.rubyonrails.org/upgrading_ruby_on_rails.html#flash-structure-changes">http://guides.rubyonrails.org/upgrading_ruby_on_rails.html#flash-structure-changes</a>
</p>

<p>
I was comparing symbols when converting from the flash type to the bootstrap
class. Since the keys are always normalized to strings, I changed the code to
compare to strings.
</p>

<p>
<i><b>It&#8217;s a good idea to review all changes in that the <a href="http://guides.rubyonrails.org/upgrading_ruby_on_rails.html">Rails Upgrade Guide</a></b></i>
</p>

<p>
Here&#8217;s the method where I was previously comparing the flash type to symbols
rather than strings:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">twitterized_type</span><span class="p">(</span><span class="n">type</span><span class="p">)</span>
</span><span class='line'>  <span class="c1"># http://ruby.zigzo.com/2011/10/02/flash-messages-twitters-bootstrap-css-framework/</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">type</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;alert&quot;</span>
</span><span class='line'>      <span class="s2">&quot;warning&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;error&quot;</span>
</span><span class='line'>      <span class="s2">&quot;danger&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;notice&quot;</span>
</span><span class='line'>      <span class="s2">&quot;info&quot;</span>
</span><span class='line'>    <span class="k">when</span> <span class="s2">&quot;success&quot;</span>
</span><span class='line'>      <span class="s2">&quot;success&quot;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">type</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Upgrading Twitter Bootstrap to 3.2 from 3.0</h2>
<div class="outline-text-2" id="text-4">
<p>
I had this bit of code in my scss files from the old Twitter Bootstrap.
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="c1">// Sprite icons path</span>
</span><span class='line'><span class="c1">// -------------------------</span>
</span><span class='line'><span class="nv">$iconSpritePath</span><span class="o">:</span> <span class="nf">asset-url</span><span class="p">(</span><span class="s2">&quot;glyphicons-halflings.png&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nv">$iconWhiteSpritePath</span><span class="o">:</span> <span class="nf">asset-url</span><span class="p">(</span><span class="s2">&quot;glyphicons-halflings-white.png&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Since I&#8217;m using the new 3.2 version of <code>bootstrap-sass</code>, I needed to do the
following, per the details <a href="https://github.com/twbs/bootstrap-sass">here</a>:
</p>
<ol class="org-ol">
<li>Delete the <code>glyphicons-halflings.png</code> and <code>glyphicons-halflings-white.png</code> files.
</li>
<li>Remove the reference shown above to the $iconSpritePath
</li>
<li>Add this line to my <code>application.css.scss</code>
</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s2">&quot;bootstrap-sprockets&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

<ol class="org-ol">
<li>Add this line to the Gemfile:
</li>
</ol>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;autoprefixer-rails&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Please let me know if this article helped you or if I missed anything!
</p>

<p>
Aloha,
</p>

<p>
Justin
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fast Tests: Comparing Zeus With Spring on Rails 4.1 and RSpec 3]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/09/09/fast-tests-comparing-zeus-with-spring-on-rails-4-dot-1/"/>
    <updated>2014-09-09T17:54:42-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/09/09/fast-tests-comparing-zeus-with-spring-on-rails-4-dot-1</id>
    <content type="html"><![CDATA[<p>
What&#8217;s faster? <a href="https://github.com/burke/zeus">Zeus</a> with <a href="https://github.com/grosser/parallel_tests">Parallel Tests</a> or <a href="https://github.com/rails/spring">Spring</a>, in the context of Rails 4.1,
RSpec 3, Capybara 2.4, and PhantomJs?
</p>

<p>
<b>The bottom line is that both work almost equivalently as fast, and the biggest
difference for me concerned compatibility with the parallel_tests gem.</b> Zeus
works fine with Parallel Tests, although it makes little difference overall with
or without Zeus. Spring doesn&#8217;t work with Parallel Tests, but you can work
around this issue. So stick with Zeus if it works for you.
</p>

<p>
And regardless of using Spring or Zeus, the shell scripts provided below called
<code>pgr</code> and <code>pgk</code> are essential for quickly listing or killing Zeus, Spring,
Rails, or Phantomjs processes!
</p>

<p>
It&#8217;s also worth noting that biggest advantage of using the Zeus or Spring
pre-loaders is to save the Rails startup time. On my machine, this is about 3 to
5 seconds. That matters a lot if the test I&#8217;m focusing upon only takes a second or
two, such as when doing TDD. However, when running a whole test suite taking
minutes, 3-5 seconds can get swallowed up by other things, such as rspec-retry,
which retries failing capybara tests.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Overview</h2>
<div class="outline-text-2" id="text-1">
<p>
I&#8217;ve written about my integration testing setup: <a href="http://www.railsonmaui.com/tips/rails/capybara-phantomjs-poltergeist-rspec-rails-tips.html">Capybara, PhantomJs, Poltergeist, and Rspec Tips</a>. For a while, I&#8217;ve been eager to upgrade to Rails
4.1 and RSpec 3. Finally, in August, 2014, the gem ecosystem allowed this to
happen! I&#8217;ve got a related article on my <a href="http://www.railsonmaui.com/blog/2014/08/11/upgrading-to-rails-4-and-rspec-3-with-capybara-and-resque/">tips for upgrading to Rails 4.1 and RSpec 3</a>.
</p>

<p>
Once I had upgraded nearly every gem in my client&#8217;s large Rails project to the
latest gem versions, I was pleasantly surprised that I could once again get
Zeus, Guard, RSpec, Capybara, Poltergeist, Parallel Tests, etc. to all play
nicely together.
</p>

<p>
Always curious as to the value of the latest defaults in Rails, I decided to try
out Spring. Both Spring and Zeus preload Rails so that you don&#8217;t have to pay the
same start up cost for evry test run. Here&#8217;s a RailsCast on the topic: <a href="http://railscasts.com/episodes/412-fast-rails-commands">#412 Fast Rails Commands</a>.
</p>

<p>
The end results is that both Zeus and Spring give great results and are very
similar in many ways. The biggest difference for me is that only Zeus (and not
Spring) works with Parallel Tests. Interestingly, I got very similar results
when using Parallel Tests with our without Zeus. It turns out that it is
possible to run Parallel Tests with Spring installed so long as you disable it
by setting the environment variable like this: <code>DISABLE_SPRING=TRUE parallel_rspec -n 6 spec</code>.
</p>

<p>
The bottom line for me is that I don&#8217;t have any good reason to move away from
Zeus to Spring, and the fact that Spring is part of stock Rails is not a
sufficient reason for me. That being said, on another project which is smaller,
I&#8217;m not motivated to switch from Spring to Zeus.
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Performance</h2>
<div class="outline-text-2" id="text-2">
<p>
Note in below commands, one must insert <code>zeus</code> in the command to be using zeus.
If using Spring, be sure that you&#8217;re using the Spring modifed binstub scripts in
your bin directory by having your path appropriately set or using <code>bin/rake</code> and
<code>bin/rspec</code> (install <a href="https://github.com/jonleighton/spring-commands-rspec">spring-commands-rspec</a>).
</p>

<p>
The times shown below are from both sample runs of a single directory of
non-integration specs and from the full test suite of 914 tests, many of which
are Capybara tests, on a 2012, Retina, SSD, 16 GB, MacBook Pro while running
Emacs, RubyMine, Chrome, etc. Times were gathered by running commands prefixed
with the <code>time</code> command. Running <code>zeus rspec</code> seems a bit slower than using
spring. However, when running the integration tests, my test execution time was
always variable depending on the number of Capybara timeouts and retries.
</p>

<table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides">


<colgroup>
<col  class="left" />

<col  class="right" />

<col  class="right" />

<col  class="right" />
</colgroup>
<thead>
<tr>
<th scope="col" class="left">command</th>
<th scope="col" class="right">zeus loader</th>
<th scope="col" class="right">spring loader</th>
<th scope="col" class="right">no loader</th>
</tr>
</thead>
<tbody>
<tr>
<td class="left">rspec spec/utils</td>
<td class="right">0:19.1</td>
<td class="right">0:17.7</td>
<td class="right">0:22.8</td>
</tr>

<tr>
<td class="left">rake spec:utils</td>
<td class="right">0:15.6</td>
<td class="right">0:17.9</td>
<td class="right">0:18.1</td>
</tr>

<tr>
<td class="left">rake spec</td>
<td class="right">6:11.9</td>
<td class="right">6:15.0</td>
<td class="right">8:02.5</td>
</tr>

<tr>
<td class="left">rspec spec</td>
<td class="right">5:51:7</td>
<td class="right">5:28.0</td>
<td class="right">5:37.2</td>
</tr>

<tr>
<td class="left">parallel_rspec -n 6 spec</td>
<td class="right">2:28.7</td>
<td class="right">n/a</td>
<td class="right">2:28.0</td>
</tr>
</tbody>
</table>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Zeus and Spring vs. plain RSpec</h2>
<div class="outline-text-2" id="text-3">
<p>
Here&#8217;s some advantages and disadvantages of using either either Zeus or Spring
compared to plain RSpec.
</p>
</div>
<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Advantages</h3>
<div class="outline-text-3" id="text-3-1">
<ol class="org-ol">
<li>Both save time for running basic commands like rspec, rake, rails, etc. The
performance of both is very similar.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Disadvantages</h3>
<div class="outline-text-3" id="text-3-2">
<ol class="org-ol">
<li><b>Both can be extremely confusing when they fail to update automatically.</b>
This tends to happen after updating gems or running database migrations. You
end up yak shaving when you don&#8217;t see your changes taking effect! I.e., put
in some print statements, and then you don&#8217;t see them shown when they should.
Arghhhh!
</li>
<li><a href="https://github.com/y310/rspec-retry">Rspec-retry</a> seems essential in dealing with random Capybabara failures with
either Zeus or Spring. I often see less of these errors when I don&#8217;t use
Zeus/Spring nor parallel_tests.
</li>
</ol>
</div>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Zeus vs. Spring</h2>
<div class="outline-text-2" id="text-4">
</div><div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">Advantages</h3>
<div class="outline-text-3" id="text-4-1">
<ol class="org-ol">
<li><a href="https://github.com/burke/zeus">Zeus</a> works with the <a href="https://github.com/grosser/parallel_tests">parallel_tests gem</a>. This more than halves my time for
running my entire test suite. However, when writing this article, I found
that it made little difference, at least when slowed down by sporadically
failing capybara tests that are retried. That being said, I&#8217;m certain that
Parallel Tests with Zeus is faster or at worse the same as without Zeus.
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">Disadvantages</h3>
<div class="outline-text-3" id="text-4-2">
<ol class="org-ol">
<li>You need to start up separate shell process, running <code>zeus start</code>. An
advantage of this is that if there&#8217;s a problem starting up, the output in the
Zeus console window is fairly clear.
</li>
<li>You run the command &#8220;zeus rake&#8221; rather than just &#8220;rake&#8221;. Consequently, I made
some shell aliases (see below).
</li>
<li>Zeus only uses the environment from when Zeus was started and ignores any
environment variables when commands are run.
</li>
</ol>
</div>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Spring vs. Zeus</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">Advantages</h3>
<div class="outline-text-3" id="text-5-1">
<ol class="org-ol">
<li><a href="https://github.com/rails/spring">Spring</a> is a default part of Rails, so you know it&#8217;s well supported, and bugs
will be fixed fast.
</li>
<li>Slightly simpler to install and use than Zeus.
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">Disadvantages</h3>
<div class="outline-text-3" id="text-5-2">
<ol class="org-ol">
<li>Spring lacks support for parallel_tests. See this Github issue: <a href="https://github.com/grosser/parallel_tests/issues/309#issuecomment-45056130">incompatible
with spring #309</a>. You can, however run parallel_tests so long as run the
command like this: <code>time DISABLE_SPRING=TRUE parallel_rspec -n 6 spec</code>. I.e.,
you need to set <code>DISABLE_SPRING</code> so that parallel_rspec does not use Spring.
</li>
<li>Spring is a bit opaque in terms of errors given there&#8217;s no console window.
See <a href="https://github.com/rails/spring">README</a> for how to see the Spring log.
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Miscellaneous Tips</h2>
<div class="outline-text-2" id="text-6">
<p>
Be sure to disable either Zeus or Spring when updating gems. Consider restarting
Zeus or Spring after a database migration. See the below scripts called <code>pgr</code>
and <code>pgk</code> for seeing and killing Zeus/Spring related processes.
</p>
</div>

<div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1">Relevant Gems Working For Me</h3>
<div class="outline-text-3" id="text-6-1">
<p>
The right combination of gems seem pretty critical in getting all the parts to
play nicely together. As of August 15, 2014 the most recent compatible versions
of the following gems worked well together. This means running &#8220;bundle update&#8221;
without locking the gem versions.
</p>

<pre class="example">
capybara-screenshot (0.3.21)
capybara (2.4.1)
guard (2.6.1)
guard-bundler (2.0.0)
guard-livereload (2.3.0)
guard-rails (0.5.3)
guard-resque (0.0.5)
guard-rspec (4.3.1)
guard-unicorn (0.1.1)
parallel_tests (1.0.0)
poltergeist (1.5.1)
rails (4.1.4)
resque_spec (0.16.0)
rspec (3.0.0)
rspec-instafail (0.2.5)
rspec-its (1.0.1)
rspec-mocks (3.0.3)
rspec-rails (3.0.2)
rspec-retry (0.3.0)
vcr (2.9.2)
webmock (1.18.0)
zeus (0.13.3)
zeus-parallel_tests (0.2.4)
</pre>
</div>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">Zeus Shell Configuration (ZSH)</h2>
<div class="outline-text-2" id="text-7">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>echoRun<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nv">START</span><span class="o">=</span><span class="k">$(</span>date +%s<span class="k">)</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;&gt; $1&quot;</span>
</span><span class='line'>  <span class="nb">eval time</span> <span class="nv">$1</span>
</span><span class='line'>  <span class="nv">END</span><span class="o">=</span><span class="k">$(</span>date +%s<span class="k">)</span>
</span><span class='line'>  <span class="nv">DIFF</span><span class="o">=</span><span class="k">$((</span> <span class="nv">$END</span> <span class="o">-</span> <span class="nv">$START</span> <span class="k">))</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;It took $DIFF seconds&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">alias </span><span class="nv">zr</span><span class="o">=</span><span class="s1">&#39;zeus rake&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">alias </span><span class="nv">parallel_prepare</span><span class="o">=</span><span class="s1">&#39;rake parallel:prepare ; &quot;rake parallel:rake\[db:globals\]&quot; &#39;</span>
</span><span class='line'>
</span><span class='line'>zps<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="c"># Run parallel_rspec, using zeus, passing in number of threads, default is 6</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">p</span><span class="o">=</span><span class="k">${</span><span class="nv">1</span><span class="k">:-</span><span class="nv">6</span><span class="k">}</span>
</span><span class='line'>  <span class="c"># Skipping zeus b/c env vars don&#39;t work with zeus</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># start zeus log level fata </span>
</span><span class='line'>  <span class="c"># echoRun &quot;SKIP_RSPEC_FOCUS=YES RSPEC_RETRY_COUNT=7 RAILS_LOGGER_LEVEL=4 zeus parallel_rspec -n $p spec&quot;</span>
</span><span class='line'>  echoRun <span class="s2">&quot;zeus parallel_rspec -n $p spec&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># List processes related to rails</span>
</span><span class='line'>pgr<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for </span>x in spring rails phantomjs zeus; <span class="k">do </span>
</span><span class='line'><span class="k">    </span>pgrep -fl <span class="nv">$x</span>;
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Kill processes related to rails</span>
</span><span class='line'>pgk<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for </span>x in spring rails phantomjs zeus; <span class="k">do </span>
</span><span class='line'><span class="k">    </span>pkill -fl <span class="nv">$x</span>;
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Please let me know if this article helped you or if I missed anything!
</p>

<p>
Aloha,
</p>

<p>
Justin
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pry, Ruby, and Fun With the Hash Constructor]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/08/17/pry-ruby-and-fun-with-the-hash-constructor/"/>
    <updated>2014-08-17T14:51:24-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/08/17/pry-ruby-and-fun-with-the-hash-constructor</id>
    <content type="html"><![CDATA[<p>
I recently had a chance to pair with <a href="https://twitter.com/searls">Justin Searls</a> of <a href="http://testdouble.com/">TestDouble</a>, and we got
to chatting about <a href="https://github.com/pry/pry">pry</a> and the odd <code>Hash[]</code> constructor. Here&#8217;s a few tips that you
might find useful.
</p>

<p>
The main reason I use pry are:
</p>
<ol class="org-ol">
<li>Testing Ruby syntax.
</li>
<li>Documentation and source code browsing.
</li>
<li>History support.
</li>
<li><code>cd</code> into the an object to change the context, and <code>ls</code> to list methods of
that object.
</li>
</ol>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Pry Configuration</h2>
<div class="outline-text-2" id="text-1">
<p>
To install pry with rails, place this in your <code>Gemfile</code>
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;pry-rails&#39;</span><span class="p">,</span> <span class="ss">:group</span> <span class="o">=&gt;</span> <span class="ss">:development</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Then run <code>bundle install</code>. Then run <code>rails console</code>. That gets you the default
pry configuration. At the bottom of this article is my <code>~/.pryrc</code> (<a href="https://gist.github.com/justin808/1fe1dfbecc00a18e7f2a">gist</a>). Create
that file and then run <code>rails c</code> (short for <code>rails console</code>).
</p>

<p>
You&#8217;ll see this useful reminder of the customizations:
</p>

<pre class="example">
Helpful shortcuts:
h  : hist -T 20       Last 20 commands
hg : hist -T 20 -G    Up to 20 commands matching expression
hG : hist -G          Commands matching expression ever used
hr : hist -r          hist -r &lt;command number&gt; to run a command
Samples variables
a_array: [1, 2, 3, 4, 5, 6]
a_hash: { hello: "world", free: "of charge" }
</pre>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Testing syntax: Hash[]</h2>
<div class="outline-text-2" id="text-2">
<p>
The <code>Hash[]</code> method is one of the odder methods in Ruby, and oh-so-useful if
you&#8217;re doing map, reduce types of operations.
</p>

<p>
For example, how do you transform all the keys in a hash to be uppercase?
</p>

<p>
How about if we try this in pry (note, a_hash defined in my .pryrc).
</p>

<pre class="example">
[1] (pry) main: 0&gt; a_hash
{
    :hello =&gt; "world",
     :free =&gt; "of charge"
}
[2] (pry) main&gt; a_hash.map { |k,v| [k.to_s.upcase, v] }
[
    [0] [
        [0] "HELLO",
        [1] "world"
    ],
    [1] [
        [0] "FREE",
        [1] "of charge"
    ]
]
</pre>

<p>
OK, that gives us an Array of tuples.
</p>

<p>
Then run these two commands. <code>_</code> is the value of the last expression.
</p>

<pre class="example">
&gt; tmp = _
&gt; Hash[tmp]
{
    "HELLO" =&gt; "world",
     "FREE" =&gt; "of charge"
}
</pre>
<p>
Bingo! Now let&#8217;s dig into this a bit more.
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Memoization with Hash</h2>
<div class="outline-text-2" id="text-3">
<p>
Hash has another unusual constructor useful for memoizing a method&#8217;s return
value when parameters are involved. Justin Weiss wrote a good article explaining
it: <a href="http://www.justinweiss.com/blog/2014/07/28/4-simple-memoization-patterns-in-ruby-and-one-gem/">4 Simple Memoization Patterns in Ruby (and One Gem)</a>.
</p>

<p>
Here&#8217;s a quick sample in Pry:
</p>
<pre class="example">
[5] (pry) main: 0&gt; hh = Hash.new { |h, k| h[k] = k * 2 }
{}
[6] (pry) main: 0&gt; hh[2]
4
[7] (pry) main: 0&gt; hh[4]
8
</pre>

<p>
You can even use an array for the key values:
</p>
<pre class="example">
[8] (pry) main: 0&gt; hh = Hash.new { |h, k| h[k] = k[0] * k[1] }
{}
[9] (pry) main: 0&gt; hh[[2,3]]
6
[10] (pry) main: 0&gt; hh[[4,5]]
20
</pre>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Browsing Documentation and Source</h2>
<div class="outline-text-2" id="text-4">
<p>
It&#8217;s super useful to be able to see the documentation for any method easily,
which you can do by the <code>?</code> command. Similarly, you can also see the source, by
using <code>$</code>.
</p>

<pre class="example">
[3] (pry) main&gt; ? Hash[]

From: hash.c (C Method):
Owner: #&lt;Class:Hash&gt;
Visibility: public
Signature: [](*arg1)
Number of lines: 12

Creates a new hash populated with the given objects.

Similar to the literal { _key_ =&gt; _value_, ... }. In the first
form, keys and values occur in pairs, so there must be an even number of
arguments.

The second and third form take a single argument which is either an array
of key-value pairs or an object convertible to a hash.

   Hash["a", 100, "b", 200]             #=&gt; {"a"=&gt;100, "b"=&gt;200}
   Hash[ [ ["a", 100], ["b", 200] ] ]   #=&gt; {"a"=&gt;100, "b"=&gt;200}
   Hash["a" =&gt; 100, "b" =&gt; 200]         #=&gt; {"a"=&gt;100, "b"=&gt;200}
</pre>

<p>
Hmmmm&#x2026;. <code>Hash[]</code> also takes a plain array. Let&#8217;s try that:
</p>

<pre class="example">
[16] (pry) main: 0&gt; a_array
[
    [0] 1,
    [1] 2,
    [2] 3,
    [3] 4,
    [4] 5,
    [5] 6
]
[17] (pry) main: 0&gt; Hash[*a_array]
{
    1 =&gt; 2,
    3 =&gt; 4,
    5 =&gt; 6
}
</pre>

<p>
Neat!
</p>

<p>
Also note that you can see instance methods by prefixing the method name with
<code>#</code> or using an actual instance, like this:
</p>
<pre class="example">
[19] (pry) main: 0&gt; ? Hash#keys

From: hash.c (C Method):
Owner: Hash
Visibility: public
Signature: keys()
Number of lines: 5

Returns a new array populated with the keys from this hash. See also
Hash#values.

   h = { "a" =&gt; 100, "b" =&gt; 200, "c" =&gt; 300, "d" =&gt; 400 }
   h.keys   #=&gt; ["a", "b", "c", "d"]
[20] (pry) main: 0&gt; ? a_hash.keys
</pre>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Browsing History</h2>
<div class="outline-text-2" id="text-5">
<p>
History expansion in pry is also nice. As mentioned above, my <code>.pryrc</code> has 4
history aliases.
</p>

<pre class="example">
h  : hist -T 20       Last 20 commands
hg : hist -T 20 -G    Up to 20 commands matching expression
hG : hist -G          Commands matching expression ever used
hr : hist -r          hist -r &lt;command number&gt; to run a command
</pre>

<p>
Let&#8217;s try those out. It&#8217;s import to note that the <code>-T</code> tails results after doing
the grep of the whole history. I.e., the <code>-T 20</code> strips the results down to the
last 20 that matched.
</p>

<p>
Show last 20 commands.
</p>
<pre class="example">
[10] (pry) main: 0&gt; h
1: a_hash
2: a_hash.map { |k,v| [key.upcase, v] }
3: a_hash.map { |k,v| [key.to_s.upcase, v] }
4: a_hash.map { |k,v| [k.upcase, v] }
5: a_hash.map { |k,v| [k.to_s.upcase, v] }
6: tmp = _
7: Hash[tmp]
8: ? Hash[]
9: $ Hash[]
</pre>

<p>
Grep all commands for upcase and show last 20 matches.
</p>
<pre class="example">
[11] (pry) main: 0&gt; hg upcase
2: a_hash.map { |k,v| [key.upcase, v] }
3: a_hash.map { |k,v| [key.to_s.upcase, v] }
4: a_hash.map { |k,v| [k.upcase, v] }
5: a_hash.map { |k,v| [k.to_s.upcase, v] }
</pre>

<p>
Grep all commands for upcase and show all. The history of my example is short so
below is the same as above. If the history were longer, as it typically will be,
then you might get pages of results!
</p>

<pre class="example">
[12] (pry) main: 0&gt; hG upcase
 2: a_hash.map { |k,v| [key.upcase, v] }
 3: a_hash.map { |k,v| [key.to_s.upcase, v] }
 4: a_hash.map { |k,v| [k.upcase, v] }
 5: a_hash.map { |k,v| [k.to_s.upcase, v] }
11: hg upcase
</pre>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">cd and ls within Pry</h2>
<div class="outline-text-2" id="text-6">
<p>
I love to use <code>cd</code> and <code>ls</code> in <code>pry</code>.
</p>

<ol class="org-ol">
<li><code>cd</code> changes the context of pry, a bit like the current directory in the
shell, except for Ruby objects. And classes are objects too!
</li>
<li><code>ls</code> lists methods available on an object, a bit like listing files in the
shell.
</li>
</ol>

<pre class="example">
[22] (pry) main: 0&gt; cd a_hash.keys
[26] (pry) main / #&lt;Array&gt;: 1&gt; length
2
[27] (pry) main / #&lt;Array&gt;: 1&gt; first
:hello
[28] (pry) main / #&lt;Array&gt;: 1&gt; last
:free
[29] (pry) main / #&lt;Array&gt;: 1&gt; ls
Enumerable#methods:
  all?  chunk           detect     each_entry  each_with_index   entries   find      flat_map  index_by  lazy   max     member?  min_by  minmax_by  one?           partition  slice_before  sum     to_table
  any?  collect_concat  each_cons  each_slice  each_with_object  exclude?  find_all  group_by  inject    many?  max_by  min      minmax  none?      original_grep  reduce     sort_by       to_set  to_text_table
JSON::Ext::Generator::GeneratorMethods::Array#methods: to_json_without_active_support_encoder
Statsample::VectorShorthands#methods: to_scale  to_vector
SimpleCov::ArrayMergeHelper#methods: merge_resultset
Array#methods:
  &amp;    []=      clear        cycle       drop_while        fill        frozen?       inspect  permutation         push                  reverse       select     slice!      third                          to_gsl_integration_qaws_table        to_qaws_table  unshift
  *    abbrev   collect      dclone      each              find_index  grep          join     place               rassoc                reverse!      select!    sort        to                             to_gsl_vector                        to_query       values_at
  +    append   collect!     deep_dup    each_index        first       hash          keep_if  pop                 recode_repeated       reverse_each  shelljoin  sort!       to_a                           to_gslv                              to_s           zip
  -    as_json  combination  delete      empty?            flatten     in_groups     last     prefix              reject                rindex        shift      sort_by!    to_ary                         to_gv                                to_sentence    |
  &lt;&lt;   assoc    compact      delete_at   eql?              flatten!    in_groups_of  length   prepend             reject!               rotate        shuffle    split       to_csv                         to_h                                 to_xml
  &lt;=&gt;  at       compact!     delete_eql  extract_options!  forty_two   include?      map      pretty_print        repeated_combination  rotate!       shuffle!   suffix      to_default_s                   to_json                              transpose
  ==   blank?   concat       delete_if   fetch             fourth      index         map!     pretty_print_cycle  repeated_permutation  sample        size       take        to_formatted_s                 to_json_with_active_support_encoder  uniq
  []   bsearch  count        drop        fifth             from        insert        pack     product             replace               second        slice      take_while  to_gsl_integration_qawo_table  to_param                             uniq!
self.methods: __pry__
locals: _  __  _dir_  _ex_  _file_  _in_  _out_  _pry_
</pre>
<p>
It&#8217;s worth noting that you can see the modules declaring the methods of the object.
</p>

<p>
To see more of what pry can do for you, simply type <code>help</code> at the command line.
</p>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">My ~/.pryrc file</h2>
<div class="outline-text-2" id="text-7">
<p>
Create a file in your home directory called <code>~/.pryrc</code>.
<div><script src='https://gist.github.com/1fe1dfbecc00a18e7f2a.js'></script>
<noscript><pre><code>## Useful Collections
def a_array
  (1..6).to_a
end

def a_hash
  {hello: &quot;world&quot;, free: &quot;of charge&quot;}
end

Pry.config.color = true
Pry.config.prompt = Pry::NAV_PROMPT

Pry.config.commands.alias_command &quot;h&quot;, &quot;hist -T 20&quot;, desc: &quot;Last 20 commands&quot;
Pry.config.commands.alias_command &quot;hg&quot;, &quot;hist -T 20 -G&quot;, desc: &quot;Up to 20 commands matching expression&quot;
Pry.config.commands.alias_command &quot;hG&quot;, &quot;hist -G&quot;, desc: &quot;Commands matching expression ever used&quot;
Pry.config.commands.alias_command &quot;hr&quot;, &quot;hist -r&quot;, desc: &quot;hist -r &lt;command number&gt; to run a command&quot;

begin
  require &#39;awesome_print&#39;
  # Pry.config.print = proc { |output, value| output.puts value.ai }
  AwesomePrint.pry!
rescue LoadError =&gt; err
  puts &quot;no awesome_print :(&quot;
end

my_hook = Pry::Hooks.new.add_hook(:before_session, :add_dirs_to_load_path) do
  # adds the directories /lib and /spec and /test directories to the path if they exist
  puts &quot;Added lib spec test dirs to load path&quot;
  dir = `pwd`.chomp
  %w(lib spec test).map{ |d| &quot;#{dir}/#{d}&quot; }.each { |p| $: &lt;&lt; p unless !File.exist?(p) || $:.include?(p) }
end 

my_hook.exec_hook(:before_session)

puts &quot;Loaded ~/.pryrc&quot; 
puts &quot;Helpful shortcuts:&quot;
puts &quot;h  : hist -T 20       Last 20 commands&quot;
puts &quot;hg : hist -T 20 -G    Up to 20 commands matching expression&quot;
puts &quot;hG : hist -G          Commands matching expression ever used&quot;
puts &quot;hr : hist -r          hist -r &lt;command number&gt; to run a command&quot;
puts &quot;Samples variables&quot;
puts &quot;a_array: [1, 2, 3, 4, 5, 6]&quot;
puts &quot;a_hash: { hello: \&quot;world\&quot;, free: \&quot;of charge\&quot; }&quot;
</code></pre></noscript></div>

</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2014 Golden Gate Ruby Conference: Top 10 Reasons to Attend]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/08/13/2014-golden-gate-ruby-conference/"/>
    <updated>2014-08-13T14:25:57-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/08/13/2014-golden-gate-ruby-conference</id>
    <content type="html"><![CDATA[<p>
Woo hoo! I&#8217;m going to the <a href="http://gogaruco.com/">2014 Golden Gate Ruby Conference</a>. It&#8217;s at UCSF Mission
Bay, San Francisco, September 19-20, 2014. I wrote an article about my
experience last year, <a href="http://www.railsonmaui.com/blog/2013/09/22/gogaruco-2013/">GoGaRuCo 2013: Community &gt; Code</a>. If you&#8217;re on the fence
about attending, here&#8217;s my top reasons on why you should consider attending. I
recommend not delaying <a href="http://gogaruco.com/registration/">signing up</a>, as last year I saw folks begging for tickets
once the conference sold out. According to <a href="https://twitter.com/wifelette">Leah Silber</a>, one of the <a href="http://gogaruco.com/about/">conference
organizers</a>, GoGaRuCo has sold out every year, except for <i>maybe</i> year one.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Top 10 Reasons To Attend GoGaRuCo</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>San Francisco is a great town to visit, and there&#8217;s no better month to visit
than September as dense fog is least likely!
</li>
<li>It&#8217;s relatively small conference, compared to Rails Conf, and I find that
<b>much more engaging and relaxing</b>. The attendees seem to be a mix of highly
passionate Rubyists, mostly locals, with a mix from around the world.
</li>
<li>A one track conference is nice in that you don&#8217;t have to worry about picking
which talks to attend.
</li>
<li>There&#8217;s a 15 minute break between each talk to socialize with fellow
attendees or speakers. Socializing is why you come to these talks!
</li>
<li>Yehuda will likely come up with some interesting talk!
</li>
<li>Ruby programming is really more of an art and passion than work, and the
people that attend GoGaRuCo reflect this!
</li>
<li>You&#8217;ll probably make a few new friends and leave inspired.
</li>
<li>The food is super, both at the conference and throughout the city. And the
evening events last year were great as well.
</li>
<li>There&#8217;s probably going to be a job board, just in case that interests you.
</li>
<li>You won&#8217;t need any more T-shirts for another year!
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Photography</h2>
<div class="outline-text-2" id="text-2">
<p>
I&#8217;m volunteering as the official photographer of GoGaRuCo. My mission is to &#8220;get
2-3 good shots of each speaker, a couple of audience shots during each days
lunch and breaks, a shot or two of each exhibitor table, 2-3 team photos, and a
smattering of everything else.&#8221; So please don&#8217;t be shy and ask to have your
photograph taken.
</p>

<p>
Here&#8217;s a sample of shots I took at GoGaRuCo 2013. Tons more photos are linked
here: <a href="http://www.railsonmaui.com/blog/2013/09/22/gogaruco-2013/">GoGaRuCo 2013: Community &gt; Code</a>.
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-13-2014-golden-gate-ruby-conference/gogaruco-2013-1.jpg">
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-13-2014-golden-gate-ruby-conference/gogaruco-2013-2.jpg">
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-13-2014-golden-gate-ruby-conference/gogaruco-2013-3.jpg">
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-13-2014-golden-gate-ruby-conference/gogaruco-2013-4.jpg">
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-08-13-2014-golden-gate-ruby-conference/gogaruco-2013-5.jpg">
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Available for Consulting</h2>
<div class="outline-text-2" id="text-3">
<p>
If you&#8217;d like to meet me around the time of GoGaRuCo, don&#8217;t hesitate to email me
to try to meet up in person. Possibly you might have a project that could use my
help?
</p>

<p>
On a personal note, I spent the better part of my adulthood in San Francisco, so
I&#8217;ve got tons of friends there. All my consulting clients tend to be from the
Bay Area as well.
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Remote Pair Programming Tips Using RubyMine and Screenhero]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/05/06/remote-pair-programming-tips-using-screenhero/"/>
    <updated>2014-05-06T19:36:22-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/05/06/remote-pair-programming-tips-using-screenhero</id>
    <content type="html"><![CDATA[<p>
I had the opportunity to spend the entire workday remote pair programming from
my office in Maui with a San Francisco client from <a href="http://www.cloudcity.io/">Cloud City Development</a>. We
used our normal tools of <a href="http://www.jetbrains.com/ruby/">RubyMine</a>, Chrome, and iTerm2 on a 27&#8221; Cinema Display
shared via <a href="http://screenhero.com/">Screenhero</a>. While remote will probably never be 100% as good as true
in-person pairing, it&#8217;s getting very close! Here&#8217;s some tips for effective
remote pair programming. Scroll down to the bottom for the TLDR if you&#8217;re short
on time. Overall, I would highly recommend remote pairing with RubyMine on a
full 27&#8221; Cinema Display, using an iPad with a Google Hangout for eye contact!
</p>

<p>
Here&#8217;s a very detailed video of how to do remote collaboration:
</p>

<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/FkDhVrFgZAQ "></iframe></div>
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Telepresence Using Video Chat on iPad</h2>
<div class="outline-text-2" id="text-1">
<p>
Per the recommendation of <a href="https://twitter.com/timocratic">Tim Connor</a> of <a href="http://www.cloudcity.io/">Cloud City Development</a>, I started using
an iPad for <a href="http://en.wikipedia.org/wiki/Telepresence">telepresence</a> for <b>only the video</b>, using <b><a href="http://www.google.com/+/learnmore/hangouts/">Google Hangouts</a></b>, muting
the microphone on the Hangout, and using the audio on <a href="http://screenhero.com/">Screenhero</a>. While one can
run Google Hangouts on the laptop, it can really suck up the CPU. Note, an
iPhone or probably an Android phone or table would work equally as well. In
terms of the audio, the microphone and speakers are better on the computer. If
one is using the laptop for the telepresence video, and using multiple screens,
it&#8217;s key to use the camera on the screen where one will be looking at the
Hangout, and not at the Screenhero screen. As shown from the below pictures,
it&#8217;s key that it&#8217;s obvious when the pairing partners are looking at each other
versus at Screenhero. Incidentally, Screenhero did not suffer from any
degradation when combined with the Google Hangout, regardless of using the
Hangout on the laptop or mobile device.
</p>

<p>
In the below images, note where our eyes are focused.
</p>
</div>

<div id="outline-container-sec-1-1" class="outline-3">
<h3 id="sec-1-1">Talking to each other, making eye contact</h3>
<div class="outline-text-3" id="text-1-1">
<p>
<img src="http://www.railsonmaui.com//images/2014-05-06-remote-pair-programming-tips-using-screenhero/pair-programming-justin-steve-1.jpg">
</p>
</div>
</div>
<div id="outline-container-sec-1-2" class="outline-3">
<h3 id="sec-1-2">Both looking at screen</h3>
<div class="outline-text-3" id="text-1-2">
<p>
<img src="http://www.railsonmaui.com//images/2014-05-06-remote-pair-programming-tips-using-screenhero/pair-programming-justin-steve-2.jpg">
</p>
</div>
</div>
<div id="outline-container-sec-1-3" class="outline-3">
<h3 id="sec-1-3">Talking to each other, making eye contact</h3>
<div class="outline-text-3" id="text-1-3">
<p>
<img src="http://www.railsonmaui.com//images/2014-05-06-remote-pair-programming-tips-using-screenhero/pair-programming-justin-steve-3.jpg">
</p>
</div>
</div>
<div id="outline-container-sec-1-4" class="outline-3">
<h3 id="sec-1-4">Shaka from Steve and Justin</h3>
<div class="outline-text-3" id="text-1-4">
<p>
<img src="http://www.railsonmaui.com//images/2014-05-06-remote-pair-programming-tips-using-screenhero/pair-programming-justin-steve-4.jpg">
</p>
</div>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Screenhero</h2>
<div class="outline-text-2" id="text-2">
<p>
We both used <a href="http://screenhero.com/">Screenhero</a> on Macs. I&#8217;ve done plenty of remote pair programming
using Google Hangouts, but typically only one person sharing the screen drives
the code. Screenhero allows true screen sharing such that both programmers can
do the typing and mousing. With the shared screen being a 27&#8221; Cinema display, I
set my Screenhero window to <i>full screen</i> and the resolution was nearly perfect.
Yes, when scrolling and switching apps, there is a slight delay, but it was
extremely manageable to the point that I almost would forget that I&#8217;m working on
a computer 3000 miles away. Although there&#8217;s a slight slowness in seeing keys
that you type, it&#8217;s minor enough that it&#8217;s not a nuisance. The dual cursor
support works great. Here&#8217;s a <a href="https://www.youtube.com/watch?v=_BojQaD64GU">video demo of the dual cursor support</a>.
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-05-06-remote-pair-programming-tips-using-screenhero/rubymine-screenhero-dual-cursors.jpg">
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">RubyMine IDE</h2>
<div class="outline-text-2" id="text-3">
<p>
Both I and my pairing partners were already using <a href="http://www.jetbrains.com/ruby/">RubyMine</a>, so using RubyMine
was a natural choice over trying to pair with the conventional remote pairing
setup of tmux and Vim. RubyMine combined with Screenhero, the same size big
screens, fast computers, and very good broadband resulted in a productive
pairing setup. One thing I hear about Vim setups is that pair programmers tend
to not customize their Vim keymaps. With RubyMine, that&#8217;s not an issue thanks to
a feature called &#8220;Quick Switch Scheme&#8221; which allows very fast switching of
keyboard bindings. I&#8217;m a Vim user (IdeaVim), and I would have been crippled
without my favorite RubyMine Vim bindings. I like the &#8220;Quick Switch&#8221; feature so
much that I made <a href="https://www.youtube.com/watch?v=L57xOTXF78w&noredirect=1">a short screencast on this feature</a>, displayed below.
</p>
<!-- more -->
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Fast Broadband</h2>
<div class="outline-text-2" id="text-4">
<p>
I use a combination of the fastest cable and the fastest DSL I can buy in Maui,
served on a load-balancing <a href="http://www.amazon.com/ZyXEL-Internet-Security-Firewall-Dual-WAN/dp/B0042WCFI2">ZyXEL ZyWall USG 50 Router</a>. DSL is far slower than
the cable service, but I still keep it for the one day that cable is not working
right. As an additional backup, I have a Verizon LTE tethering plan for my
iPhone 5, so the chances that I&#8217;m totally out of Internet are low. Here&#8217;s a
screenshot from <a href="http://www.speedtest.net/">http://www.speedtest.net/</a>
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-05-06-remote-pair-programming-tips-using-screenhero/broadband-speed-maui.jpg">
</p>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Same Big Monitors</h2>
<div class="outline-text-2" id="text-5">
<p>
We both used <a href="https://www.apple.com/displays/">Apple 27&#8221; Cinema Displays</a>. On the receiving side of the share, I&#8217;m
using a 2012 loaded Retina MacBook Pro with SSD.
</p>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Audio Setup</h2>
<div class="outline-text-2" id="text-6">
<p>
I use a <a href="http://www.amazon.com/Blue-Microphones-Yeti-USB-Microphone/dp/B002VA464S/ref=sr_1_1?s=electronics&ie=UTF8&qid=1399442515&sr=1-1&keywords=blue+yeti+microphone">Blue Yeti USB Microphone Silver Edition</a> mounted on a <a href="http://www.amazon.com/Heil-Sound-PL-2T-Overhead-Broadcast/dp/B000SZVZ74/ref=sr_1_1?s=electronics&ie=UTF8&qid=1399442457&sr=1-1&keywords=heil+pl2t">Heil PL-2T Overhead
Broadcast Boom</a> with a <a href="http://www.amazon.com/Blue-Microphones-Pop-Universal-Filter/dp/B0002H0H4A/ref=sr_1_1?s=electronics&ie=UTF8&qid=1399442563&sr=1-1&keywords=blue+yeti+pop+filter">Blue Microphones The Pop Universal Pop Filter</a>. (At the
time of writing this article, the pop filter is only $25.22 on Amazon Prime,
regular price $79.00, totally worth it!). This is the setup I use for podcasting
so it&#8217;s more than adequate for pairing. I use the audio from the Display Monitor
(Cinema Screen), as that&#8217;s behind the mic, so as not to cause any echoing.
Naturally, this only works in a private office. In a shared office, it&#8217;s
critical to have a very good mic/headset combo or a good mic. The Blue Snowball
mic does a pretty good job of filtering out background noise.
</p>

<p>
I did a quick search on Amazon to see what&#8217;s available for headsets. If budget
allows (and if you&#8217;re spending a fair bit of time pairing), I&#8217;d consider the
<a href="http://www.amazon.com/V-MODA-Crossfade-Over-Ear-Noise-Isolating-Headphone/dp/B003BYRGKY/ref=sr_1_1?s=aht&ie=UTF8&qid=1399443063&sr=1-1&keywords=headset+with+microphone">V-MODA Crossfade LP Over-Ear Noise-Isolating Metal Headphone (Gunmetal Black)</a>
plus the <a href="http://www.amazon.com/V-MODA-BoomPro-Gaming-Headset-Headphone/dp/B00BJ17WKK/ref=pd_bxgy_e_img_y">V-MODA BoomPro Gaming, VoIP Headset Headphone with Mic, Black</a> as both
have a very high number of 4+ reviews. It&#8217;s suspect that with the right audio
setup, the avoidance of distractions for an in-office/remote pair combo might be
superior to that of the in-office pair combo. Please post into the comments if
you have advice on the best headset for pairing.
</p>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">TLDR Miscellaneous Tips</h2>
<div class="outline-text-2" id="text-7">
<ol class="org-ol">
<li>Use <a href="http://screenhero.com/">Screenhero</a> for screen sharing.
</li>
<li>Use <a href="http://www.google.com/+/learnmore/hangouts/">Google Hangouts</a> or Facetime on a mobile device to share video of each
other. Prefer that over using Google Hangouts on your computer due to CPU
usage of Google Hangouts. I really like the iPad mini with the Apple folding
cover. It fits right under the Cinema
</li>
<li>Use large screen for screen sharing, an tablet for Google Hangouts.
</li>
<li>Don&#8217;t be afraid to try your regular tools, such as <a href="http://www.jetbrains.com/ruby/">RubyMine</a>.
</li>
<li>Use fast broadband, fast Macs, same size monitors.
</li>
<li>A good audio setup is well worth it.
</li>
<li>If the computer sharing the desktop has multiple monitors enabled, then the
remote sharing viewer might not be able to use command-tab to switch
applications. This problem went away when there was only one monitor on the
computer doing the sharing. It might depend upon whether the cmd-tab is
showing on the shared screen.
</li>
<li>If using RubyMine, install your pair&#8217;s keybinding into your RubyMine
preferences. You can copy the keybinding xml file located in
<code>~/Library/Preferences/RubyMine60/keymaps</code> and then restart RubyMine.
</li>
<li>Consider putting Screenhero in Full Screen mode to avoid any compression of
the window pixels. This is especially important when trying to click or drag
on the remote machine, such as resizing the chrome inspector area.
</li>
<li>Don&#8217;t forget to take a break for water, stretch, etc. every so often!
</li>
</ol>

<p>
Finally, click here for <a href="http://theoatmeal.com/comics/working_home">OMG, LOL, on an alternative reality of working from home</a>.
</p>

<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/_BojQaD64GU "></iframe></div>
</p>

<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/L57xOTXF78w "></iframe></div>
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsConf 2014]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/04/23/railsconf-2014/"/>
    <updated>2014-04-23T03:02:41-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/04/23/railsconf-2014</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">My Talk: Concerns, Decorators, Presenters, Service Objects, Helpers, Help me Decide</h2>
<div class="outline-text-2" id="text-1">
<script async class="speakerdeck-embed" data-slide="2" data-id="3e567380b1ea013103f01263d01a0296" data-ratio="1.77777777777778" src="//speakerdeck.com/assets/embed.js"></script>

<p>
<img src="http://www.railsonmaui.com//images/2014-04-23-RailsConf/railsconf-fat-models-book-title.JPG">
</p>

<ul class="org-ul">
<li><a href="https://github.com/justin808/fat-code-refactoring-techniques">Fat Code Refactoring Techniques Code Samples on Github</a>
</li>
<li><a href="https://www.icloud.com/iw/#keynote/BALu9Dy-Dcbu1PvWluyB_G-jq5C6URGmij2F/RailsConf-2014-Concerns-Decorators-Presenters-Service-Objects-Helpers-Help-Me-Decide-April-22-2014">Keynote Slides with Animations</a>
</li>
<li><a href="http://www.confreaks.com/videos/3329-railsconf-concerns-decorators-presenters-service-objects-helpers-help-me-decide">Video of Presentation at Confreaks</a> embedded here:
</li>
</ul>
<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/bHpVdOzrvkE "></iframe></div>
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">(Lack of) Live Coding in my Talk</h2>
<div class="outline-text-2" id="text-2">
<p>
Due to time constraints, I chose to skip the live coding I had prepared to do in
my talk. <a href="mailto:justin@railsonmaui.com">Please let me know</a> if you&#8217;d be interested in a screencast walking
through the sample code. I will create one if there is sufficient demand.
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">RailsConf 2014 Pictures</h2>
<div class="outline-text-2" id="text-3">
<ul class="org-ul">
<li>Please share, so long as you don&#8217;t remove the watermark.
</li>
<li><a href="mailto:justin@railsonmaui.com">Email me</a> if you&#8217;d like any full size, non-watermarked copies.
</li>
</ul>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Photos on Flickr:</h3>
<div class="outline-text-3" id="text-3-1">
<ul class="org-ul">
<li><a href="https://www.flickr.com/photos/justingordon/sets/72157644405839722/">RailsConf 2014 All Photos in one Album</a>
</li>
<li><a href="https://www.flickr.com/photos/justingordon/sets/72157644406117431/">RailsConf 2014 Speaker Dinner</a>
</li>
<li><a href="https://www.flickr.com/photos/justingordon/sets/72157644419361535/">RailsConf 2014 Day 1</a>
</li>
<li><a href="https://www.flickr.com/photos/justingordon/sets/72157644406165341/">RailsConf 2014 Day 2</a>
</li>
<li><a href="https://www.flickr.com/photos/justingordon/sets/72157644419407845/">RailsConf 2014 Day 2 BaseCamp Party</a>
</li>
<li><a href="https://www.flickr.com/photos/justingordon/sets/72157644406193641/">RailsConf 2014 Day 3</a>
</li>
<li><a href="https://www.flickr.com/photos/justingordon/sets/72157644460514123/">RailsConf 2014 Day 3 Public House Party</a>
</li>
<li><a href="https://www.flickr.com/photos/justingordon/sets/72157644365234506/">RailsConf 2014 Day 4</a>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Photos on Facebook</h3>
<div class="outline-text-3" id="text-3-2">
<p>
The same photo albums on my <a href="https://www.facebook.com/railsonmaui">Rails on Maui Facebook Page</a>. Please tag yourself and
your friends.
</p>
<ul class="org-ul">
<li><a href="https://www.facebook.com/media/set/?set=a.788587014486399.1073741836.484394724905631&type=3">RailsConf 2014 Day 0, speaker dinner</a> 
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.788590134486087.1073741837.484394724905631&type=3&uploaded=52">RailsConf 2014 Day 1, including after party at the Public House</a>
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.791901107488323.1073741839.484394724905631">RailsConf 2014 Day 2</a>
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.788967167781717.1073741838.484394724905631&type=3">RailsConf 2014 Day 2, Basecamp Party</a>
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.791902674154833.1073741840.484394724905631&type=3">RailsConf 2014 Day 3</a>
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.791912494153851.1073741841.484394724905631">RailsConf 2014 Day 3, Public House Party</a>
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.791913407487093.1073741842.484394724905631">RailsConf 2014 Day 4</a>
</li>
</ul>

<p>
I hope you like the pictures.
</p>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rocking With Tmux, Tmuxinator, Guard, Zeus, and iTerm2 for Rails Development]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/03/11/rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/"/>
    <updated>2014-03-11T21:01:13-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/03/11/rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development</id>
    <content type="html"><![CDATA[<p>
What&#8217;s the most effective way to:
</p>
<ol class="org-ol">
<li>Start several different processes for Rails, such as Zeus, Rails server, rspec,
resque, and the scheduler.
</li>
<li>Have the output for each process in a separate tab.
</li>
<li>Not have the process pause when you scroll the output, as happens in tmux.
</li>
</ol>

<p>
Here&#8217;s a short demo of using tmuxinator to get a project running in several
iterm2 tabs:
</p>

<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/15Bxhu6-Xjc "></iframe></div>
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Why Guard?</h2>
<div class="outline-text-2" id="text-1">
<p>
I use <a href="https://github.com/guard/guard">Guard</a> for:
</p>
<ol class="org-ol">
<li>Automatically running rspec tests based on changes in either tests or source
files. Together with <a href="https://github.com/burke/zeus">Zeus</a>, I haven&#8217;t found a faster way to get immediate
feedback from tests. <i>Pro tip: Learn how to use <code>:focus</code> with your specs to configure exactly what tests to have guard run.</i>
</li>
<li>Automatically restarting the server when needed. For example, if you change
gems or routes, you need to restart the server.
</li>
</ol>

<p>
While I love running Guard with Zeus, <a href="https://github.com/rails/spring">Spring</a> is the default in Rails 4.1, so
I&#8217;ll probably give that a try in the near future.
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Why Tmuxinator and Tmux?</h2>
<div class="outline-text-2" id="text-2">
<p>
<a href="https://github.com/tmuxinator/tmuxinator">Tmuxinator</a> is awesome for configuring the layout of several processes.
</p>

<p>
Here&#8217;s a sample tmuxinator file.
</p>

<p>
<div><script src='https://gist.github.com/9502375.js'></script>
<noscript><pre><code># First brew install tmux, gem install tmuxinator, and download item2
# Copy this file here: ~/.tmuxinator/my_project.yml
# Modify the paths (replace ~/my_project with your directory)
# Invoke with
#   mux project
# Then hit &#39;Ctrl-a d&#39; to detach
# Then run &#39;tmux -CC attach&#39;
# Make sure that option for iterm2 is General --&gt; tmux --&gt; When attaching, open unrecognized windows in Tabs
# Also, check option &quot;Automatically hide the tmux client session after connecting&quot;
# alias beg=&#39;bundle exec guard&#39;
# define guard groups for spec, server, worker
name: project
pre_window: cd ~/my_project
root: ~/my_project
windows:
  - zeus: zeus start
  - spec: beg -g spec
  - server: beg -g server
  - worker:
      layout: main-horizontal
      panes:
        - beg -g worker
        - scheduler</code></pre></noscript></div>

</p>

<p>
When I run the command
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mux my_project
</span></code></pre></td></tr></table></div></figure>

<p>
And then I see the following. This is way easier than opening up tabs in iTerm2
and running commands every time.
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-03-11-rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/tmuxinator-start.png">
</p>

<p>
The main problem with this setup is that if you scroll a window backwards (using
the tmux keyboard bindings), and you don&#8217;t un-scroll, then the process pauses,
such as the Rails server. <b>That&#8217;s super annoying</b>. Often I&#8217;m running specs, and
I want to scroll back to see a stack trace, but that prevents the continuation
of the test run! Here&#8217;s a <a href="http://stackoverflow.com/questions/13924365/rails-freezes-when-searching-through-tmux-output-buffer">short discussion of the issue</a>.
</p>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">iTerm2 with tmux to the Rescue!</h2>
<div class="outline-text-2" id="text-3">
<p>
iTerm2 has <a href="https://code.google.com/p/iterm2/wiki/TmuxIntegration">wonderful tmux integration</a>. Here&#8217;s the steps I take:
</p>
<ol class="org-ol">
<li>Be sure have the latest versions of tmux, tmuxinator and iTerm2. As of this
article, I&#8217;m using: tmux: 1.9a, tmuxinator: 0.6.7, iTerm2: Build
1.0.0.20140112.
</li>
<li>Configure your Tmux to open tabs rather than windows. This is key to getting
the iTerm2 version to look like your original tmux session.
</li>
</ol>

<p>
<img src="http://www.railsonmaui.com//images/2014-03-11-rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/tmuxinator-configuration.png">
</p>

<p>
Once you have the setup done, this is how I start my iTerm2-tmuxinator session:
</p>

<ol class="org-ol">
<li>Start tmuxinator with command <code>mux my_project</code>
</li>
<li>Hit <code>ctrl-a, d</code> to detach the tmux process.
</li>
<li>Run command =tmux -CC attach&#8221;
</li>
</ol>

<p>
Here&#8217;s how it will look:
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-03-11-rocking-with-tmux-tmuxinator-and-iterm2-for-rails-development/tmuxinator-iterm2-started.png">
</p>

<p>
If you want to kill the session, you can run this command:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>tmux <span class="nb">kill</span>-session -t my_project
</span></code></pre></td></tr></table></div></figure>

<p>
However, that sometimes does not kill all the processes. I often use these two
zsh scripts to ensure that everything is killed. It&#8217;s super important to kill
Zeus before running db migrations or gem updates.
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>pgr<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for </span>x in rails phantomjs zeus; <span class="k">do </span>
</span><span class='line'><span class="k">    </span>pgrep -fl <span class="nv">$x</span>;
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>pgk<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for </span>x in rails phantomjs zeus; <span class="k">do </span>
</span><span class='line'><span class="k">    </span>pkill -fl <span class="nv">$x</span>;
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Why Tmuxinator/tmux and not Foreman?</h2>
<div class="outline-text-2" id="text-4">
<p>
I use <a href="https://github.com/ddollar/foreman">Foreman</a> with Heroku and for running my rails server in production mode.
However, I prefer having different tabs provide console output for each of the
processes, rather than having all the console output blended together as Foreman
does. I&#8217;m also not sure if Foreman integrates with Guard.
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Capybara PhantomJs Poltergeist Rspec Tips]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/03/09/capybara-phantomjs-poltergeist-rspec-tips/"/>
    <updated>2014-03-09T18:50:19-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/03/09/capybara-phantomjs-poltergeist-rspec-tips</id>
    <content type="html"><![CDATA[<p>
I&#8217;ve added a page of <a href="http://www.railsonmaui.com/tips/rails/capybara-phantomjs-poltergeist-rspec-rails-tips.html">tips on integration (aka feature spec) testing using Capybara, PhantomJs,
Poltergeist, and Rspec</a>.
</p>

<p>
Some of the tips include:
</p>
<ol class="org-ol">
<li>Favorite test configuration (gems, spec_helper, etc.) for feature specs.
</li>
<li>How to troubleshoot and debug feature specs
</li>
<li>My setup for using Zeus with parallel-tests, including a rake task for
setting up the databases.
</li>
<li>Tricky testing:
<ol class="org-ol">
<li>Auto-complete dropdowns (some handy utility methods).
</li>
<li>Hover effects (easy now!)
</li>
<li>AJAX
</li>
</ol>
</li>
</ol>

<p>
I&#8217;ll try to keep this page of tips updated as my test configuration evolves.
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Org-Mode Octopress Setup V2]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2/"/>
    <updated>2014-03-05T19:37:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/03/05/octopress-setup-with-github-and-org-mode-v2</id>
    <content type="html"><![CDATA[<p>
<i>Note: This is a refresh of my original post from April, 2013 to adjust for Emacs 24.3 and org-mode 8.2.x</i>
</p>

<p>
WordPress seemed like a good blogging platform, but it just didn&#8217;t feel right. I
spend all my day editing text files using vim key-bindings, and I love <a href="http://orgmode.org/">Org Mode</a>
for all non-coding writing. If you don&#8217;t know Org Mode, it&#8217;s like having
Markdown mode on steroids. You can have a numbered list in Markdown, but
org-mode lets you re-order the list, and that&#8217;s just the beginning. Editing blog
documents in the WordPress editor felt almost as bad as being told to use MS
Word. I found that ergonomics of Org Mode, including all the goodness of recent
versions of <a href="http://www.gnu.org/software/emacs/">Emacs</a>, including <a href="http://www.emacswiki.org/emacs/Evil">Evil</a> (Vim emulation), just made organization of
creative thoughts so much more enjoyable.
</p>

<p>
So I bit the bullet one weekend, and dove into <a href="http://octopress.org/">Octopress</a>, publishing my first
article, <a href="http://www.railsonmaui.com/blog/2013/04/27/octopress-setup-with-github-and-org-mode/">Octopress Setup with Github, Org Mode, and LiveReload</a>. The solution
presented in that article <a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">Introducing Octopress Blogging for Org-Mode</a> stopped
working when I upgraded Emacs to 24.3 and org-mode to 8.2.x. Here&#8217;s a rehash of
my original article updated to the latest software versions as of March, 2014.
</p>

<p>
If you used to writing real web applications, rather than know the intricacies
of a giant monolithic blogging platform, then the <a href="http://octopress.org/docs/theme/template/">customization of Octopress</a>
seems so much more straightforward. This is so much more like the Unix
philosophy that so many of us love, which is small and modular, rather than
monolithic.
</p>

<!-- more -->

<p>
I like <a href="https://github.com/robdodson/robdodson.github.com/blob/source/source/_posts/2012-04-30-custom-domain-with-octopress-and-github-pages.markdown">Rob Dodson&#8217;s summary</a> (noting Org Mode plus Emacs):
</p>

<ul class="org-ul">
<li><a href="http://octopress.org/">Octopress</a> is a blogging framework written by <a href="http://brandonmathis.com/">Brandon Mathis</a> (<a href="https://twitter.com/#!/imathis">@imathis</a>) which
sits on top of <a href="https://github.com/mojombo/jekyll">Jekyll</a>. Jekyll is a static site generator, meaning there&#8217;s no
database associated with your blog. Instead of writing everything in a WSYWIG
linked to MySQL (like Wordpress or Blogger) you produce text files using
Markdown which are then converted to static HTML. There are 3 huge benefits to
this approach. First, writing in Markdown (<b>org-mode</b> for me) is awesome. Once
you learn the syntax it&#8217;s incredibly fast and you don&#8217;t have to spend time
playing with a tiny little editor window just to add <i>some</i> <b>style</b> to your
posts. Second, writing in your favorite text editor is also awesome. I produce
everything in Sublime Text 2 (<b>Emacs</b> for me) and every day I discover new
tricks to make the process better. If you&#8217;ve ever had to write a blog post
using one of those horrible little TinyMCE editors you will appreciate this
feature. And lastly, static HTML is <b>fast</b>.
</li>
</ul>

<p>
This article should be useful for:
</p>
<ol class="org-ol">
<li>Any interest in using org-mode to publish to Octopress including some
reasons I use Org Mode (with Emacs).
</li>
<li>Some explanation of what Octopress and git are doing.
</li>
<li>Anybody curious about how using free github pages works to host Octopress.
</li>
</ol>

<p>
Incidentally, since my blog is hosted using github pages, the source code and
configuration I use to generate it can all be found <a href="https://github.com/justin808/justin808.github.io">here</a>. See the notes below on
the difference between the <code>source</code> and <code>master</code> branches.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Basic setup</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li><a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages/">Rob Dodson on Octopress</a>: Start off with these instructions from this posting
on April 30th, 2012. There are a few differences worth noting:
<ol class="org-ol">
<li>You should change the .rvmrc to a .ruby-version file
</li>
<li>Github recommends your deployment repository be named <code>yourname.github.io</code>,
not <code>yourname.github.com</code>.
</li>
<li>After you run <code>rake setup_github_pages</code> and before running <code>rake
      generate</code>, you should run <code>rake install</code>. If you forget, there&#8217;s a clear
message indicating this omission.
</li>
</ol>
</li>
<li>Customize <code>octopress/_config.yml</code>. The yaml file contains descriptions.
</li>
<li>Update the DNS to use your custom domain if you wish: <a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Github directions on
setting up a custom domain</a>
</li>
<li>At this point, you can create a post:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_post<span class="o">[</span><span class="s2">&quot;my post name&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Create a page:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake new_page<span class="o">[</span><span class="s2">&quot;my page name&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Generate and deploy:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake gen_deploy
</span></code></pre></td></tr></table></div></figure>

<p>
Watch the site and regenerate when it changes:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake watch
</span></code></pre></td></tr></table></div></figure>

<p>
Preview the site in a web browser:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>

<p>
See all the available rake options:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake -T
</span></code></pre></td></tr></table></div></figure>

<p>
Save changes to source branch:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;save changes to source&quot;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Some Perspectives on how Octopress Works</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Posts</h3>
<div class="outline-text-3" id="text-2-1">
<p>
<b>Posts</b> are created using the rake task <code>rake new_post["Post Title"]</code>. The key things about a post are:
</p>
<ol class="org-ol">
<li>File is located in =source/_posts.
</li>
<li>File has a header containing the meta-data for the post. The post URL and
date are determined by the by the <code>title</code> and <code>date</code> fields. If you want to
change the date of your post, then you change the meta-data. Changing the
file name is useful only for file navigation. Here&#8217;s a <a href="https://gist.github.com/justin808/5550381">gist for a rake task
to update the file names to match the metadata</a>.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Pages</h3>
<div class="outline-text-3" id="text-2-2">
<p>
<b>Pages</b> are created using the rake task <code>rake new_page["Page Title"]</code>. The key
things about a page are:
</p>
<ol class="org-ol">
<li>Files are located in <code>source/page-title</code>
</li>
<li>File has a header containing the meta-data for the post.
</li>
</ol>

<p>
I use &#8220;Pages&#8221; for things like <a href="http://www.railsonmaui.com/about">my &#8220;about&#8221; page.</a>
</p>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">POW</h2>
<div class="outline-text-2" id="text-3">
<p>
POW allows you to point your browser to <code>http://octopress.dev</code> to see your local,
unpublished Octopress website. It&#8217;s very convenient to not have to remember to
run a local server, and it works great with LiveReload. Scroll to the bottom of
this link for details on <a href="http://octopress.org/docs/blogging/">POW</a>. The alternative to running POW is to run <code>rake
preview</code> and then point your browser at <code>http://0.0.0.0:4000</code> (or whatever port
you configured).
</p>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Automatically Generating the Site</h2>
<div class="outline-text-2" id="text-4">
<p>
Start a shell tab running this command: <code>rake generate &amp;&amp; rake watch</code>. Edit a
file in markdown or follow the instructions below to use org-mode.
</p>
</div>
</div>
<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Org-Mode</h2>
<div class="outline-text-2" id="text-5">
<p>
You can skip this section if you&#8217;re not interested in org-mode. However, it&#8217;s
super cool!
</p>
</div>
<div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">Why org-mode for blog publishing?</h3>
<div class="outline-text-3" id="text-5-1">
<p>
<a href="http://orgmode.org/">Org-mode</a> offers quite a bit more than plain markdown. It&#8217;s quite the <b>hacker&#8217;s
delight</b> for note taking and authoring of blog articles. Down below I list a few
reasons why org-mode. Here&#8217;s a few org-mode features I love (Some are Emacs
ones):
</p>
<ol class="org-ol">
<li>All headers and list items can be reordered with minimal keystrokes (think
super powerful outliner).
</li>
<li>Numbered lists.
</li>
<li>Editable tables in text editor, with movable columns, movable rows.
</li>
<li>Ergonomics of insertion of URLs and images.
</li>
<li>Includes the basics of markdown, such as source code blocks and much more.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">Org-mode Integration</h3>
<div class="outline-text-3" id="text-5-2">
<p>
The <a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress</a> plugin automates the process of converting an org-mode
document (<code>.org</code> file) in <code>source/org_posts</code> into a <code>.html</code> document in
<code>source/_posts</code>. Once the html document is saved in _posts, the <code>rake watch</code>
task picks up the change and deploys the file. <b>Neat!</b>
</p>

<p>
Here are the basic steps:
</p>
<ol class="org-ol">
<li>Install Emacs 24.3 and use the package manager to install org-mode and
   <a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress</a>.
</li>
<li>See my Emacs configuration below.
</li>
<li>Note, there are two ways to use org-octopress. I do not use its features to
automate the setup of the directories. This automated setup does not provide
a way to have &#8220;pages&#8221;. As of March, 2014, you can only have &#8220;posts&#8221;. Instead,
my configuration below handles the mapping of directories.
</li>
<li><del>Images work fine.</del> Well, almost fine. The big gotcha is that the standard
inclusion of images in org-mode results in broken paths at deployment. The
workaround is to embed the <a href="http://octopress.org/docs/plugins/image-tag/">Octopress syntax for an image</a>, and to place the
images under source/images. Note, you&#8217;ll want to be sure to use an absolute
path, or else your article might look OK on the home page, but might now work
in the postings directory. If I&#8217;m creating a document with many images, I&#8217;ll
group the images for that document in a sub-directory of images named like
the document. This is how it should look. The trick is to place the
octopress <code>img</code> directive within a HTML begin/end block.

<p>
<img src="http://www.railsonmaui.com//images/2013-04-27-octopress-setup-with-github-and-org-mode/org-mode-images.png">
</p>
</li>
<li><b>Links</b>: This is key thing to get right. It&#8217;s critical to understand the
issues links, or else you&#8217;ll have one of these issues:
<ol class="org-ol">
<li>Links work when you test your blog locally using <code>pow</code>, but not when you
go to your published website. This happens if you use a relative link from
blog articles, because blog articles sometimes appear on your home page
and sometimes under the <code>/blog</code> directory. You have to use your domain
address to link from blog articles to other articles on your blog.
</li>
<li>You&#8217;d like your local links to point to the correct local spot. You can do
this for links on static pages, but just not blog articles. Thus, for
non-blog articles, it&#8217;s preferable to use the <code>file:</code> relative path format
(just not <code>file:/</code> absolute path and not <code>file:~/</code>).
</li>
</ol>
<p>
<b>Here&#8217;s the rules:</b>
</p>

<p>
Links from static pages, relatively specified to other static pages and to
posts. Ensure that there&#8217;s no <code>/</code> immediately following <code>file:</code>. For example:
</p>
<pre class="example">
[[file:telecommuting.html][Why telecommuting works and how I maximize productivity]]
</pre>
<p>
Or if the link is one level under the current directory:
</p>
<pre class="example">
[[file:misc/telecommuting.html][Why telecommuting works and how I maximize productivity]]
</pre>
<p>
Links from a <i>page</i> to a <i>post</i> can use a relative link like this.
<i>Important: you must use the <code>YYYY/MM/DD/blog-title/index.html</code> format! and you must specify the article title.</i>
</p>
<pre class="example">
[[file:../blog/2013/04/27/octopress-setup-with-github-and-org-mode/index.html][Org-Mode Octopress Setup V2]]
</pre>
<p>
<b>However</b>, links from posts to other posts require an absolute URL using your
published domain name. The big gotcha is that blog posts sometimes are shown
on the home page and sometimes inside of the blog directory. To avoid
trouble, you need to follow a format as this example shows. It&#8217;s easiest to
copy the URL from the browser address bar.
</p>
<pre class="example">
[[http://www.railsonmaui.com/blog/2013/05/08/strategies-for-rails-logging-and-error-handling/][Strategies for Rails Logging and Error Handling]]
</pre>
<p>
I tried using a <code>file:../blog</code> syntax, but that either would work on the home
page or in the specific blog article, but not both. <code>http:/blog</code> links would
work in Chrome but not mobile Safari. Hopefully, one day we&#8217;ll be able to
specify relative links from blog article to blog article. <i>For now, this is a
big <b>gotcha</b>.</i>
<b>Tip</b>: You can specify relative links between org pages using the <code>.org</code> file
suffix, rather than html. The earlier example could have been specified as:
</p>
<pre class="example">
[[file:misc/telecommuting.org][Why telecommuting works and how I maximize productivity]]
</pre>
<p>
That allows you to put your cursor on the link in emacs, and hit F12 to go
the org file! I&#8217;ve got <code>F12</code> mapped to <code>org-open-at-point</code>. Awesome!
</p>
</li>
<li>Bold and italic styling (text inside of stars and /) was a bit of mystery
using the standard theme. Octopress has styling for <code>&lt;strong&gt;</code> and <code>&lt;em&gt;</code>. Org-mode spits out <code>&lt;b&gt;</code> and
<code>&lt;i&gt;</code> tags.
Add this to <code>sass/custom/_fonts.scss</code>.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nt">b</span> <span class="p">{</span> <span class="k">font-weight</span><span class="o">:</span> <span class="k">bold</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nt">i</span> <span class="p">{</span> <span class="k">font-style</span><span class="o">:</span> <span class="k">italic</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Code styling (text inside of equals) <code>like this</code> did not work after a code block unless I added
the <code>div</code> tag to this line around 100 in <code>_syntax.scss</code>. You&#8217;re just adding
the <code>div</code> selector.
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="o">//</span> <span class="nt">Sometimes</span> <span class="nt">html</span> <span class="nt">gen</span> <span class="nt">by</span> <span class="nt">org-mode</span> <span class="nt">misses</span> <span class="nt">p</span> <span class="nt">or</span> <span class="nt">li</span> <span class="nt">tags</span><span class="o">,</span> <span class="nt">so</span> <span class="nt">add</span> <span class="nt">div</span> <span class="nt">to</span> <span class="nt">the</span> <span class="nt">mix</span>
</span><span class='line'><span class="nt">div</span><span class="o">,</span> <span class="nt">p</span><span class="o">,</span> <span class="nt">li</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">code</span> <span class="err">{</span>
</span><span class='line'>    <span class="o">@</span><span class="n">extend</span> <span class="o">.</span><span class="n">mono</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
</li>
</ol>
</div>
</div>
</div>

<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Useful Scripts</h2>
<div class="outline-text-2" id="text-6">
<ul class="org-ul">
<li>Just configure <code>OCTO_HOME</code>
</li>
<li>Emacs tip: Visit the created file by placing cursor over file name and then hit <code>Ctrl-x, f</code>.
</li>
</ul>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">OCTO_HOME</span><span class="o">=</span>~/octopress
</span><span class='line'>ogen <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>; rake generate; <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>osave <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>; git commit -am <span class="s2">&quot;Updates&quot;</span> <span class="o">&amp;&amp;</span> git push origin <span class="nb">source</span>; <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>odeploy <span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>; osave; rake gen_deploy; <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c"># this one is for orgmode only</span>
</span><span class='line'>opost<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>
</span><span class='line'>  <span class="nv">output</span><span class="o">=</span><span class="k">$(</span>rake new_post<span class="o">[</span><span class="s2">&quot;${1}&quot;</span><span class="o">]</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_file</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$output</span> | awk <span class="s1">&#39;{print $4}&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">base</span><span class="o">=</span><span class="k">$(</span>basename <span class="nv">$new_file</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_location</span><span class="o">=</span><span class="nv">$OCTO_HOME</span>/source/org_posts/
</span><span class='line'>  mv <span class="nv">$OCTO_HOME</span>/<span class="nv">$new_file</span> <span class="nv">$new_location</span>
</span><span class='line'>  <span class="nb">echo </span>created <span class="nv">$new_location</span>/<span class="nv">$base</span>
</span><span class='line'>  <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>opage<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>
</span><span class='line'>  rake new_page<span class="o">[</span><span class="s2">&quot;${1}&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">Emacs setup</h2>
<div class="outline-text-2" id="text-7">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;; Justin&#39;s customized org to octopress publishing</span>
</span><span class='line'><span class="c1">;; Based on</span>
</span><span class='line'><span class="c1">;; org-mode 8.x+</span>
</span><span class='line'><span class="c1">;; http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/</span>
</span><span class='line'><span class="c1">;; https://github.com/yoshinari-nomura/org-octopress</span>
</span><span class='line'><span class="c1">;; See http://wwww.railsonmaui.com</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; the converter from org to jekyll html files</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;ox-jekyll</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; I prefer to use the plugin for source formatting. More colors!</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">org-jekyll-use-src-plugin</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; We&#39;re going to create the yaml-front-matter in the rake task</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">org-jekyll-include-yaml-front-matter</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">save-then-publish</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">save-buffer</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">org-save-all-org-buffers</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">org-publish-current-project</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">org-export-with-sub-superscripts</span> <span class="o">`</span><span class="nv">{}</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">my-common-octopress-settings</span>
</span><span class='line'>      <span class="o">&#39;</span><span class="p">(</span><span class="ss">:base-extension</span> <span class="s">&quot;org&quot;</span>
</span><span class='line'>                        <span class="ss">:with-toc</span> <span class="no">nil</span>
</span><span class='line'>                        <span class="ss">:with-sub-superscript</span> <span class="no">nil</span>
</span><span class='line'>                        <span class="ss">:section-numbers</span> <span class="no">nil</span>
</span><span class='line'>                        <span class="ss">:recursive</span> <span class="no">t</span>
</span><span class='line'>                        <span class="ss">:publishing-function</span> <span class="nv">org-jekyll-publish-to-html</span>
</span><span class='line'>                        <span class="ss">:headline-levels</span> <span class="mi">4</span>
</span><span class='line'>                        <span class="ss">:body-only</span> <span class="no">t</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">my-static-directories</span> <span class="o">&#39;</span><span class="p">(</span><span class="s">&quot;about&quot;</span> <span class="s">&quot;meta&quot;</span> <span class="s">&quot;tips&quot;</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">my-base-directory</span> <span class="s">&quot;~/j/railsonmaui-octopress/source&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-create-octopress-static</span> <span class="p">(</span><span class="nv">prj</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">base-dir</span> <span class="p">(</span><span class="nv">expand-file-name</span> <span class="nv">prj</span><span class="p">)))</span>
</span><span class='line'>    <span class="o">`</span><span class="p">(</span><span class="o">,</span><span class="nv">prj</span> <span class="o">.</span> <span class="p">(</span><span class="ss">:base-directory</span> <span class="o">,</span><span class="nv">base-dir</span>
</span><span class='line'>                              <span class="ss">:publishing-directory</span> <span class="o">,</span><span class="nv">base-dir</span>
</span><span class='line'>                              <span class="o">,@</span><span class="nv">my-common-octopress-settings</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">my-static-components</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">mapcar</span> <span class="ss">&#39;my-create-octopress-static</span> <span class="nv">my-static-directories</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">default-directory</span> <span class="nv">my-base-directory</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">setq</span> <span class="nv">org-publish-project-alist</span>
</span><span class='line'>      <span class="o">`</span><span class="p">(</span>
</span><span class='line'>        <span class="c1">;; components</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&quot;blog&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="ss">:components</span> <span class="p">(</span><span class="s">&quot;blog-org&quot;</span> <span class="s">&quot;blog-extra&quot;</span> <span class="s">&quot;about&quot;</span> <span class="s">&quot;meta&quot;</span> <span class="s">&quot;tips&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">;; blog articles</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&quot;blog-org&quot;</span> <span class="o">.</span>  <span class="p">(</span><span class="ss">:base-directory</span> <span class="o">,</span><span class="p">(</span><span class="nv">expand-file-name</span> <span class="s">&quot;org_posts&quot;</span><span class="p">)</span>
</span><span class='line'>                                        <span class="ss">:publishing-directory</span> <span class="o">,</span><span class="p">(</span><span class="nv">expand-file-name</span> <span class="s">&quot;_posts&quot;</span><span class="p">)</span>
</span><span class='line'>                                        <span class="o">,@</span><span class="nv">my-common-octopress-settings</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="s">&quot;blog-extra&quot;</span> <span class="o">.</span> <span class="p">(</span><span class="ss">:base-directory</span> <span class="o">,</span><span class="p">(</span><span class="nv">expand-file-name</span> <span class="s">&quot;org_posts&quot;</span><span class="p">)</span>
</span><span class='line'>                                         <span class="ss">:publishing-directory</span> <span class="o">,</span><span class="p">(</span><span class="nv">expand-file-name</span> <span class="s">&quot;.&quot;</span><span class="p">)</span>
</span><span class='line'>                                         <span class="ss">:base-extension</span> <span class="s">&quot;css\\|pdf\\|png\\|jpg\\|gif\\|svg&quot;</span>
</span><span class='line'>                                         <span class="ss">:publishing-function</span> <span class="nv">org-publish-attachment</span>
</span><span class='line'>                                         <span class="ss">:recursive</span> <span class="no">t</span>
</span><span class='line'>                                         <span class="ss">:author</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">;; static articles</span>
</span><span class='line'>        <span class="o">,@</span><span class="p">(</span><span class="nv">my-static-components</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>

<div id="outline-container-sec-8" class="outline-2">
<h2 id="sec-8">Deploying to Github: Directory Structure of Octopress and the master and source Git Branches</h2>
<div class="outline-text-2" id="text-8">
<p>
Github offers free hosting of both the blog deployment and source. You&#8217;re
looking at the deployment right now. You can find the source here at
<a href="https://github.com/justin808/justin808.github.io">my git repo justin808.github.io</a>. I doubt you could beat the price, performance, and
convenience. You can look inside of this repo, clone it, etc. and you have
everything that it took to make this blog.
</p>

<p>
I originally was quite confused by the concept of using two separate git
branches to make up what gets deployed on the live website versus the git
repository of my articles. Plus, there&#8217;s the issue of Octopress git repository
that you clone when starting out. Eventually, I figured out that the two branches
simply contain different files, with one containing the original Octopress
files. Here&#8217;s a few screen grabs that might clarify the situation for you.
</p>

<p>
Don&#8217;t forget that you never push to the master branch, but rather the <code>rake
deploy</code> task does it for you. Instead, you run <code>git push origin source</code> to push
the content of your blog to github.
</p>

<p>
The <code>octopress/public</code> directory corresponds to what you&#8217;ll find on the github
site for your deployment (master branch).
</p>

<p>
<img src="http://www.railsonmaui.com//images/2013-04-27-octopress-setup-with-github-and-org-mode/public-dir-corresponds-master-branch.png">
</p>

<p>
The octopress/.gitignore file contains entries like <code>public</code>, which essentially
keeps the <code>rake generate</code> files out of the source branch.
</p>

<p>
Here&#8217;s the github master branch right after creation. Note the correspondence
with <code>public</code>. This is what gets deployed as your blog.
<img src="http://www.railsonmaui.com//images/2013-04-27-octopress-setup-with-github-and-org-mode/github-master-branch.png">
</p>

<p>
Here&#8217;s the github source branch. This contains the octopress environment, as
well as your customizations and blog posts.
</p>
<img src="http://www.railsonmaui.com//images/2013-04-27-octopress-setup-with-github-and-org-mode/github-source-branch.png">
</div>
</div>
<div id="outline-container-sec-9" class="outline-2">
<h2 id="sec-9">Useful Links</h2>
<div class="outline-text-2" id="text-9">
<ol class="org-ol">
<li><a href="http://webdesign.tutsplus.com/tutorials/applications/getting-started-with-octopress/">Getting Started with Octopress</a>: Nice overall tutorial. Very current!
March 2013.
</li>
<li><a href="http://robdodson.me/blog/2012/04/30/custom-domain-with-octopress-and-github-pages">Rob Dodson on Octopress</a>: Most of the instructions I show below are from this
posting on April 30th, 2012.
</li>
<li><a href="http://joelmccracken.github.io/entries/octopress-is-pretty-sweet/">Joel McCracken on Octopress</a>: Use Jekyll? You Really Should Be Using Octopress
</li>
<li><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">Github directions on setting up a custom domain</a>
</li>
<li><a href="http://code.dblock.org/octopress-setting-up-a-blog-and-contributing-to-an-existing-one">dblock.org Article on Octopress</a>: A good explanation from Jan 17, 2012,
especially on the difference of the source and master branches.
</li>
<li><a href="http://blog.paphus.com/blog/2012/08/01/introducing-octopress-blogging-for-org-mode/">Introducing Octopress Blogging for Org-Mode</a>: For org-mode. See below.
</li>
<li><a href="http://hiltmon.com/blog/2013/04/17/18-months-of-octopress/">18 Months of Octopress</a>: Nice article on why Octopress was worth the switch.
</li>
<li><a href="http://odino.org/bash-aliases-for-octopress/">Shell Aliases for Octopress</a>: Save time with these shortcuts
</li>
<li><a href="https://github.com/yoshinari-nomura/org-octopress">org-octopress package</a>: The connection between emacs/org-mode and octopress.
</li>
<li><a href="http://www.brokenlinkcheck.com/broken-links.php">Check your blog for broken links</a>: Super useful to scan for broken links.
This link is more efficient than the <a href="http://validator.w3.org/checklink">W3C Link Checker</a>
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-10" class="outline-2">
<h2 id="sec-10">Live Reload</h2>
<div class="outline-text-2" id="text-10">
<p>
Previously, I tried to get Live Reload to work. It would be neat it worked, but
I ran into a snag. The browser gets triggered to update before the Jekyll page
is generated. I tried some various techniques for working around this, but
nothing seemed reliable. If you figure out how to fix this, please let me know.
</p>
</div>
</div>
<div id="outline-container-sec-11" class="outline-2">
<h2 id="sec-11">Parting words&#x2026;</h2>
<div class="outline-text-2" id="text-11">
<p>
Thanks in advance for any suggestions on this article. I hope you find it
helpful. 
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Form and Disabling Buttons on Submit by Default]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/02/23/simple-form-and-disable-processing-by-default/"/>
    <updated>2014-02-23T21:43:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/02/23/simple-form-and-disable-processing-by-default</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">TLDR</h2>
<div class="outline-text-2" id="text-1">
<p>
Here&#8217;s an easy way to have all your SimpleForm submit buttons default to setting
<code>data-disable-with</code> so that you don&#8217;t get errors when users double click on
submit buttons. If you&#8217;ve gotten a few <code>ActiveRecord::RecordNotUnique</code> errors
that were hard to reproduce, then here&#8217;s your solution, with our without
SimpleForm. Additionally, using <code>data-disable-with</code> provides the user with nice
feedback once a button is clicked.
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">ActiveRecord::RecordNotUnique Error!</h2>
<div class="outline-text-2" id="text-2">
<p>
If you&#8217;re using Devise, and you get a <code>ActiveRecord::RecordNotUnique</code> error when
a new user is signing up, where do you look?
</p>

<pre class="example">
An ActiveRecord::RecordNotUnique occurred in registrations#create:

PG::UniqueViolation: ERROR: duplicate key value violates unique constraint
"index_users_on_email" DETAIL: Key (email)=(somebody@yahoo.com) already
exists. : INSERT INTO "users" ("address", "city", "confirmation_sent_at",
"confirmation_token", "created_at", "default_location_id", "email",
"encrypted_password", "first_name", "last_name", "mobile", "role", "state",
"updated_at", "zip_code") VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11,
$12, $13, $14, $15) RETURNING "id"
</pre>

<p>
At first, I was concerned that my unique index on my users table is not case
insensitive. I started going down the road of converting my normal unique index
on users.email to this index:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">UNIQUE</span> <span class="k">INDEX</span> <span class="n">users_email_ci_idx</span> <span class="k">ON</span> <span class="n">users</span> <span class="p">((</span><span class="k">lower</span><span class="p">(</span><span class="n">email</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>

<p>
However, I soon figured out that Devise was already always saving email in the
database in lower case via a <code>before_validation</code> hook.
</p>

<p>
So then I tried to double click the <code>SAVE</code> button, and, <b>BOOM</b>, I got the same error.
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">data-disable-with=&#8217;Processing&#x2026;&#8217;</h2>
<div class="outline-text-2" id="text-3">
<p>
A little bit of googling quickly revealed some handy rails techniques disabling
a submit button after being clicked, namely the setting of attribute
data-disable-with: &#8220;Some Message&#x2026;&#8221; on both links and buttons. This works
nicely to fix the double submit RecordNotUnique error, and it provides some
sweet user feedback upon clicking a button. Here&#8217;s an example of a <code>SAVE</code> button.
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-02-23-simple-form-and-disable-processing-by-default/button-before-clicking.jpg">
</p>

<p>
Immediately after clicking the <code>SAVE</code> button, the button disables and the text changes.
</p>

<p>
<img src="http://www.railsonmaui.com//images/2014-02-23-simple-form-and-disable-processing-by-default/button-disabled.jpg">
</p>
</div>

<div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Buttons</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Example and API: <a href="http://api.rubyonrails.org/classes/ActionView/Helpers/FormTagHelper.html#method-i-button_tag">button_tag</a>
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%= button_tag &quot;Checkout&quot;, data: { disable_with =&gt; &quot;Please wait...&quot; } %&gt;
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Links</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Example and API: <a href="http://apidock.com/rails/ActionView/Helpers/UrlHelper/link_to?q=link_to">link_to</a>
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%= link_to &quot;Profile&quot;, profile_path(@profile), data: { disable_with: &quot;Processsing...&quot; } %&gt;
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">SimpleForm Submit Buttons</h3>
<div class="outline-text-3" id="text-3-3">
<p>
Even better, this can be done in one place for all SimpleForm submit buttons!
</p>

<p>
In a file like <code>config/simple_form.rb</code>, place this initialization code:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">SimpleForm</span><span class="p">:</span><span class="ss">:FormBuilder</span><span class="o">.</span><span class="n">class_eval</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">submit_with_override</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="n">data_disable_with</span> <span class="o">=</span> <span class="p">{</span> <span class="n">disable_with</span><span class="p">:</span> <span class="s1">&#39;Processing...&#39;</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">options</span><span class="o">[</span><span class="ss">:data</span><span class="o">]</span> <span class="o">=</span> <span class="n">data_disable_with</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">options</span><span class="o">[</span><span class="ss">:data</span><span class="o">]</span> <span class="o">||</span> <span class="p">{})</span>
</span><span class='line'>    <span class="n">submit_without_override</span><span class="p">(</span><span class="n">field</span><span class="p">,</span> <span class="n">options</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">alias_method_chain</span> <span class="ss">:submit</span><span class="p">,</span> <span class="ss">:override</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>
What the bit of code above does is that it:
</p>
<ol class="org-ol">
<li>Opens up the FormBuilder class to add a method <code>submit_with_override</code>.
</li>
<li>Modifies options hash&#8217;s :data element, setting a default value for key
<code>disable_with</code> that will not apply if there&#8217;s already a value there, thus
allowing the default to be overridden by any individual button.
</li>
<li>Calls <a href="http://apidock.com/rails/Module/alias_method_chain">alias_method_chain</a> which makes is so that a call to submit actually
calls <code>submit_with_override</code> and that method can call
<code>submit_without_override</code>, which is the original <code>submit</code> method. The pattern
of naming the methods <code>with_override</code> and <code>without_override</code> is part of the
<code>alias_method_chain</code> call. Pretty darn cool!
</li>
</ol>

<p>
Here&#8217;s a sample sign-up form that overrides the default &#8220;Processing&#x2026;&#8221; label
when the <code>SAVE</code> button is clicked.
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='haml'><span class='line'><span class="nc">.box.clearfix.box-last</span>
</span><span class='line'>  <span class="p">=</span> <span class="n">simple_form_for</span> <span class="n">resource</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="n">resource_name</span><span class="p">,</span> <span class="ss">url</span><span class="p">:</span> <span class="n">registration_path</span><span class="p">(</span><span class="n">resource_name</span><span class="p">),</span> <span class="ss">html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;&quot;</span><span class="p">}</span>  <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">error_notification</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:first_name</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">autofocus</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">label_html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;label-required&quot;</span><span class="p">},</span> <span class="n">input_html</span><span class="p">:</span> <span class="p">{</span><span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;.col-md-4&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:last_name</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="n">label_html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;label-required&quot;</span><span class="p">},</span> <span class="n">input_html</span><span class="p">:</span> <span class="p">{</span><span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;.col-md-4&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">input</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">required</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="n">label_html</span><span class="p">:</span> <span class="p">{</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;label-required&quot;</span><span class="p">},</span> <span class="n">input_html</span><span class="p">:</span> <span class="p">{</span><span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;.col-md-4&quot;</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">=</span> <span class="n">f</span><span class="o">.</span><span class="n">button</span> <span class="ss">:submit</span><span class="p">,</span> <span class="s2">&quot;SAVE&quot;</span><span class="p">,</span> <span class="ss">class</span><span class="p">:</span> <span class="s2">&quot;submit&quot;</span><span class="p">,</span> <span class="ss">data</span><span class="p">:</span> <span class="p">{</span> <span class="n">disable_with</span><span class="p">:</span> <span class="s2">&quot;Creating New Account...&quot;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Now go and click on some of your submit buttons, and they will all disable and
display &#8220;Processing&#x2026;&#8221;. On a remote form that returned <code>js.erb</code>, I had to send
back this line to reset the submit button:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#js-some-button&quot;</span><span class="p">).</span><span class="nx">removeAttr</span><span class="p">(</span><span class="s2">&quot;disabled&quot;</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;value&#39;</span><span class="p">,</span> <span class="s1">&#39;ORIGINAL BUTTON TEXT&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">References</h2>
<div class="outline-text-2" id="text-4">
<p>
Stack Overflow Discussions:
</p>
<ol class="org-ol">
<li><a href="http://stackoverflow.com/questions/11505801/prevent-double-submits-in-a-rails-ajax-form/20161880">Prevent Double Clicks in Rails Ajax Form</a>
</li>
<li><a href="http://stackoverflow.com/questions/11340843/default-disable-with-for-simple-form-submit/11610795#11610795">Default Disable With for Simple Form</a>
</li>
<li><a href="http://stackoverflow.com/questions/3160204/in-rails-controllers-how-to-prevent-double-submit-when-user-double-clic-submit">How to Prevent Double Submit in Rails</a>
</li>
</ol>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RubyMine/IntelliJ Regexp Search/Replace]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/01/25/using-rubymine-slash-intellij-regexp-search-slash-replace/"/>
    <updated>2014-01-25T09:05:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/01/25/using-rubymine-slash-intellij-regexp-search-slash-replace</id>
    <content type="html"><![CDATA[<p>
RubyMine&#8217;s interactive search/replace is awesome. The Regexp feature is
especially useful. Not only will it help you edit faster, but it will improve
your ability to write RegExp&#8217;s in your code. When do you need to use a regexp?
Whenever a standard find/replace won&#8217;t cut it. For example, if you changing the
rspec syntax from one form to another, such as from:
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">let</span><span class="p">(</span><span class="ss">:my_subject</span><span class="p">)</span> <span class="p">{</span> <span class="n">something</span> <span class="p">}</span>
</span><span class='line'><span class="n">it</span> <span class="p">{</span> <span class="n">expect</span><span class="p">(</span><span class="n">my_subject</span><span class="o">.</span><span class="n">value</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span><span class="p">(</span><span class="n">some_value</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>
to
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">subject</span> <span class="p">{</span> <span class="n">something</span> <span class="p">}</span>
</span><span class='line'><span class="n">its</span><span class="p">(</span><span class="ss">:value</span><span class="p">)</span> <span class="p">{</span> <span class="n">should</span> <span class="n">eq</span><span class="p">(</span><span class="n">some_value</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>
The following screencast shows how you can interactively use the Regexp feature
to figure out the right regexp to search for as well as the right replacement.
</p>

<p>
In this example, I&#8217;m replacing one rspec syntax with a replacement one.
</p>

<pre class="example">
it \{ expect\(my_subject\.(\w+)\)\.to eq\((.*)\) }
</pre>

<p>
Replace with:
</p>
<pre class="example">
its(:$1) { should eq($2) }
</pre>

<p>
Here&#8217;s a few key tips:
</p>
<ol class="org-ol">
<li>Be sure to first check the regexp check-box if you&#8217;ll need that.
</li>
<li>As you type each character into the search box, observe if you&#8217;re increasing
your match area to get what you want.
</li>
<li>If a character doesn&#8217;t match, then try escaping the character. For example,
I had to escape the <code>{</code> and <code>(</code> as those characters have special meaning in
the regexp.
</li>
<li>Once you get a match with the right groupings for replacement, then put in
the <code>$1</code>, <code>$2</code>, etc. into the replacement box to refine your replacement string.
</li>
<li>Then hit Opt-P (or Alt-P) to replace.
</li>
</ol>

<p>
This is best shown with this 2 minute screencast.
</p>

<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/U_UaOjcR4wQ "></iframe></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating From Bash to Zsh]]></title>
    <link href="http://www.railsonmaui.com//blog/2014/01/04/migrating-from-bash-to-zsh/"/>
    <updated>2014-01-04T04:00:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2014/01/04/migrating-from-bash-to-zsh</id>
    <content type="html"><![CDATA[<p>
I migrated from Bash to Zsh in October and I&#8217;m quite thrilled with zsh.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Motivation</h2>
<div class="outline-text-2" id="text-1">
<p>
What motivated me to finally move?
</p>

<ol class="org-ol">
<li>I no longer used the shell within Emacs. If you have a bash setup that works
well in Emacs, don&#8217;t try to switch. Since moving from emacs bindings to
evil-mode, I am quite comfortable in Vim, so I find myself using iTerm way
more than the Emacs shell.
</li>
<li>While doing some pair programming with <a href="https://twitter.com/jakeonrails">@jakeonrails</a>, I saw the coolness of
zsh, which he pointed out to me &#8220;was no big deal&#8221;, just what&#8217;s on the
<a href="http://railscasts.com/episodes/308-oh-my-zsh">Railscasts Episode on Oh My ZSH</a>.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Tips on Migrating</h2>
<div class="outline-text-2" id="text-2">
<p>
Here&#8217;s a few tips to somebody migrating might find useful:
</p>

<ol class="org-ol">
<li>Try out <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> and take a look at the <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes">themes examples</a>. The themes seem to
be all customizations of the prompt. I&#8217;ll share what I came up with at the
bottom, which is a modification of the default robbyrussell theme.
</li>
<li>While most of your bash code will migrate as-is, this is a good time to clean
up some cruft in your files. I like to organize my shell code into small
files, each with a particular theme, and then have the .zshrc source those,
rather than having a giant .zshrc file.
</li>
<li>The oh-my-zsh plugins are way for you to share shell configuration with
other members of the community. It&#8217;s simple to read what those plugins are
doing. Many are just setting aliases. I started to migrate my own
configuration code by converting to plugins, but then I realized that that&#8217;s
overkill. If I ever want to share the configuration, at that point, I can
convert to a plugin, which is quite simple.
</li>
<li>If you have any shell functions that use <code>[</code>, you might have escape that
character for zsh.
</li>
<li>If you install zsh plugins, be very careful with any newly installed aliases
from the plugins. I previously had <code>gl</code> aliased as &#8216;git log&#8217; and the git
plugin uses <code>gl</code> for <code>git pull</code>, <a href="http://stackoverflow.com/questions/19085203/recovering-from-accidental-git-pull-on-octopress-branches">which caused me a huge headache</a> when I ran
that within my octopress branch.
</li>
<li>You need to escape the <code>^</code> character for commands such as <code>git reset HEAD\^</code>
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Migration Notes</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Escape []</h3>
<div class="outline-text-3" id="text-3-1">
<p>
In the third line of this function, I had to escape the <code>[</code> and the <code>]</code>.
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>opost<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="nb">cd</span> <span class="nv">$OCTO_HOME</span>
</span><span class='line'>  <span class="nv">output</span><span class="o">=</span><span class="k">$(</span>rake new_post<span class="se">\[</span><span class="s2">&quot;${1}&quot;</span><span class="se">\]</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_file</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="nv">$output</span> | awk <span class="s1">&#39;{print $4}&#39;</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">base</span><span class="o">=</span><span class="k">$(</span>basename <span class="nv">$new_file</span><span class="k">)</span>
</span><span class='line'>  <span class="nv">new_location</span><span class="o">=</span><span class="nv">$OCTO_HOME</span>/source/org_posts/
</span><span class='line'>  mv <span class="nv">$OCTO_HOME</span>/<span class="nv">$new_file</span> <span class="nv">$new_location</span>
</span><span class='line'>  <span class="nb">echo </span>created <span class="nv">$new_location$base</span>
</span><span class='line'>  <span class="nb">cd</span> -
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">My new zsh prompt</h3>
<div class="outline-text-3" id="text-3-2">
<p>
<img src="http://www.railsonmaui.com//images/2013-09-29-migrating-from-bash-to-zsh/prompt.jpg">
</p>

<p>
To set this up, I created a custom theme called justin808 by doing the following:
</p>

<ol class="org-ol">
<li>Create a theme file <code>oh_my_zsh/custom/justin808.zsh-theme</code>. See below.
</li>
<li>Export the theme name.
</li>
</ol>

<p>
This is what it looks like in my .zshrc file. The first line is because I moved
my ZSH configuration files.
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">ZSH</span><span class="o">=</span><span class="nv">$HOME</span>/.oh-my-zsh
</span><span class='line'><span class="nb">export </span><span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">&quot;justin808&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>
Here is my theme file <code>oh_my_zsh/custom/justin808.zsh-theme</code>
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">hostname</span><span class="o">=</span><span class="sb">`</span>hostname<span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$hostname</span> !<span class="o">=</span> <span class="s2">&quot;$HOME_HOST&quot;</span> <span class="o">]</span> <span class="o">||</span> <span class="o">[</span> <span class="nv">$USER</span> !<span class="o">=</span> <span class="s2">&quot;justin&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">host_stuff</span><span class="o">=</span><span class="s1">&#39;%n@%m:&#39;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nv">host_stuff</span><span class="o">=</span><span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">fi  </span>
</span><span class='line'><span class="nv">PROMPT</span><span class="o">=</span><span class="s1">&#39;%{$fg_bold[red]%}➜ %{$fg_bold[green]%}%p ${host_stuff}%{$fg[cyan]%}${PWD/#$HOME/~} %{$fg_bold[blue]%}$(git_prompt_info)%{$fg_bold[blue]%} % %{$reset_color%}&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># display exitcode on the right when &gt;0</span>
</span><span class='line'><span class="nv">return_code</span><span class="o">=</span><span class="s2">&quot;%(?..%{$fg[red]%}%? ↵%{$reset_color%})&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">RPROMPT</span><span class="o">=</span><span class="s1">&#39;${return_code}$(git_prompt_status)%{$reset_color%} [%*]&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># RPROMPT=&#39;[%*]&#39;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_PREFIX</span><span class="o">=</span><span class="s2">&quot;(%{$fg[red]%}&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_SUFFIX</span><span class="o">=</span><span class="s2">&quot;%{$reset_color%}&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_DIRTY</span><span class="o">=</span><span class="s2">&quot;%{$fg[blue]%}) %{$fg[yellow]%}✗%{$reset_color%}&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_CLEAN</span><span class="o">=</span><span class="s2">&quot;%{$fg[blue]%})&quot;</span>
</span><span class='line'><span class="nv">GIT_PS1_SHOWUPSTREAM</span><span class="o">=</span>verbose
</span><span class='line'>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_ADDED</span><span class="o">=</span><span class="s2">&quot;%{$fg[green]%} ✚&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_MODIFIED</span><span class="o">=</span><span class="s2">&quot;%{$fg[blue]%} ✹&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_DELETED</span><span class="o">=</span><span class="s2">&quot;%{$fg[red]%} ✖&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_RENAMED</span><span class="o">=</span><span class="s2">&quot;%{$fg[magenta]%} ➜&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_UNMERGED</span><span class="o">=</span><span class="s2">&quot;%{$fg[yellow]%} ═&quot;</span>
</span><span class='line'><span class="nv">ZSH_THEME_GIT_PROMPT_UNTRACKED</span><span class="o">=</span><span class="s2">&quot;%{$fg[cyan]%} ✭&quot;</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GoGaRuCo 2013: Community > Code]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/09/22/gogaruco-2013/"/>
    <updated>2013-09-22T16:23:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/09/22/gogaruco-2013</id>
    <content type="html"><![CDATA[<p>
This past weekend was my first <a href="http://gogaruco.com/">GoGaRuCo</a>. Here&#8217;s a perspective from a newbie,
along with lots of photos.
</p>
<a target=_ href=https://www.facebook.com/photo.php?fbid=674318365913265&set=a.674315479246887.1073741830.484394724905631&type=1>
<p>
<img src="http://www.railsonmaui.com//images/2013-09-22-gogaruco-2013/GoGaRuCo1.jpg">
</p>
</a>

<p>
The number one thing I discovered is that GoGaRuCo, like Ruby, is not just about
code. It&#8217;s about the awesome people and the community. 
</p>

<p>
If you just want to see the talks at GoGaRuCo, don&#8217;t attend. All of the talks
will be available on web shortly. So why did the conference sell out, with about
200 wait-listed people begging to attend?
</p>

<p>
GoGaRuCo attendees are madly passionate about programming, especially in Ruby.
Most attendees work at start-ups, at web consulting firms, or as freelancers.
The common thread is that we all love to program. It&#8217;s not work. It&#8217;s a passion.
And it&#8217;s artistic, cutting-edge, relevant, and fun!
</p>

<p>
Amongst the community, there&#8217;s a genuine feeling that we&#8217;re all in this
together, and the more we can help each other, the better off we and the world
will be. This is truly the open source spirit of contributing whatever code you
can give back to the community. Consequently, for me, attending the conference
was about meeting others who contribute to open-source and learning more about
how I can contribute. As a bonus, I got a chance to personally meet the people
whom I follow on Twitter, read their blogs, and use their open source.
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">My Top 14 for 2013 GoGaRuCo</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>Won&#8217;t need to buy any new T-shirts for a long time.
</li>
<li>Got a poster tube that doubles as a form for caissons.
</li>
<li>No stress over picking which talks to attend, with one track.
</li>
<li>Can, but won&#8217;t, write my own replacement for <a href="http://www.confreaks.com/videos/2669-gogaruco2013-the-littlest-orm">ActiveRecord</a> and IRB.
</li>
<li><a href="http://www.confreaks.com/videos/2670-gogaruco2013-solving-the-rubik-s-cube-in-20-seconds">Will finally be able to solve the Rubik&#8217;s cube (soon).</a>
</li>
<li>Now understand why privacy from the NSA really does matter to me.
</li>
<li>Can write Ruby to fly a surveillance drone.
</li>
<li>Got tips on the performance tuning one of the biggest open source rails
applications, Discourse.
</li>
<li>Everything I wanted to know about Ruby, and my co-worker&#8217;s compensation, but
was afraid to ask.
</li>
<li><a href="https://www.youtube.com/watch?v=6cdbx1BmboQ">Who is @JEG2?</a>
</li>
<li>Plenty of break time between talks made for lots of conversation.
</li>
<li>Personally met many of the folks I follow on Twitter!
</li>
<li>Most folks I met want to visit me in Maui at my B&amp;B <a href="http://www.sugarranchmaui.com">Sugar Ranch Maui</a>!
</li>
<li>Met the most talented and interesting group of programmers anywhere, who
all love Ruby and programming just as much as I do.
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Tips</h2>
<div class="outline-text-2" id="text-2">
<ol class="org-ol">
<li>Don&#8217;t miss the pre-parties, breakfasts, or after-parties.
</li>
<li>Don&#8217;t plan to work during the conference, and leave your laptop at home. An
good mobile phone or tablet is very useful.
</li>
<li>Sign up early if hanging out with other passionate programmers is your idea
of fun!
</li>
</ol>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Ruby on Maui, 2014?</h2>
<div class="outline-text-2" id="text-3">
<p>
If you interested in attending a small Ruby conference in Maui next year, maybe
in May, please get in touch with me.
</p>
</div>
</div>
<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Photographs</h2>
<div class="outline-text-2" id="text-4">
<p>
If you&#8217;d like full resolution, non-watermarked copies of any of the images,
please get in touch with me. I personally cropped and adjusted the exposure on
all images. These were taken with a Nikon D5100, SB-400 AF Flash, and a very
basic Nikon 18-55mm lens.
</p>

<p>
I hope that folks tag themselves in the Facebook albums! And please share them.
</p>
</div>

<div id="outline-container-sec-4-1" class="outline-3">
<h3 id="sec-4-1">Facebook</h3>
<div class="outline-text-3" id="text-4-1">
<p>
High resolution (2560 pixel) photos of best half that I took (about 200 total):
</p>
<ul class="org-ul">
<li><a href="https://www.facebook.com/media/set/?set=a.674312419247193.1073741829.484394724905631&type=1&l=e7d75dd035">Pre-Party at Pivotal Labs, September 19, 2013</a>
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.674315479246887.1073741830.484394724905631&type=1&l=5e5f0ccdf2">Sessions, September 20, 2013</a>
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.674317992579969.1073741831.484394724905631&type=1&l=84732636b8">After-Party, September 20, 2013</a>
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.674798672531901.1073741832.484394724905631&type=1&l=d50e526b26">Sessions, September 21, 2013</a>
</li>
<li><a href="https://www.facebook.com/media/set/?set=a.674800445865057.1073741833.484394724905631&type=1&l=ba7bd127b1">After-Party, September 21, 2013</a>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-4-2" class="outline-3">
<h3 id="sec-4-2">Flickr</h3>
<div class="outline-text-3" id="text-4-2">
<p>
I uploaded the full set of 2560 pixel images here. This has the half not shown
on Facebook.
</p>
<ul class="org-ul">
<li><a href="http://www.flickr.com/photos/justingordon/sets/72157635909414895/">First 200</a>: Pre-party, conference day 1, some of first after-party.
</li>
<li><a href="http://www.flickr.com/photos/justingordon/sets/72157635909144156/">Next 200</a>: Conference day 2.
</li>
<li><a href="http://www.flickr.com/photos/justingordon/sets/72157635909491013/">Last 134</a>: Conference day 2 and second post-party.
</li>
</ul>

<a target=_ href=https://www.facebook.com/photo.php?fbid=674800812531687&set=a.674800445865057.1073741833.484394724905631&type= >
<p>
<img src="http://www.railsonmaui.com//images/2013-09-22-gogaruco-2013/GoGaRuCo2.jpg">
</p>
</a>

<a target=_ href=https://www.facebook.com/photo.php?fbid=674319075913194&set=a.674317992579969.1073741831.484394724905631&type=1 >
<p>
<img src="http://www.railsonmaui.com//images/2013-09-22-gogaruco-2013/GoGaRuCo3.jpg">
</p>
</a>


<a target=_ href=https://www.facebook.com/photo.php?fbid=674799195865182&set=a.674798672531901.1073741832.484394724905631&type=1 >
<p>
<img src="http://www.railsonmaui.com//images/2013-09-22-gogaruco-2013/GoGaRuCo4.jpg">
</p>
</a>

<a target=_ href=https://www.facebook.com/photo.php?fbid=674321559246279&set=a.674317992579969.1073741831.484394724905631&type=1 >
<p>
<img src="http://www.railsonmaui.com//images/2013-09-22-gogaruco-2013/GoGaRuCo5.jpg">
</p>
</a>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Upgrading Octopress]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/09/15/upgrading-octopress/"/>
    <updated>2013-09-15T22:08:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/09/15/upgrading-octopress</id>
    <content type="html"><![CDATA[<p>
One of the criticisms of Octopress is how there&#8217;s no clear separation of the static
generation engine and the content of one&#8217;s website, and thus upgrading Octopress
is difficult. I delayed upgrading due to this. However, my concerns were
unfounded, as it was very painless to upgrade Octopress.
</p>

<p>
The instructions boil down to this short help page on <a href="http://octopress.org/docs/updating/">Updating Octopress</a>:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git pull octopress master     <span class="c"># Get the latest Octopress</span>
</span><span class='line'>bundle install                <span class="c"># Keep gems updated</span>
</span><span class='line'>rake update_source            <span class="c"># update the template&#39;s source</span>
</span><span class='line'>rake update_style             <span class="c"># update the template&#39;s style</span>
</span></code></pre></td></tr></table></div></figure>

<p>
The first step resulted in a few merge conflicts. I find RubyMine&#8217;s git conflict
resolution tools helpful, so I used those. Here&#8217;s a short <a href="http://youtu.be/x74Gd2lDC1A">screencast</a> (embedded
below) showing you how these tools helped with this process. Besides some minor
issues dealing with a few merge conflicts, there was nothing very interesting or
eventful about the upgrade, which means that the current process is really quite
OK.
</p>

<p>
I hope a few people find this demo of the RubyMine git conflict resolution tool
helpful. The key takeaways from this video are:
</p>

<ol class="org-ol">
<li>Merge conflicts show up as red in the list of changes.
<img src="http://www.railsonmaui.com//images/2013-09-15-upgrading-octopress/conflicts-red.jpg">
</li>

<li>Try the diff&#8217;ing buttons in the upper left to get 2 way views of
the 3 way merge.
<img src="http://www.railsonmaui.com//images/2013-09-15-upgrading-octopress/merge-window.jpg">
</li>
</ol>

<p>
3, &#8220;Yours&#8221; means your local changes, and &#8220;Theirs&#8221; means the server&#8217;s changes,
   or, in this case, the changes in the main Octopress development branch.
</p>

<p>
Did the upgrade work? You&#8217;re looking at the results of it.
</p>

<p>
It&#8217;s worth noting that I had one slight snag. When I merged sass/screen.scss, I
accidentally removed this line, which is used for the youtube plugin.
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@import</span> <span class="s2">&quot;custom/rve&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>
<p>
I could have figured this out by examining the history of the file and noting
that I had added this line, rather than it being part of Octopress. So yes, it
would be bit better if there was a cleaner separation between the Octopress
code and any enhancements. However, the current mechanism works, and it&#8217;s still
thousands of times better than WordPress. 
</p>

<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/x74Gd2lDC1A "></iframe></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Migrating From Capybara-Webkit to Poltergeist-PhantomJs]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/08/06/migrating-from-capybara-webkit-to-poltergeist-phantomjs/"/>
    <updated>2013-08-06T21:38:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/08/06/migrating-from-capybara-webkit-to-poltergeist-phantomjs</id>
    <content type="html"><![CDATA[<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Motivation</h2>
<div class="outline-text-2" id="text-1">
<p>
Today I migrated a medium size test suite from <a href="https://github.com/thoughtbot/capybara-webkit">capybara-webkit</a> to <a href="https://github.com/jonleighton/poltergeist">Poltergeist</a>
with <a href="http://phantomjs.org/index.html">PhantomJS</a>. I had two main motivations for switching:
</p>
<ol class="org-ol">
<li>PhantomJS is more sensitive to avoiding false positives. For example, in the
past, one could click on non-visible DOM elements with capybara-webkit.
While this may not currently be true with the latest Capybara, I&#8217;ve had good
luck with PhantomJS in the past.
</li>
<li>Speed. When I last checked, PhantomJS was faster. Speed is critical for slow
feature tests.
</li>
</ol>

<p>
Here&#8217;s one reason that Poltergeist is more accurate and <a href="https://github.com/jonleighton/poltergeist">sensitive to failure</a>: 
</p>

<blockquote>
<p>
When Poltergeist clicks on an element, rather than generating a DOM click event,
it actually generates a &#8220;proper&#8221; click. This is much closer to what happens when
a real user clicks on the page - but it means that Poltergeist must scroll the
page to where the element is, and work out the correct co-ordinates to click. If
the element is covered up by another element, the click will fail (this is a
good thing - because your user won&#8217;t be able to click a covered up element
either).
</p>
</blockquote>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Tips for Migrating</h2>
<div class="outline-text-2" id="text-2">
</div><div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Upgrade Gems First</h3>
<div class="outline-text-3" id="text-2-1">
<p>
At first, I lost time due to timing issues where I was clicking on elements of a
hidden dialog that was not finished showing. Capybara-webkit was not bothered by
the fact that the dialog was actually hidden and being loaded. PhantomJS bombed
out. However, after I worked around the issue, I realized that my gems were
outdated. Since you&#8217;re going to be fixing a bunch of tests anyway, it makes
sense to get on the latest versions of the testing gems. The gems you want to
upgrade are: rspec, rspec-rails, Capybara, and poltergeist. 
</p>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Visible Option</h3>
<div class="outline-text-3" id="text-2-2">
<p>
After upgrading the gems, my workarounds were no longer necessary. However, the
change from Capybara 2.0 to 2.1 had a big change in the way that it handles
finding dom elements that are <b>not visible</b>. Previously, Capybara would not care
if the dom element was hidden. For my tests, this resulted in breaking any tests
that queried any non-visible DOM elements, such as scripts, meta tags, and
links.
</p>

<p>
The key thing to be aware of is that you might get this obscure error message,
and the fix is to add the <code>visible: false</code> optional parameter so that Capybara
is not filtering by <code>visible: true</code>. The <code>visible</code> parameter is available to
most finder methods in Capybara.
</p>

<p>
The obscure error you might see is something like this:
</p>
<pre class="example">
#=&gt; Capybara::ExpectationNotMet Exception: expected to find xpath "//title" with text "Title Text." but there were no matches. Also found "", which matched the selector but not all filters.
</pre>

<p>
The reason is the title element is not visible, and &#8220;visible&#8221; is the &#8220;not all
filters&#8221; part of the error message.
</p>
</div>
</div>
<div id="outline-container-sec-2-3" class="outline-3">
<h3 id="sec-2-3">Debugging Capybara Tests</h3>
<div class="outline-text-3" id="text-2-3">
<p>
The main reasons that previously passing feature tests will fail when migrating
to Poltergeist is due to timing and visibility. The two main techniques for
debugging Capybara tests are:
</p>
<ol class="org-ol">
<li>Using screen shots (<code>render_page</code> below)
</li>
<li>Using HTML dumps (=page! below)
</li>
</ol>

<p>
Keep in mind that these methods will not wait for elements to load. Thus, you
should either have a Capybara statement that will wait for some DOM element to
load or you might want to put in a <code>sleep 10</code> to sleep for 10 seconds before
capturing the screen shot or dumping the HTML.
</p>

<p>
If you use the helper methods specified below, and you should be able to work
through why Poltergeist is not doing what you think it should be doing. So far,
I haven&#8217;t yet run into a case where I have not found out that it&#8217;s been my fault
rather than a bug in Poltergeist that&#8217;s caused a failure due to the migration.
In many cases, you&#8217;ll be somewhat pleasantly surprised that you&#8217;ll be fixing a
false positive.
</p>
</div>
</div>
<div id="outline-container-sec-2-4" class="outline-3">
<h3 id="sec-2-4">Capybara&#8217;s Wait Strategy</h3>
<div class="outline-text-3" id="text-2-4">
<p>
Be sure to carefully read the <a href="https://github.com/jnicklas/capybara">Capybara documentation</a>, especially the part
titled &#8220;Asynchronous JavaScript&#8221;. That section explains how Capybara cleverly
will wait until the page or ajax call finished so that the element expected
appears. There&#8217;s a configurable timeout (<code>Capybara.default_wait_time</code>) for
changing the default wait time before a test bombs out.
</p>
</div>
</div>
<div id="outline-container-sec-2-5" class="outline-3">
<h3 id="sec-2-5">Xpath Tip</h3>
<div class="outline-text-3" id="text-2-5">
<p>
Be sure to understand the difference between <code>//something</code> and <code>.//something</code>.
The later can be used inside a <code>within</code> block. The former will find the tag
anywhere on the page, even when used inside of a <code>within</code> block!
</p>
</div>
</div>
<div id="outline-container-sec-2-6" class="outline-3">
<h3 id="sec-2-6">Setup and Utility Debugging Methods</h3>
<div class="outline-text-3" id="text-2-6">
<p>
Here&#8217;s the setup and a couple utility methods that I use. Put these in a file in your helpers
directory, such spec/helpers/capybara.rb.
</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">default_wait_time</span> <span class="o">=</span> <span class="mi">8</span> <span class="c1"># Seconds to wait before timeout error. Default is 2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Register slightly larger than default window size...</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">register_driver</span> <span class="ss">:poltergeist</span> <span class="k">do</span> <span class="o">|</span><span class="n">app</span><span class="o">|</span>
</span><span class='line'>  <span class="ss">Capybara</span><span class="p">:</span><span class="ss">:Poltergeist</span><span class="o">::</span><span class="no">Driver</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="p">{</span> <span class="ss">debug</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="c1"># change this to true to troubleshoot</span>
</span><span class='line'>                                           <span class="n">window_size</span><span class="p">:</span> <span class="o">[</span><span class="mi">1300</span><span class="p">,</span> <span class="mi">1000</span><span class="o">]</span> <span class="c1"># this can affect dynamic layout</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="no">Capybara</span><span class="o">.</span><span class="n">javascript_driver</span> <span class="o">=</span> <span class="ss">:poltergeist</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Saves page to place specfied at name inside of</span>
</span><span class='line'><span class="c1"># test.rb definition of:</span>
</span><span class='line'><span class="c1">#   config.integration_test_render_dir = Rails.root.join(&quot;spec&quot;, &quot;render&quot;)</span>
</span><span class='line'><span class="c1"># NOTE: you must pass &quot;js:&quot; for the scenario definition (or else you&#39;ll see that render doesn&#39;t exist!)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">render_page</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
</span><span class='line'>  <span class="n">png_name</span> <span class="o">=</span> <span class="nb">name</span><span class="o">.</span><span class="n">strip</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/\W+/</span><span class="p">,</span> <span class="s1">&#39;-&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">config</span><span class="o">.</span><span class="n">integration_test_render_dir</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">png_name</span><span class="si">}</span><span class="s2">.png&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">driver</span><span class="o">.</span><span class="n">render</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># shortcut for typing save_and_open_page</span>
</span><span class='line'><span class="k">def</span> <span class="nf">page!</span>
</span><span class='line'>  <span class="n">save_and_open_page</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Update to EmberJs Hello World]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/06/29/update-to-emberjs-hello-world/"/>
    <updated>2013-06-29T15:38:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/06/29/update-to-emberjs-hello-world</id>
    <content type="html"><![CDATA[<p>
I updated my previous post <a href="http://www.railsonmaui.com/blog/2013/05/26/ember-dot-js-hello-world/">Ember.js Hello World</a> with a video walkthrough of the
<a href="https://github.com/justin808/ember-js-guides-railsonmaui-no-rest">completed code found on github</a> of the <a href="http://emberjs.com/guides/">Tom Dale&#8217;s Intro Tutorial Video</a> on
EmberJs.
</p>

<p>
Ember is really gaining some traction. For example, <a href="http://boingboing.net/">boing boing</a> just moved it&#8217;s
comments to Discourse, which is based on EmberJs. You can read about it at
boing boing: <a href="http://boingboing.net/2013/06/27/can-we-talk.html">Can we talk?</a>.
</p>

<p>
Please let me know if this walkthrough is helpful. Comments are always welcome.
</p>

<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/vV6zzxi3JOc "></iframe></div>
</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember.js Tutorial With Rails 4]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/06/11/emberjs-rails4-tutorial/"/>
    <updated>2013-06-11T13:00:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/06/11/emberjs-rails4-tutorial</id>
    <content type="html"><![CDATA[<p>
The first post in this series, <a href="http://www.railsonmaui.com/blog/2013/05/26/ember-dot-js-hello-world/">Ember.js Hello World</a>, shows Ember working
without a persistence backend. This post covers setting up Rails4 as the
persistence engine behind that example, plus adding and deleting records. The
amount of Ember and Rails code to make this example is almost completely
included in this article. It&#8217;s that tiny!
</p>

<p>
The source code for the completed example can be found on GitHub:
<a href="https://github.com/justin808/ember-js-guides-railsonmaui-rails4">justin808/ember-js-guides-railsonmaui-rails4</a>. I carefully crafted the commits
to explain the steps.
</p>

<p>
You can try out the application on Heroku at:
<a href="http://railsonmaui-emberjs-rails4.herokuapp.com/">http://railsonmaui-emberjs-rails4.herokuapp.com/</a>
</p>

<p>
I put many more details in this <a href="http://youtu.be/ac1mYhCMRNc">comprehensive screencast</a> of how to go from a
brand new Rails 4 app to an Ember.js app deployed on Heroku.
</p>

<p>
<div class="embed-video-container"><iframe src="http://www.youtube.com/embed/ac1mYhCMRNc "></iframe></div>
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">Key Tips</h2>
<div class="outline-text-2" id="text-1">
<ol class="org-ol">
<li>Be sure to update the <code>ember</code> and <code>ember-data</code> javascript files with the
command from the ember-rails gem (see below). Keeping these files at
appropriate versions is key while the API is changing, especially for
ember-data.
</li>
<li>If you specify the Router property for both <code>model</code> and <code>setupController</code>,
you can have some very confusing results (details below).
</li>
<li>Get comfortable with Ember&#8217;s naming conventions. Ember does a ton with
default naming. It&#8217;s basically got the same philosophy of &#8220;Convention over
Configuration&#8221; of Rails. So it&#8217;s especially important to try to grok when the
Ember examples are doing something implicitly versus explicitly. This is a
bit like Rails. At first it seems like magic, like &#8220;How the heck is that
happening&#8221;, and then one gets accustomed to the naming conventions and
appreciates how much code it saves.
</li>
<li>Be mindful that some Ember.js commands run asynchronously, such as commit.
</li>
</ol>

<!-- more -->
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Building the Hello World without Persistence</h2>
<div class="outline-text-2" id="text-2">
<p>
The steps for this can be found in the git history up to tag <code>no-persistence</code>.
Thanks to a few gems, the process is relatively simple.
</p>
</div>
<div id="outline-container-sec-2-1" class="outline-3">
<h3 id="sec-2-1">Basic Setup</h3>
<div class="outline-text-3" id="text-2-1">
<p>
I started off with the instructions here <a href="http://blog.dcxn.com/2013/03/23/getting-started-with-ember-js-on-rails/">The No Nonsense Guide to Ember.js on
Rails</a>. This article covers the basic setup, such as gems to include. You want to
pay special attention to the <a href="https://github.com/emberjs/ember-rails">README for ember-rails</a>. Depending on the current
state of the ember-rails gem, you may get the deprecation warning (browser
console) with the old ember-data.js.
</p>

<pre class="example">
DEPRECATION: register("store", "main") is now deprecated in-favour of register("store:main");
        at Object.Container.register (http://0.0.0.0:3000/assets/ember.js?body=1:7296:17)
        at Application.initializer.initialize (http://0.0.0.0:3000/assets/ember-data.js?body=1:5069:19)
        at http://0.0.0.0:3000/assets/ember.js?body=1:27903:7
        at visit (http://0.0.0.0:3000/assets/ember.js?body=1:27041:3)
        at DAG.topsort (http://0.0.0.0:3000/assets/ember.js?body=1:27095:7)
        at Ember.Application.Ember.Namespace.extend.runInitializers (http://0.0.0.0:3000/assets/ember.js?body=1:27900:11)
        at Ember.Application.Ember.Namespace.extend._initialize (http://0.0.0.0:3000/assets/ember.js?body=1:27784:10)
        at Object.Backburner.run (http://0.0.0.0:3000/assets/ember.js?body=1:4612:26)
        at Object.Ember.run (http://0.0.0.0:3000/assets/ember.js?body=1:5074:26)
</pre>

<p>
Originally, I included a separate version of ember-data in the git repository.
Instead, I should have updated the versions of ember and ember-data with this
command from the <a href="https://github.com/emberjs/ember-rails">ember-rails README</a>:
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails generate ember:install --head
</span></code></pre></td></tr></table></div></figure>
<p>
This command puts the ember files in <code>vendor/assets/ember</code>. Pretty sweet. This
is way better than manually installing the js files.
</p>
</div>
</div>
<div id="outline-container-sec-2-2" class="outline-3">
<h3 id="sec-2-2">Get the no-database fixture example of Ember.js working.</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Next, I migrated the non-rails static example presented in <a href="http://www.railsonmaui.com/blog/2013/05/26/ember-dot-js-hello-world/">Ember.js Hello World</a>
to the rails framework. You can checkout the tag <code>no-persistence</code> and get the
code to where the static fixture is used and there is no persistence. Scroll to
the bottom to see this code, as well as some additional code added for persistence.
</p>
</div>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Building the Hello World with Persistence</h2>
<div class="outline-text-2" id="text-3">
</div><div id="outline-container-sec-3-1" class="outline-3">
<h3 id="sec-3-1">Create the Model for Blog Posts</h3>
<div class="outline-text-3" id="text-3-1">
<p>
You can checkout the git tag <code>persistence-emberjs</code> to get the git repository to
the state that persistence works.
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>rails generate model Post title:string author:string published_at:date intro:text extended:text
</span><span class='line'><span class="nv">$ </span>rake db:migrate
</span></code></pre></td></tr></table></div></figure>

<p>
Since Rails comes pre-configured with sqllite3 by default, no database
configuration is required.
</p>
</div>
</div>

<div id="outline-container-sec-3-2" class="outline-3">
<h3 id="sec-3-2">Add the Controller and Serializer</h3>
<div class="outline-text-3" id="text-3-2">
<p>
Note that in Rails 4, you need to use the form for &#8220;strong parameters&#8221;. See the
definition of <code>post_params</code> below.
</p>
</div>
<div id="outline-container-sec-3-2-1" class="outline-4">
<h4 id="sec-3-2-1">app/models/post.rb</h4>
<div class="outline-text-4" id="text-3-2-1">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:published_at</span><span class="p">,</span> <span class="ss">:author</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-3-2-2" class="outline-4">
<h4 id="sec-3-2-2">app/serializers/post_serializer.rb</h4>
<div class="outline-text-4" id="text-3-2-2">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:author</span><span class="p">,</span> <span class="ss">:published_at</span><span class="p">,</span> <span class="ss">:intro</span><span class="p">,</span> <span class="ss">:extended</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-3-2-3" class="outline-4">
<h4 id="sec-3-2-3">app/controllers/posts_controller.rb</h4>
<div class="outline-text-4" id="text-3-2-3">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">respond_to</span> <span class="ss">:json</span> <span class="c1"># default to Active Model Serializers</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">,</span> <span class="n">post_params</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">destroy</span>
</span><span class='line'>    <span class="n">respond_with</span> <span class="no">Post</span><span class="o">.</span><span class="n">destroy</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">post_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:title</span><span class="p">,</span> <span class="ss">:intro</span><span class="p">,</span> <span class="ss">:extended</span><span class="p">,</span> <span class="ss">:published_at</span><span class="p">,</span> <span class="ss">:author</span><span class="p">)</span> <span class="c1"># only allow these for now</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
</div>
<div id="outline-container-sec-3-3" class="outline-3">
<h3 id="sec-3-3">Adding &#8220;Add&#8221; and &#8220;Remove&#8221; Buttons</h3>
<div class="outline-text-3" id="text-3-3">
<ul class="org-ul">
<li>To create a new post, <b>use a link, not a button</b>, because we want to change the URL.
</li>
<li>Don&#8217;t define both <code>model</code> and <code>setupController</code> on the Route!
If you do, you&#8217;ll get this error:
<pre class="example">
Uncaught Error: assertion failed: Cannot delegate set('title', a) to the 'content' property of object proxy &lt;App.PostsNewController:ember392&gt;: its 'content' is undefined.
</pre>
<p>
I originally had code like this and it took me some time to figure out that
the <code>model</code> part was not used. 
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.PostsNewRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="nv">publishedAt: </span><span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="nv">author: </span><span class="s">&quot;current user&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">setupController: </span><span class="nf">(controller) -&gt;</span>
</span><span class='line'>    <span class="c1"># controller.set(&#39;content&#39;, App.Post.createRecord(publishedAt: new Date(), author: &quot;current user&quot;))</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</li>
</ul>
</div>
</div>
<div id="outline-container-sec-3-4" class="outline-3">
<h3 id="sec-3-4">Update the URL on New with transitionAfterSave Hook</h3>
<div class="outline-text-3" id="text-3-4">
<p>
You can&#8217;t update the URL after a new record is saved directly in the event
handler, as the commit will run asynchronously, and until the return value,
there is no record id, and you would end up using record id <code>null</code> in the URL.
Here&#8217;s how to handle this situation. Not that the <code>save</code> does the commit, but
the <code>transitionToRoute</code> is not called until the <code>transitionAfterSave</code> hook is
run.
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">App</span><span class="o">.</span><span class="n">PostsNewController</span> <span class="o">=</span> <span class="no">Ember</span><span class="o">.</span><span class="n">ObjectController</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="ss">save</span><span class="p">:</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="vi">@get</span><span class="p">(</span><span class="s1">&#39;store&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="ss">transitionAfterSave</span><span class="p">:</span> <span class="p">(</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="c1"># when creating new records, it&#39;s necessary to wait for the record to be assigned</span>
</span><span class='line'>    <span class="c1"># an id before we can transition to its route (which depends on its id)</span>
</span><span class='line'>    <span class="vi">@transitionToRoute</span><span class="p">(</span><span class="s1">&#39;post&#39;</span><span class="p">,</span> <span class="vi">@get</span><span class="p">(</span><span class="s1">&#39;content&#39;</span><span class="p">))</span> <span class="k">if</span> <span class="vi">@get</span><span class="p">(</span><span class="s1">&#39;content.id&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span><span class="o">.</span><span class="n">observes</span><span class="p">(</span><span class="s1">&#39;content.id&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-3-5" class="outline-3">
<h3 id="sec-3-5">Don&#8217;t put the new record, unsaved post in the list of saved posts</h3>
<div class="outline-text-3" id="text-3-5">
<p>
There&#8217;s a slight bug in the adding of new records. If you click on the unsaved
post link on the left, the URL will have &#8220;null&#8221; as the new post does not yet
have an ID.
</p>

<p>
Here&#8217;s the <a href="https://github.com/justin808/ember-js-guides-railsonmaui-rails4/commit/8c58b6fac8b978f622bf772654258479ba22bae0">commit at github</a>, and the commit description:
</p>
<blockquote>
<p>
See discussion at
<a href="http://stackoverflow.com/questions/14705124/creating-a-record-with-ember-js-ember-data-rails-and-handling-list-of-record">http://stackoverflow.com/questions/14705124/creating-a-record-with-ember-js-ember-data-rails-and-handling-list-of-record</a>
Note the change from iterating over &#8220;each model&#8221; to iterating over &#8220;each post in
filteredContent&#8221; in index.html.erb. That change requires attributes be
referenced by &#8220;post&#8221;, and the updated linkTo takes the route, &#8220;post&#8221;, as well as
the &#8220;dynamic segment&#8221; which is also named &#8220;post&#8221;, per the above #each post.
(refer to <a href="http://emberjs.com/guides/templates/links/">http://emberjs.com/guides/templates/links/</a>). Note the addition of the
PostsController. Previously, it was implicitly defined. It listens to property
&#8220;arrangedContent.@each&#8221; so that when the new post saves, the filteredContent
property updates and notifies the view template using this property in
index.html.erb. Without the listener on this property, the view of all posts
would not update.
</p>
</blockquote>

<p>
This is a really important change that is well documented in the commit as well
as the <a href="http://youtu.be/ac1mYhCMRNc?t=36m20s">tutorial screencast at 36:20</a>.
</p>
</div>
</div>
</div>

<div id="outline-container-sec-4" class="outline-2">
<h2 id="sec-4">Heroku Deployment</h2>
<div class="outline-text-2" id="text-4">
<p>
Heroku has listed many tips at <a href="https://devcenter.heroku.com/articles/rails4">Getting Started with Rails 4.x on Heroku</a>. And you
can look at the commits leading up to tag <code>heroku</code>. The basic steps are:
</p>
<ol class="org-ol">
<li>Change a few gems
</li>
<li>Switch from sqllite to postgres.
</li>
<li>Add a ProcFile to use Puma for the webserver.
</li>
<li>Be sure that production.rb contains:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">ember</span><span class="o">.</span><span class="n">variant</span> <span class="o">=</span> <span class="ss">:production</span>
</span></code></pre></td></tr></table></div></figure>
<p>
If you don&#8217;t, you&#8217;ll see this error:
</p>
<pre class="example">
RAILS_ENV=production bin/rake assets:precompile
rake aborted!
couldn't find file 'handlebars'
  (in /Users/justin/j/emberjs/ember-js-guides-railsonmaui-rails4/app/app/assets/javascripts/application.js:18)
</pre>
</li>
</ol>
</div>
</div>

<div id="outline-container-sec-5" class="outline-2">
<h2 id="sec-5">Examples that Inspired this Tutorial</h2>
<div class="outline-text-2" id="text-5">
</div><div id="outline-container-sec-5-1" class="outline-3">
<h3 id="sec-5-1">RailsCasts</h3>
<div class="outline-text-3" id="text-5-1">
<ul class="org-ul">
<li>The two RailsCasts episodes complement the <a href="http://www.youtube.com/watch?v=Ga99hMi7wfY">first tutorial by Tom Dale</a> by
showing how to add persistence via the <code>rails-ember</code> gem. The serializers
episode is also useful.
<ul class="org-ul">
<li><a href="http://railscasts.com/episodes/408-ember-part-1">#408 Ember Part 1</a> (pro)
</li>
<li><a href="http://railscasts.com/episodes/410-ember-part-2">#410 Ember Part 2</a> (pro)
</li>
<li><a href="http://railscasts.com/episodes/409-active-model-serializers?view=comments">#409 Active Model Serializers</a>
</li>
</ul>
</li>
<li>Tip: Using Chrome to watch the videos: I found that the left/right arrow and
space bar keys are amazing for pausing and rewinding the RailsCasts so that I
could get all the nuances of the Ember naming schemes.
</li>
</ul>
</div>
</div>

<div id="outline-container-sec-5-2" class="outline-3">
<h3 id="sec-5-2">ember_data_example</h3>
<div class="outline-text-3" id="text-5-2">
<ul class="org-ul">
<li><a href="https://github.com/dgeb/ember_data_example">ember_data_example</a> on GitHub is a nice full featured ember app with a parent
child relationship of contacts and phone numbers. It even has some examples
of using <a href="https://github.com/jfirebaugh/konacha">Konacha for testing Ember JavaScript code</a>.
</li>
</ul>
</div>
</div>
</div>
<div id="outline-container-sec-6" class="outline-2">
<h2 id="sec-6">Source Code for Views and JavaScript</h2>
<div class="outline-text-2" id="text-6">
<p>
I purposefully kept these to just 2 files to make this example simple. In a
real world application, this would be broken into many files.
</p>
</div>
<div id="outline-container-sec-6-1" class="outline-3">
<h3 id="sec-6-1">View Code: app/viws/static/index.html.erb</h3>
<div class="outline-text-3" id="text-6-1">
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;navbar&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;navbar-inner&quot;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">a</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;brand&quot;</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;#&quot;</span><span class="o">&gt;</span><span class="nx">Bloggr</span><span class="o">&lt;</span><span class="err">/a&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">ul</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;nav&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{{</span><span class="err">#</span><span class="nx">linkTo</span> <span class="s1">&#39;posts&#39;</span><span class="p">}}</span><span class="nx">Posts</span><span class="p">{{</span><span class="err">/linkTo}}&lt;/li&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">li</span><span class="o">&gt;</span><span class="p">{{</span><span class="err">#</span><span class="nx">linkTo</span> <span class="s1">&#39;about&#39;</span><span class="p">}}</span><span class="nx">About</span><span class="p">{{</span><span class="err">/linkTo}}&lt;/li&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">outlet</span><span class="p">}}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;about&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;about&#39;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Justin</span> <span class="nx">Gordon</span> <span class="nx">wrote</span> <span class="k">this</span><span class="o">:</span> <span class="nx">http</span><span class="o">:</span><span class="c1">//www.railsonmaui.com&lt;/p&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">Git</span> <span class="nx">Repository</span><span class="o">:</span> <span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;posts&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;container-fluid&#39;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;row-fluid&#39;</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;span3&#39;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="nx">table</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;table&#39;</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">thead</span><span class="o">&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">th</span><span class="o">&gt;</span><span class="nx">Recent</span> <span class="nx">Posts</span>
</span><span class='line'>              <span class="p">{{</span><span class="err">#</span><span class="nx">linkTo</span> <span class="s2">&quot;posts.new&quot;</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;btn&quot;</span><span class="p">}}</span><span class="nx">Add</span> <span class="nx">Post</span><span class="p">{{</span><span class="err">/linkTo}}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/th&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/thead&gt;</span>
</span><span class='line'>          <span class="p">{{</span><span class="err">#</span><span class="nx">each</span> <span class="nx">post</span> <span class="k">in</span> <span class="nx">filteredContent</span><span class="p">}}</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="nx">tr</span><span class="o">&gt;</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="nx">td</span><span class="o">&gt;</span>
</span><span class='line'>              <span class="p">{{</span><span class="err">#</span><span class="nx">linkTo</span> <span class="nx">post</span> <span class="nx">post</span><span class="p">}}{{</span><span class="nx">post</span><span class="p">.</span><span class="nx">title</span><span class="p">}}</span>
</span><span class='line'>              <span class="o">&lt;</span><span class="nx">small</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;muted&#39;</span><span class="o">&gt;</span><span class="nx">by</span> <span class="p">{{</span><span class="nx">post</span><span class="p">.</span><span class="nx">author</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/small&gt;</span>
</span><span class='line'>              <span class="p">{{</span><span class="err">/linkTo}}</span>
</span><span class='line'>            <span class="o">&lt;</span><span class="err">/td&gt;</span>
</span><span class='line'>          <span class="o">&lt;</span><span class="err">/tr&gt;</span>
</span><span class='line'>          <span class="p">{{</span><span class="err">/each}}</span>
</span><span class='line'>        <span class="o">&lt;</span><span class="err">/table&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;span9&quot;</span><span class="o">&gt;</span>
</span><span class='line'>        <span class="p">{{</span><span class="nx">outlet</span><span class="p">}}</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>    <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;posts/index&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;text-warning&quot;</span><span class="o">&gt;</span><span class="nx">Please</span> <span class="nx">select</span> <span class="nx">a</span> <span class="nx">post</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;posts/new&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">legend</span><span class="o">&gt;</span><span class="nx">Create</span> <span class="nx">Post</span><span class="o">&lt;</span><span class="err">/legend&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">partial</span> <span class="s1">&#39;post/edit&#39;</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="s1">&#39;save&#39;</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Create</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="nx">cancel</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Cancel</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">partial</span> <span class="s1">&#39;post/view&#39;</span><span class="p">}}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;post&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">#</span><span class="k">if</span> <span class="nx">isEditing</span><span class="p">}}</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">partial</span> <span class="s1">&#39;post/edit&#39;</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="s1">&#39;doneEditing&#39;</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Done</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="k">else</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="s1">&#39;edit&#39;</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Edit</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">button</span> <span class="p">{{</span><span class="nx">action</span> <span class="s1">&#39;delete&#39;</span><span class="p">}}</span> <span class="kr">class</span><span class="o">=</span><span class="s1">&#39;btn&#39;</span><span class="o">&gt;</span><span class="nx">Delete</span><span class="o">&lt;</span><span class="err">/button&gt;</span>
</span><span class='line'>  <span class="p">{{</span><span class="err">/if}}</span>
</span><span class='line'>  <span class="p">{{</span><span class="nx">partial</span> <span class="s1">&#39;post/view&#39;</span><span class="p">}}</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;post/_view&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h1</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">title</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/h1&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">h4</span><span class="o">&gt;</span><span class="nx">by</span> <span class="p">{{</span><span class="nx">author</span><span class="p">}}</span> <span class="o">&lt;</span><span class="nx">small</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;muted&quot;</span><span class="o">&gt;</span><span class="p">({{</span><span class="nx">date</span> <span class="nx">publishedAt</span><span class="p">}})</span><span class="o">&lt;</span><span class="err">/small&gt;&lt;/h4&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">hr</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;intro&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="nx">markdown</span> <span class="nx">intro</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span> <span class="kr">class</span><span class="o">=</span><span class="s2">&quot;below-the-fold&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="p">{{</span><span class="nx">markdown</span> <span class="nx">extended</span><span class="p">}}</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="err">/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;text/x-handlebars&quot;</span> <span class="na">id=</span><span class="s">&quot;post/_edit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">view</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">TextField</span> <span class="nx">valueBinding</span><span class="o">=</span><span class="s1">&#39;title&#39;</span> <span class="nx">cols</span><span class="o">=</span><span class="s2">&quot;30&quot;</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">view</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">TextArea</span> <span class="nx">valueBinding</span><span class="o">=</span><span class="s1">&#39;intro&#39;</span> <span class="nx">cols</span><span class="o">=</span><span class="s2">&quot;50&quot;</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">{{</span><span class="nx">view</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">TextArea</span> <span class="nx">valueBinding</span><span class="o">=</span><span class="s1">&#39;extended&#39;</span> <span class="nx">cols</span><span class="o">=</span><span class="s2">&quot;80&quot;</span> <span class="nx">rows</span><span class="o">=</span><span class="s2">&quot;10&quot;</span><span class="p">}}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/script&gt;</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
<div id="outline-container-sec-6-2" class="outline-3">
<h3 id="sec-6-2">CoffeeScript: app/assets/javascripts/app.js.coffee.</h3>
<div class="outline-text-3" id="text-6-2">
<p>
Here&#8217;s the entire set of CoffeeScript to build this application. As you can see,
it&#8217;s not much! I intentionally left this in one file to make the example a bit
simpler. A real application would break this out into separate files.
</p>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">App.Store = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">Store</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">revision: </span><span class="mi">12</span>
</span><span class='line'>  <span class="nv">adapter: </span><span class="s">&quot;DS.RESTAdapter&quot;</span> <span class="c1"># &quot;DS.FixtureAdapter&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.Post = </span><span class="nx">DS</span><span class="p">.</span><span class="nx">Model</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">title: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">author: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">intro: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">extended: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;string&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">publishedAt: </span><span class="nx">DS</span><span class="p">.</span><span class="nx">attr</span><span class="p">(</span><span class="s">&quot;date&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.PostsRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">find</span><span class="p">()</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># See Discussion at http://stackoverflow.com/questions/14705124/creating-a-record-with-ember-js-ember-data-rails-and-handling-list-of-record</span>
</span><span class='line'><span class="nv">App.PostsController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ArrayController</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">sortProperties: </span><span class="p">[</span> <span class="s">&quot;id&quot;</span> <span class="p">]</span>
</span><span class='line'>  <span class="nv">sortAscending: </span><span class="kc">false</span>
</span><span class='line'>  <span class="nv">filteredContent: </span><span class="p">(</span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nv">content = </span><span class="nx">@get</span><span class="p">(</span><span class="s">&quot;arrangedContent&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">content</span><span class="p">.</span><span class="nx">filter</span> <span class="nf">(item, index) -&gt;</span>
</span><span class='line'>      <span class="o">not</span> <span class="p">(</span><span class="nx">item</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s">&quot;isNew&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">property</span><span class="p">(</span><span class="s">&quot;arrangedContent.@each&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.PostsNewRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">model: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">Post</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="nv">publishedAt: </span><span class="k">new</span> <span class="nb">Date</span><span class="p">(),</span> <span class="nv">author: </span><span class="s">&quot;current user&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.PostsNewController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">save: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;store&#39;</span><span class="p">).</span><span class="nx">commit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">cancel: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;content&#39;</span><span class="p">).</span><span class="nx">deleteRecord</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;store&#39;</span><span class="p">).</span><span class="nx">transaction</span><span class="p">().</span><span class="nx">rollback</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@transitionToRoute</span><span class="p">(</span><span class="s">&#39;posts&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">transitionAfterSave: </span><span class="p">(</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1"># when creating new records, it&#39;s necessary to wait for the record to be assigned</span>
</span><span class='line'>    <span class="c1"># an id before we can transition to its route (which depends on its id)</span>
</span><span class='line'>    <span class="nx">@transitionToRoute</span><span class="p">(</span><span class="s">&#39;post&#39;</span><span class="p">,</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;content&#39;</span><span class="p">))</span> <span class="k">if</span> <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;content.id&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">).</span><span class="nx">observes</span><span class="p">(</span><span class="s">&#39;content.id&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nv">App.PostController = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span>
</span><span class='line'>  <span class="nv">isEditing: </span><span class="kc">false</span>
</span><span class='line'>  <span class="nv">edit: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&quot;isEditing&quot;</span><span class="p">,</span> <span class="kc">true</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">delete</span><span class="o">:</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">confirm</span><span class="p">(</span><span class="s">&quot;Are you sure you want to delete this post?&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;content&#39;</span><span class="p">).</span><span class="nx">deleteRecord</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;store&#39;</span><span class="p">).</span><span class="nx">commit</span><span class="p">()</span>
</span><span class='line'>      <span class="nx">@transitionToRoute</span><span class="p">(</span><span class="s">&#39;posts&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">doneEditing: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@set</span> <span class="s">&quot;isEditing&quot;</span><span class="p">,</span> <span class="kc">false</span>
</span><span class='line'>    <span class="nx">@get</span><span class="p">(</span><span class="s">&#39;store&#39;</span><span class="p">).</span><span class="nx">commit</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="nv">App.IndexRoute = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nv">redirect: </span><span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@transitionTo</span> <span class="s">&quot;posts&quot;</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerBoundHelper</span> <span class="s">&quot;date&quot;</span><span class="p">,</span> <span class="nf">(date) -&gt;</span>
</span><span class='line'>  <span class="nx">moment</span><span class="p">(</span><span class="nx">date</span><span class="p">).</span><span class="nx">fromNow</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">showdown = </span><span class="k">new</span> <span class="nx">Showdown</span><span class="p">.</span><span class="nx">converter</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">registerBoundHelper</span> <span class="s">&quot;markdown&quot;</span><span class="p">,</span> <span class="nf">(input) -&gt;</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">SafeString</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">showdown</span><span class="p">.</span><span class="nx">makeHtml</span><span class="p">(</span><span class="nx">input</span><span class="p">))</span> <span class="k">if</span> <span class="nx">input</span> <span class="c1"># need to check if input is defined and not null</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">Router</span><span class="p">.</span><span class="nx">map</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">@resource</span> <span class="s">&quot;about&quot;</span>
</span><span class='line'>  <span class="nx">@resource</span> <span class="s">&quot;posts&quot;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@resource</span> <span class="s">&quot;post&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nv">path: </span><span class="s">&quot;:post_id&quot;</span>
</span><span class='line'>    <span class="nx">@route</span> <span class="s">&quot;new&quot;</span>
</span></code></pre></td></tr></table></div></figure>
</div>
</div>
</div>
<div id="outline-container-sec-7" class="outline-2">
<h2 id="sec-7">Conclusion</h2>
<div class="outline-text-2" id="text-7">
<p>
Ember does quite a lot with just a few lines of code. Definitely check out the
source code for the completed example github:
<a href="https://github.com/justin808/ember-js-guides-railsonmaui-rails4">justin808/ember-js-guides-railsonmaui-rails4</a>. Please take a look at the
screencast, as I put many details beyond this article.
</p>

<p>
I welcome comments and suggestions.
</p>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CoffeeScript Chrome Extensions]]></title>
    <link href="http://www.railsonmaui.com//blog/2013/05/27/coffeescript-chrome-extensions/"/>
    <updated>2013-05-27T17:16:00-10:00</updated>
    <id>http://www.railsonmaui.com//blog/2013/05/27/coffeescript-chrome-extensions</id>
    <content type="html"><![CDATA[<p>
Here&#8217;s 3 useful tools for using <a href="http://coffeescript.org/">CoffeeScript</a> for web development, possibly with
Rails and EmberJs. All 3 tools are useful for different purposes. 
</p>

<div id="outline-container-sec-1" class="outline-2">
<h2 id="sec-1">CoffeeScript Source Maps: Debugging CoffeeScript Directly</h2>
<div class="outline-text-2" id="text-1">
<p>
With Source Maps, you don&#8217;t have to mentally convert your CoffeeScript code into
JavaScript code in the debugger. Instead, you can now see your CoffeeScript
code, even with correct line numbers. This rails gem, <a href="https://github.com/markbates/coffee-rails-source-maps">coffee-rails-source-maps</a>,
makes it easy to include CoffeeScript source maps as part of your rails
application. Note, the <code>Rails.env.development?</code> is hard coded, so this only works
when you use that specific environment. You can also do it manually, by using
the <code>-m</code> flag with the <code>coffee</code> command.
<img src="http://www.railsonmaui.com//images/2013-05-27-coffeescript-chrome-extensions/coffeescript-source-map.png">
</p>
</div>
</div>
<div id="outline-container-sec-2" class="outline-2">
<h2 id="sec-2">Try CoffeeScript Chrome Extension: Converting between CoffeeScript and JavaScript</h2>
<div class="outline-text-2" id="text-2">
<p>
The <a href="https://chrome.google.com/webstore/detail/try-coffeescript-enhanced/fldhkfldchaibgaheaogapecjmnkaepe?hl=en">Try CoffeeScript Enhanced</a> Chrome extension is pretty nice for converting
between JavaScript and CoffeeScript. The main advantage over
<a href="http://js2coffee.org">http://js2coffee.org</a> is that the you don&#8217;t have to open a new browser tab, and
you can enter either CoffeeScript or JavaScript.
</p>

<p>
<img src="http://www.railsonmaui.com//images/2013-05-27-coffeescript-chrome-extensions/try-coffeescript.png">
</p>
</div>
</div>
<div id="outline-container-sec-3" class="outline-2">
<h2 id="sec-3">Coffee Console Developer Tool: Executing CoffeeScript in Chrome</h2>
<div class="outline-text-2" id="text-3">
<p>
&#8221;<a href="http://snook.ca/archives/browsers/coffeeconsole">Coffeeconsole: A Chrome Extension</a>&#8221; provides a place to execute CoffeeScript in
the Web Inspector.
<img src="http://www.railsonmaui.com//images/2013-05-27-coffeescript-chrome-extensions/coffee-console.png">
</p>
</div>
</div>
]]></content>
  </entry>
  
</feed>
