#+BEGIN_HTML
---
layout: post
title: "Ember.js Hello World with Rails 4 Persistence"
date: 2013-05-28 16:06
comments: true
categories: [Rails, emberjs]
keywords: Rails4, Rails, Ruby on Rails, Ember.js, Emberjs
description: This post demonstrates how to build a simple Ember.js app with Rails 4 for persistence. 
published: false
---
#+END_HTML

The first post in this series, [[http://www.railsonmaui.com/blog/2013/05/26/ember-dot-js-hello-world/][Ember.js Hello World]], shows Ember working
without a persistence backend. This post covers setting up Rails4 as the
persistence engine behind that example, plus adding and deleting records.

The source code for the completed example can be found on github:
[[https://github.com/justin808/ember-js-guides-railsonmaui-rails4][justin808/ember-js-guides-railsonmaui-rails4]]. You can try out the application
on Heroku at: 

* Key Tips
1. Be sure to update the ember and ember-data javascript files with the command
   from the ember-rails gem (see below).
2. If you specify the Router property for =model= and =setupController=, you
   can have some very confusing results.
3. Get comfortable with Ember's naming conventions.
4. Examine the git repo [[https://github.com/justin808/ember-js-guides-railsonmaui-rails4][justin808/ember-js-guides-railsonmaui-rails4]].
5. Ember does a ton with default naming. It's basically got the same philosophy of
"Convention over Configuration" of Rails. So it's especially important to try
to grok when the Ember examples are doing something implicitly versus
explicitly. This is a bit like Rails. At first it seems like magic, like "How
the heck is that happening", and then one gets accustomed to the naming
conventions and appreciates how much code it saves.

* Building the Hello World with Persistence
** Basic Setup
I started off with the instructions here [[http://blog.dcxn.com/2013/03/23/getting-started-with-ember-js-on-rails/][The No Nonsense Guide to Ember.js on
Rails]]. This covers that basic gems. You want to pay special attention to the
[[https://github.com/emberjs/ember-rails][readme for ember-rails]]. Depending on the current state of the ember-rails gem,
you may get the deprecation warning (browser console) with the old ember-data.js.

  #+BEGIN_EXAMPLE
  DEPRECATION: register("store", "main") is now deprecated in-favour of register("store:main");
          at Object.Container.register (http://0.0.0.0:3000/assets/ember.js?body=1:7296:17)
          at Application.initializer.initialize (http://0.0.0.0:3000/assets/ember-data.js?body=1:5069:19)
          at http://0.0.0.0:3000/assets/ember.js?body=1:27903:7
          at visit (http://0.0.0.0:3000/assets/ember.js?body=1:27041:3)
          at DAG.topsort (http://0.0.0.0:3000/assets/ember.js?body=1:27095:7)
          at Ember.Application.Ember.Namespace.extend.runInitializers (http://0.0.0.0:3000/assets/ember.js?body=1:27900:11)
          at Ember.Application.Ember.Namespace.extend._initialize (http://0.0.0.0:3000/assets/ember.js?body=1:27784:10)
          at Object.Backburner.run (http://0.0.0.0:3000/assets/ember.js?body=1:4612:26)
          at Object.Ember.run (http://0.0.0.0:3000/assets/ember.js?body=1:5074:26) 
  #+END_EXAMPLE

Originally, I included a separate version of ember-data in the git repository
because otherwise, +Get the desired version of ember-data.js from here:
http://builds.emberjs.com/+. 

Instead, I should have updated the versions of ember and
ember-data with this command from the ember-rails readme:
#+BEGIN_SRC bash
  rails generate ember:install --head
#+END_SRC
This command puts the ember files in =vendor/assets/ember=. Pretty sweet. This
is way better than manually installing the js files.

** Get the no-database fixture example of Ember.js working.
My first step was converting the non-rails static example presented in [[http://www.railsonmaui.com/blog/2013/05/26/ember-dot-js-hello-world/][Ember.js
Hello World]] to work the rails framework.

** Create the Model for Blog Posts
#+BEGIN_SRC bash
$ rails generate model Post title:string author:string published_at:date intro:text extended:text
$ rake db:migrate
#+END_SRC

Since Rails comes pre-configured with sqllite3 by default, no database
configuration is required.

** Adding "Add" and "Remove" Buttons
+ To create a new post, *use a link, not a button*, because we want to change the URL.
+ Don't define both =model= and =setupController= on the Route!
  If you do, you'll get this error:
  #+BEGIN_EXAMPLE
  Uncaught Error: assertion failed: Cannot delegate set('title', a) to the 'content' property of object proxy <App.PostsNewController:ember392>: its 'content' is undefined.  
  #+END_EXAMPLE
  I.e., if you define both =model= and =setupController=, you'll get the
  above error, even if you have no code in the =setupController= definition! 
  #+BEGIN_SRC coffeescript
  App.PostsNewRoute = Ember.Route.extend(
    model: ->
      App.Post.createRecord(publishedAt: new Date(), author: "current user")
    setupController: (controller) ->
      # controller.set('content', App.Post.createRecord(publishedAt: new Date(), author: "current user"))
  )   
  #+END_SRC

** Heroku Deployment
You can find the details here: [[https://devcenter.heroku.com/articles/rails4][Getting Started with Rails 4.x on Heroku]]


* OTHER

+ Check out the git repo I created [[https://github.com/justin808/ember-js-guides-railsonmaui-rails4][justin808/ember-js-guides-railsonmaui-rails4]],
  especially the [[https://github.com/justin808/ember-js-guides-railsonmaui-rails4/commits/master][commits and comments]], as they walk you through what you need to
  do in order to migrate the static example to the dynamic rails example. You
  can also find the example here, on Heroku: [PENDING]

* Examples that Inspired this Tutorial
** RailsCasts
+ The two RailsCasts episodes complement the first tutorial by Tom Dale by
  showing how to add persistence via the =rails-ember= gem. The serializers
  episode is also useful.
  + [[http://railscasts.com/episodes/408-ember-part-1][#408 Ember Part 1]] (pro)
  + [[http://railscasts.com/episodes/410-ember-part-2][#410 Ember Part 2]] (pro)
  + [[http://railscasts.com/episodes/409-active-model-serializers?view%3Dcomments][#409 Active Model Serializers]]
+ Tip: Using Chrome, I found that the left/right arrow and space bar keys are
  amazing for pausing and rewinding the railscasts so that I could get all the
  nuances of the Ember naming schemes.
* ember_data_example
+ [[https://github.com/dgeb/ember_data_example][ember_data_example]] on Github is a nice full featured ember app with a parent
  child relationship of contacts and phone numbers. It even has some examples
  of using [[https://github.com/jfirebaugh/konacha][Konacha for testing Ember javascript code]].
  


* Source Code
The source code here is an example. However, a more up-to-date example maybe at
the git repo for the example: [[https://github.com/justin808/ember-js-guides-railsonmaui-rails4][justin808/ember-js-guides-railsonmaui-rails4]].

** View Code: app/viws/static/index.html.erb
#+BEGIN_SRC html
{% raw %}
<script type="text/x-handlebars">
  <div class="navbar">
    <div class="navbar-inner">
      <a class="brand" href="#">Bloggr</a>
      <ul class="nav">
        <li>{{#linkTo 'posts'}}Posts{{/linkTo}}</li>
        <li>{{#linkTo 'about'}}About{{/linkTo}}</li>
      </ul>

    </div>
  </div>
  {{outlet}}
</script>

<script type="text/x-handlebars" id="about">
  <div class='about'>
    <p>Justin Gordon wrote this: http://www.railsonmaui.com</p>
    <p>Git Repository: </p>
  </div>
</script>

<script type="text/x-handlebars" id="posts">
  <div class='container-fluid'>
    <div class='row-fluid'>
      <div class='span3'>
        <table class='table'>
          <thead>
          <tr>
            <th>Recent Posts
              {{#linkTo "posts.new" class="btn"}}Add Post{{/linkTo}}
            </th>
          </tr>
          </thead>
          {{#each model}}
          <tr>
            <td>
              {{#linkTo 'post' this}}{{title}}
              <small class='muted'>by {{author}}</small>
              {{/linkTo}}
            </td>
          </tr>
          {{/each}}
        </table>
      </div>
      <div class="span9">
        {{outlet}}
      </div>
    </div>
  </div>
</script>
<script type="text/x-handlebars" id="posts/index">
  <p class="text-warning">Please select a post</p>
</script>

<script type="text/x-handlebars" id="posts/new">
  <legend>Create Post</legend>
  {{partial 'post/edit'}}
  <button {{action 'save'}} class='btn'>Create</button>
  <button {{action cancel}} class='btn'>Cancel</button>
  {{partial 'post/view'}}
</script>

<script type="text/x-handlebars" id="post">
  {{#if isEditing}}
  {{partial 'post/edit'}}
  <button {{action 'doneEditing'}} class='btn'>Done</button>
  {{else}}
  <button {{action 'edit'}} class='btn'>Edit</button>
  <button {{action 'delete'}} class='btn'>Delete</button>
  {{/if}}
  {{partial 'post/view'}}
</script>

<script type="text/x-handlebars" id="post/_view">
  <h1>{{title}}</h1>
  <h4>by {{author}} <small class="muted">({{date publishedAt}})</small></h4>
  <hr>
  <div class="intro">
    {{markdown intro}}
  </div>
  <div class="below-the-fold">
    {{markdown extended}}
  </div>
</script>

<script type="text/x-handlebars" id="post/_edit">
  <p>{{view Ember.TextField valueBinding='title' cols="30"}}</p>
  <p>{{view Ember.TextArea valueBinding='intro' cols="50"}}</p>
  <p>{{view Ember.TextArea valueBinding='extended' cols="80" rows="10"}}</p>
</script>
{% endraw %}
#+END_SRC


** CoffeeScript: app/assets/javascripts/app.js.coffee.
Here's the entire set of CoffeeScript to build this application. As you can see,
it's not much! I intentionally left this in one file to make the example a bit
simpler. A real application would break this out into separate files.
#+BEGIN_SRC coffeescript
App.Store = DS.Store.extend(
  revision: 12
  adapter: "DS.RESTAdapter" # "DS.FixtureAdapter"
)

App.Post = DS.Model.extend(
  title: DS.attr("string")
  author: DS.attr("string")
  intro: DS.attr("string")
  extended: DS.attr("string")
  publishedAt: DS.attr("date")
)

App.PostsRoute = Ember.Route.extend(
  model: ->
    App.Post.find()
)

App.PostsNewRoute = Ember.Route.extend(
  model: ->
    App.Post.createRecord(publishedAt: new Date(), author: "current user")
)

App.PostsNewController = Ember.ObjectController.extend(
  save: ->
    @get('store').commit()
    @transitionToRoute('post', this.get('content'))

  cancel: ->
    @get('content').deleteRecord()
    @get('store').transaction().rollback()
    @transitionToRoute('posts')
)

App.PostController = Ember.ObjectController.extend(
  isEditing: false
  edit: ->
    @set "isEditing", true

  delete: ->
    if (window.confirm("Are you sure you want to delete this contact?"))
      @get('content').deleteRecord()
      @get('store').commit()
      @transitionToRoute('posts')

  doneEditing: ->
    @set "isEditing", false
    @get('store').commit()

)
App.IndexRoute = Ember.Route.extend(redirect: ->
  @transitionTo "posts"
)
Ember.Handlebars.registerBoundHelper "date", (date) ->
  moment(date).fromNow()

window.showdown = new Showdown.converter()

Ember.Handlebars.registerBoundHelper "markdown", (input) ->
  new Ember.Handlebars.SafeString(window.showdown.makeHtml(input)) if input # need to check if input is defined and not null

Ember.Handlebars.registerHelper 'submitButton', (text) ->
  new Handlebars.SafeString('<button type="submit" class="btn btn-primary">' + text + '</button>')


App.Router.map ->
  @resource "about"
  @resource "posts", ->
    @resource "post",
      path: ":post_id"
    @route "new"
#+END_SRC

** Rails Code

*** app/models/post.rb
#+BEGIN_SRC ruby
class Post < ActiveRecord::Base
  validates_presence_of :published_at, :author
end
#+END_SRC

*** app/serializers/post_serializer.rb
#+BEGIN_SRC ruby
class PostSerializer < ActiveModel::Serializer
  attributes :id, :title, :author, :published_at, :intro, :extended
end
#+END_SRC

*** app/controllers/posts_controller.rb
#+BEGIN_SRC ruby
class PostsController < ApplicationController
  respond_to :json # default to Active Model Serializers

  def index
    respond_with Post.all
  end

  def show
    respond_with Post.find(params[:id])
  end

  def create
    respond_with Post.create(post_params)
  end

  def update
    respond_with Post.update(params[:id], post_params)
  end

  def destroy
    respond_with Post.destroy(params[:id])
  end

  private
  def post_params
    params.require(:post).permit(:title, :intro, :extended, :published_at, :author) # only allow these for now
  end
end
#+END_SRC



+ Notes

* Error When Deploying to Heroku
Deploying to Heroku is going to run the production environment pre-compile.

If you see this error:
#+BEGIN_EXAMPLE
RAILS_ENV=production bin/rake assets:precompile
rake aborted!
couldn't find file 'handlebars'
  (in /Users/justin/j/emberjs/ember-js-guides-railsonmaui-rails4/app/app/assets/javascripts/application.js:18)
#+END_EXAMPLE

Then the reason may be that you need to put this in =production.rb=
#+BEGIN_SRC ruby
config.ember.variant = :production
#+END_SRC
